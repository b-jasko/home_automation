
home_automation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fdc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  080060f0  080060f0  000160f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006398  08006398  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006398  08006398  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006398  08006398  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006398  08006398  00016398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800639c  0800639c  0001639c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080063a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200001dc  0800657c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  0800657c  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c01d  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fda  00000000  00000000  0002c222  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce8  00000000  00000000  0002e200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bf0  00000000  00000000  0002eee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000146b2  00000000  00000000  0002fad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009188  00000000  00000000  0004418a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000727e8  00000000  00000000  0004d312  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bfafa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004004  00000000  00000000  000bfb78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080060d4 	.word	0x080060d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080060d4 	.word	0x080060d4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	d1ed      	bne.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_Init+0x28>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_Init+0x28>)
 8000f8e:	f043 0310 	orr.w	r3, r3, #16
 8000f92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f000 f945 	bl	8001224 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f000 f808 	bl	8000fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa0:	f002 fe82 	bl	8003ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40022000 	.word	0x40022000

08000fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_InitTick+0x54>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_InitTick+0x58>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f95d 	bl	800128e <HAL_SYSTICK_Config>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00e      	b.n	8000ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b0f      	cmp	r3, #15
 8000fe2:	d80a      	bhi.n	8000ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f000 f925 	bl	800123a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff0:	4a06      	ldr	r2, [pc, #24]	; (800100c <HAL_InitTick+0x5c>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e000      	b.n	8000ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000008 	.word	0x20000008
 8001008:	20000004 	.word	0x20000004
 800100c:	20000000 	.word	0x20000000

08001010 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <HAL_IncTick+0x1c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x20>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4413      	add	r3, r2
 8001020:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x20>)
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	20000004 	.word	0x20000004
 8001030:	20000208 	.word	0x20000208

08001034 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b02      	ldr	r3, [pc, #8]	; (8001044 <HAL_GetTick+0x10>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	20000208 	.word	0x20000208

08001048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff fff0 	bl	8001034 <HAL_GetTick>
 8001054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001060:	d005      	beq.n	800106e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <HAL_Delay+0x40>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800106e:	bf00      	nop
 8001070:	f7ff ffe0 	bl	8001034 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	429a      	cmp	r2, r3
 800107e:	d8f7      	bhi.n	8001070 <HAL_Delay+0x28>
  {
  }
}
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000004 	.word	0x20000004

0800108c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010be:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	60d3      	str	r3, [r2, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db0b      	blt.n	800111a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	4906      	ldr	r1, [pc, #24]	; (8001124 <__NVIC_EnableIRQ+0x34>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	2001      	movs	r0, #1
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	e000e100 	.word	0xe000e100

08001128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	db0a      	blt.n	8001152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	490c      	ldr	r1, [pc, #48]	; (8001174 <__NVIC_SetPriority+0x4c>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	0112      	lsls	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	440b      	add	r3, r1
 800114c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001150:	e00a      	b.n	8001168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4908      	ldr	r1, [pc, #32]	; (8001178 <__NVIC_SetPriority+0x50>)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	3b04      	subs	r3, #4
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	440b      	add	r3, r1
 8001166:	761a      	strb	r2, [r3, #24]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000e100 	.word	0xe000e100
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f1c3 0307 	rsb	r3, r3, #7
 8001196:	2b04      	cmp	r3, #4
 8001198:	bf28      	it	cs
 800119a:	2304      	movcs	r3, #4
 800119c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3304      	adds	r3, #4
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d902      	bls.n	80011ac <NVIC_EncodePriority+0x30>
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3b03      	subs	r3, #3
 80011aa:	e000      	b.n	80011ae <NVIC_EncodePriority+0x32>
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43da      	mvns	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	4313      	orrs	r3, r2
         );
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f0:	d301      	bcc.n	80011f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00f      	b.n	8001216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <SysTick_Config+0x40>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fe:	210f      	movs	r1, #15
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f7ff ff90 	bl	8001128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <SysTick_Config+0x40>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <SysTick_Config+0x40>)
 8001210:	2207      	movs	r2, #7
 8001212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	e000e010 	.word	0xe000e010

08001224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff2d 	bl	800108c <__NVIC_SetPriorityGrouping>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800124c:	f7ff ff42 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 8001250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f7ff ff90 	bl	800117c <NVIC_EncodePriority>
 800125c:	4602      	mov	r2, r0
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff5f 	bl	8001128 <__NVIC_SetPriority>
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff35 	bl	80010f0 <__NVIC_EnableIRQ>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ffa2 	bl	80011e0 <SysTick_Config>
 800129c:	4603      	mov	r3, r0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d005      	beq.n	80012ca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2204      	movs	r2, #4
 80012c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e051      	b.n	800136e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 020e 	bic.w	r2, r2, #14
 80012d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0201 	bic.w	r2, r2, #1
 80012e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a22      	ldr	r2, [pc, #136]	; (8001378 <HAL_DMA_Abort_IT+0xd0>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d029      	beq.n	8001348 <HAL_DMA_Abort_IT+0xa0>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a20      	ldr	r2, [pc, #128]	; (800137c <HAL_DMA_Abort_IT+0xd4>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d022      	beq.n	8001344 <HAL_DMA_Abort_IT+0x9c>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a1f      	ldr	r2, [pc, #124]	; (8001380 <HAL_DMA_Abort_IT+0xd8>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d01a      	beq.n	800133e <HAL_DMA_Abort_IT+0x96>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a1d      	ldr	r2, [pc, #116]	; (8001384 <HAL_DMA_Abort_IT+0xdc>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d012      	beq.n	8001338 <HAL_DMA_Abort_IT+0x90>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a1c      	ldr	r2, [pc, #112]	; (8001388 <HAL_DMA_Abort_IT+0xe0>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d00a      	beq.n	8001332 <HAL_DMA_Abort_IT+0x8a>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a1a      	ldr	r2, [pc, #104]	; (800138c <HAL_DMA_Abort_IT+0xe4>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d102      	bne.n	800132c <HAL_DMA_Abort_IT+0x84>
 8001326:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800132a:	e00e      	b.n	800134a <HAL_DMA_Abort_IT+0xa2>
 800132c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001330:	e00b      	b.n	800134a <HAL_DMA_Abort_IT+0xa2>
 8001332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001336:	e008      	b.n	800134a <HAL_DMA_Abort_IT+0xa2>
 8001338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133c:	e005      	b.n	800134a <HAL_DMA_Abort_IT+0xa2>
 800133e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001342:	e002      	b.n	800134a <HAL_DMA_Abort_IT+0xa2>
 8001344:	2310      	movs	r3, #16
 8001346:	e000      	b.n	800134a <HAL_DMA_Abort_IT+0xa2>
 8001348:	2301      	movs	r3, #1
 800134a:	4a11      	ldr	r2, [pc, #68]	; (8001390 <HAL_DMA_Abort_IT+0xe8>)
 800134c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	4798      	blx	r3
    } 
  }
  return status;
 800136e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40020008 	.word	0x40020008
 800137c:	4002001c 	.word	0x4002001c
 8001380:	40020030 	.word	0x40020030
 8001384:	40020044 	.word	0x40020044
 8001388:	40020058 	.word	0x40020058
 800138c:	4002006c 	.word	0x4002006c
 8001390:	40020000 	.word	0x40020000

08001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001394:	b480      	push	{r7}
 8001396:	b08b      	sub	sp, #44	; 0x2c
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a6:	e127      	b.n	80015f8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013a8:	2201      	movs	r2, #1
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	69fa      	ldr	r2, [r7, #28]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	f040 8116 	bne.w	80015f2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b12      	cmp	r3, #18
 80013cc:	d034      	beq.n	8001438 <HAL_GPIO_Init+0xa4>
 80013ce:	2b12      	cmp	r3, #18
 80013d0:	d80d      	bhi.n	80013ee <HAL_GPIO_Init+0x5a>
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d02b      	beq.n	800142e <HAL_GPIO_Init+0x9a>
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d804      	bhi.n	80013e4 <HAL_GPIO_Init+0x50>
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d031      	beq.n	8001442 <HAL_GPIO_Init+0xae>
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d01c      	beq.n	800141c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013e2:	e048      	b.n	8001476 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013e4:	2b03      	cmp	r3, #3
 80013e6:	d043      	beq.n	8001470 <HAL_GPIO_Init+0xdc>
 80013e8:	2b11      	cmp	r3, #17
 80013ea:	d01b      	beq.n	8001424 <HAL_GPIO_Init+0x90>
          break;
 80013ec:	e043      	b.n	8001476 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013ee:	4a89      	ldr	r2, [pc, #548]	; (8001614 <HAL_GPIO_Init+0x280>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d026      	beq.n	8001442 <HAL_GPIO_Init+0xae>
 80013f4:	4a87      	ldr	r2, [pc, #540]	; (8001614 <HAL_GPIO_Init+0x280>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d806      	bhi.n	8001408 <HAL_GPIO_Init+0x74>
 80013fa:	4a87      	ldr	r2, [pc, #540]	; (8001618 <HAL_GPIO_Init+0x284>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d020      	beq.n	8001442 <HAL_GPIO_Init+0xae>
 8001400:	4a86      	ldr	r2, [pc, #536]	; (800161c <HAL_GPIO_Init+0x288>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d01d      	beq.n	8001442 <HAL_GPIO_Init+0xae>
          break;
 8001406:	e036      	b.n	8001476 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001408:	4a85      	ldr	r2, [pc, #532]	; (8001620 <HAL_GPIO_Init+0x28c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d019      	beq.n	8001442 <HAL_GPIO_Init+0xae>
 800140e:	4a85      	ldr	r2, [pc, #532]	; (8001624 <HAL_GPIO_Init+0x290>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d016      	beq.n	8001442 <HAL_GPIO_Init+0xae>
 8001414:	4a84      	ldr	r2, [pc, #528]	; (8001628 <HAL_GPIO_Init+0x294>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d013      	beq.n	8001442 <HAL_GPIO_Init+0xae>
          break;
 800141a:	e02c      	b.n	8001476 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	623b      	str	r3, [r7, #32]
          break;
 8001422:	e028      	b.n	8001476 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	3304      	adds	r3, #4
 800142a:	623b      	str	r3, [r7, #32]
          break;
 800142c:	e023      	b.n	8001476 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	3308      	adds	r3, #8
 8001434:	623b      	str	r3, [r7, #32]
          break;
 8001436:	e01e      	b.n	8001476 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	330c      	adds	r3, #12
 800143e:	623b      	str	r3, [r7, #32]
          break;
 8001440:	e019      	b.n	8001476 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800144a:	2304      	movs	r3, #4
 800144c:	623b      	str	r3, [r7, #32]
          break;
 800144e:	e012      	b.n	8001476 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d105      	bne.n	8001464 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001458:	2308      	movs	r3, #8
 800145a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69fa      	ldr	r2, [r7, #28]
 8001460:	611a      	str	r2, [r3, #16]
          break;
 8001462:	e008      	b.n	8001476 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001464:	2308      	movs	r3, #8
 8001466:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69fa      	ldr	r2, [r7, #28]
 800146c:	615a      	str	r2, [r3, #20]
          break;
 800146e:	e002      	b.n	8001476 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
          break;
 8001474:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	2bff      	cmp	r3, #255	; 0xff
 800147a:	d801      	bhi.n	8001480 <HAL_GPIO_Init+0xec>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	e001      	b.n	8001484 <HAL_GPIO_Init+0xf0>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3304      	adds	r3, #4
 8001484:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	2bff      	cmp	r3, #255	; 0xff
 800148a:	d802      	bhi.n	8001492 <HAL_GPIO_Init+0xfe>
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	e002      	b.n	8001498 <HAL_GPIO_Init+0x104>
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	3b08      	subs	r3, #8
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	210f      	movs	r1, #15
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	401a      	ands	r2, r3
 80014aa:	6a39      	ldr	r1, [r7, #32]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	431a      	orrs	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 8096 	beq.w	80015f2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014c6:	4b59      	ldr	r3, [pc, #356]	; (800162c <HAL_GPIO_Init+0x298>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	4a58      	ldr	r2, [pc, #352]	; (800162c <HAL_GPIO_Init+0x298>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6193      	str	r3, [r2, #24]
 80014d2:	4b56      	ldr	r3, [pc, #344]	; (800162c <HAL_GPIO_Init+0x298>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014de:	4a54      	ldr	r2, [pc, #336]	; (8001630 <HAL_GPIO_Init+0x29c>)
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	089b      	lsrs	r3, r3, #2
 80014e4:	3302      	adds	r3, #2
 80014e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	220f      	movs	r2, #15
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	4013      	ands	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4b      	ldr	r2, [pc, #300]	; (8001634 <HAL_GPIO_Init+0x2a0>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d013      	beq.n	8001532 <HAL_GPIO_Init+0x19e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4a      	ldr	r2, [pc, #296]	; (8001638 <HAL_GPIO_Init+0x2a4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d00d      	beq.n	800152e <HAL_GPIO_Init+0x19a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a49      	ldr	r2, [pc, #292]	; (800163c <HAL_GPIO_Init+0x2a8>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d007      	beq.n	800152a <HAL_GPIO_Init+0x196>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a48      	ldr	r2, [pc, #288]	; (8001640 <HAL_GPIO_Init+0x2ac>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d101      	bne.n	8001526 <HAL_GPIO_Init+0x192>
 8001522:	2303      	movs	r3, #3
 8001524:	e006      	b.n	8001534 <HAL_GPIO_Init+0x1a0>
 8001526:	2304      	movs	r3, #4
 8001528:	e004      	b.n	8001534 <HAL_GPIO_Init+0x1a0>
 800152a:	2302      	movs	r3, #2
 800152c:	e002      	b.n	8001534 <HAL_GPIO_Init+0x1a0>
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <HAL_GPIO_Init+0x1a0>
 8001532:	2300      	movs	r3, #0
 8001534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001536:	f002 0203 	and.w	r2, r2, #3
 800153a:	0092      	lsls	r2, r2, #2
 800153c:	4093      	lsls	r3, r2
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	4313      	orrs	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001544:	493a      	ldr	r1, [pc, #232]	; (8001630 <HAL_GPIO_Init+0x29c>)
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3302      	adds	r3, #2
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d006      	beq.n	800156c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800155e:	4b39      	ldr	r3, [pc, #228]	; (8001644 <HAL_GPIO_Init+0x2b0>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	4938      	ldr	r1, [pc, #224]	; (8001644 <HAL_GPIO_Init+0x2b0>)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
 800156a:	e006      	b.n	800157a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800156c:	4b35      	ldr	r3, [pc, #212]	; (8001644 <HAL_GPIO_Init+0x2b0>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	43db      	mvns	r3, r3
 8001574:	4933      	ldr	r1, [pc, #204]	; (8001644 <HAL_GPIO_Init+0x2b0>)
 8001576:	4013      	ands	r3, r2
 8001578:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d006      	beq.n	8001594 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001586:	4b2f      	ldr	r3, [pc, #188]	; (8001644 <HAL_GPIO_Init+0x2b0>)
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	492e      	ldr	r1, [pc, #184]	; (8001644 <HAL_GPIO_Init+0x2b0>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	4313      	orrs	r3, r2
 8001590:	604b      	str	r3, [r1, #4]
 8001592:	e006      	b.n	80015a2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001594:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <HAL_GPIO_Init+0x2b0>)
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	43db      	mvns	r3, r3
 800159c:	4929      	ldr	r1, [pc, #164]	; (8001644 <HAL_GPIO_Init+0x2b0>)
 800159e:	4013      	ands	r3, r2
 80015a0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d006      	beq.n	80015bc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015ae:	4b25      	ldr	r3, [pc, #148]	; (8001644 <HAL_GPIO_Init+0x2b0>)
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	4924      	ldr	r1, [pc, #144]	; (8001644 <HAL_GPIO_Init+0x2b0>)
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	608b      	str	r3, [r1, #8]
 80015ba:	e006      	b.n	80015ca <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015bc:	4b21      	ldr	r3, [pc, #132]	; (8001644 <HAL_GPIO_Init+0x2b0>)
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	491f      	ldr	r1, [pc, #124]	; (8001644 <HAL_GPIO_Init+0x2b0>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d006      	beq.n	80015e4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_GPIO_Init+0x2b0>)
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	491a      	ldr	r1, [pc, #104]	; (8001644 <HAL_GPIO_Init+0x2b0>)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	60cb      	str	r3, [r1, #12]
 80015e2:	e006      	b.n	80015f2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <HAL_GPIO_Init+0x2b0>)
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	4915      	ldr	r1, [pc, #84]	; (8001644 <HAL_GPIO_Init+0x2b0>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	3301      	adds	r3, #1
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	f47f aed0 	bne.w	80013a8 <HAL_GPIO_Init+0x14>
  }
}
 8001608:	bf00      	nop
 800160a:	372c      	adds	r7, #44	; 0x2c
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	10210000 	.word	0x10210000
 8001618:	10110000 	.word	0x10110000
 800161c:	10120000 	.word	0x10120000
 8001620:	10310000 	.word	0x10310000
 8001624:	10320000 	.word	0x10320000
 8001628:	10220000 	.word	0x10220000
 800162c:	40021000 	.word	0x40021000
 8001630:	40010000 	.word	0x40010000
 8001634:	40010800 	.word	0x40010800
 8001638:	40010c00 	.word	0x40010c00
 800163c:	40011000 	.word	0x40011000
 8001640:	40011400 	.word	0x40011400
 8001644:	40010400 	.word	0x40010400

08001648 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	887b      	ldrh	r3, [r7, #2]
 800165a:	4013      	ands	r3, r2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001660:	2301      	movs	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
 8001664:	e001      	b.n	800166a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001666:	2300      	movs	r3, #0
 8001668:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr

08001676 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	460b      	mov	r3, r1
 8001680:	807b      	strh	r3, [r7, #2]
 8001682:	4613      	mov	r3, r2
 8001684:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001686:	787b      	ldrb	r3, [r7, #1]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800168c:	887a      	ldrh	r2, [r7, #2]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001692:	e003      	b.n	800169c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001694:	887b      	ldrh	r3, [r7, #2]
 8001696:	041a      	lsls	r2, r3, #16
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	611a      	str	r2, [r3, #16]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
	...

080016a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	4013      	ands	r3, r2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d006      	beq.n	80016cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f806 	bl	80016d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40010400 	.word	0x40010400

080016d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e26c      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8087 	beq.w	800181a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800170c:	4b92      	ldr	r3, [pc, #584]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b04      	cmp	r3, #4
 8001716:	d00c      	beq.n	8001732 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001718:	4b8f      	ldr	r3, [pc, #572]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b08      	cmp	r3, #8
 8001722:	d112      	bne.n	800174a <HAL_RCC_OscConfig+0x5e>
 8001724:	4b8c      	ldr	r3, [pc, #560]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001730:	d10b      	bne.n	800174a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001732:	4b89      	ldr	r3, [pc, #548]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d06c      	beq.n	8001818 <HAL_RCC_OscConfig+0x12c>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d168      	bne.n	8001818 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e246      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001752:	d106      	bne.n	8001762 <HAL_RCC_OscConfig+0x76>
 8001754:	4b80      	ldr	r3, [pc, #512]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a7f      	ldr	r2, [pc, #508]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800175a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	e02e      	b.n	80017c0 <HAL_RCC_OscConfig+0xd4>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0x98>
 800176a:	4b7b      	ldr	r3, [pc, #492]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a7a      	ldr	r2, [pc, #488]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	4b78      	ldr	r3, [pc, #480]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a77      	ldr	r2, [pc, #476]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800177c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e01d      	b.n	80017c0 <HAL_RCC_OscConfig+0xd4>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0xbc>
 800178e:	4b72      	ldr	r3, [pc, #456]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a71      	ldr	r2, [pc, #452]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	4b6f      	ldr	r3, [pc, #444]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a6e      	ldr	r2, [pc, #440]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0xd4>
 80017a8:	4b6b      	ldr	r3, [pc, #428]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a6a      	ldr	r2, [pc, #424]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b68      	ldr	r3, [pc, #416]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a67      	ldr	r2, [pc, #412]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d013      	beq.n	80017f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff fc34 	bl	8001034 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff fc30 	bl	8001034 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	; 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e1fa      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b5d      	ldr	r3, [pc, #372]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0xe4>
 80017ee:	e014      	b.n	800181a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fc20 	bl	8001034 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff fc1c 	bl	8001034 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	; 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e1e6      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180a:	4b53      	ldr	r3, [pc, #332]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x10c>
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d063      	beq.n	80018ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001826:	4b4c      	ldr	r3, [pc, #304]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001832:	4b49      	ldr	r3, [pc, #292]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b08      	cmp	r3, #8
 800183c:	d11c      	bne.n	8001878 <HAL_RCC_OscConfig+0x18c>
 800183e:	4b46      	ldr	r3, [pc, #280]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d116      	bne.n	8001878 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184a:	4b43      	ldr	r3, [pc, #268]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <HAL_RCC_OscConfig+0x176>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d001      	beq.n	8001862 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e1ba      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001862:	4b3d      	ldr	r3, [pc, #244]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4939      	ldr	r1, [pc, #228]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001876:	e03a      	b.n	80018ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d020      	beq.n	80018c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001880:	4b36      	ldr	r3, [pc, #216]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7ff fbd5 	bl	8001034 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188e:	f7ff fbd1 	bl	8001034 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e19b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a0:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ac:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4927      	ldr	r1, [pc, #156]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]
 80018c0:	e015      	b.n	80018ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018c2:	4b26      	ldr	r3, [pc, #152]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff fbb4 	bl	8001034 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d0:	f7ff fbb0 	bl	8001034 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e17a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d03a      	beq.n	8001970 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d019      	beq.n	8001936 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7ff fb94 	bl	8001034 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001910:	f7ff fb90 	bl	8001034 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e15a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800192e:	2001      	movs	r0, #1
 8001930:	f000 fada 	bl	8001ee8 <RCC_Delay>
 8001934:	e01c      	b.n	8001970 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193c:	f7ff fb7a 	bl	8001034 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001942:	e00f      	b.n	8001964 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff fb76 	bl	8001034 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d908      	bls.n	8001964 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e140      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	42420000 	.word	0x42420000
 8001960:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001964:	4b9e      	ldr	r3, [pc, #632]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1e9      	bne.n	8001944 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 80a6 	beq.w	8001aca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001982:	4b97      	ldr	r3, [pc, #604]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10d      	bne.n	80019aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	4b94      	ldr	r3, [pc, #592]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a93      	ldr	r2, [pc, #588]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	61d3      	str	r3, [r2, #28]
 800199a:	4b91      	ldr	r3, [pc, #580]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a6:	2301      	movs	r3, #1
 80019a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019aa:	4b8e      	ldr	r3, [pc, #568]	; (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d118      	bne.n	80019e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b6:	4b8b      	ldr	r3, [pc, #556]	; (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a8a      	ldr	r2, [pc, #552]	; (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c2:	f7ff fb37 	bl	8001034 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ca:	f7ff fb33 	bl	8001034 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b64      	cmp	r3, #100	; 0x64
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e0fd      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019dc:	4b81      	ldr	r3, [pc, #516]	; (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x312>
 80019f0:	4b7b      	ldr	r3, [pc, #492]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4a7a      	ldr	r2, [pc, #488]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6213      	str	r3, [r2, #32]
 80019fc:	e02d      	b.n	8001a5a <HAL_RCC_OscConfig+0x36e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x334>
 8001a06:	4b76      	ldr	r3, [pc, #472]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4a75      	ldr	r2, [pc, #468]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	6213      	str	r3, [r2, #32]
 8001a12:	4b73      	ldr	r3, [pc, #460]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4a72      	ldr	r2, [pc, #456]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	f023 0304 	bic.w	r3, r3, #4
 8001a1c:	6213      	str	r3, [r2, #32]
 8001a1e:	e01c      	b.n	8001a5a <HAL_RCC_OscConfig+0x36e>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d10c      	bne.n	8001a42 <HAL_RCC_OscConfig+0x356>
 8001a28:	4b6d      	ldr	r3, [pc, #436]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4a6c      	ldr	r2, [pc, #432]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	6213      	str	r3, [r2, #32]
 8001a34:	4b6a      	ldr	r3, [pc, #424]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4a69      	ldr	r2, [pc, #420]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6213      	str	r3, [r2, #32]
 8001a40:	e00b      	b.n	8001a5a <HAL_RCC_OscConfig+0x36e>
 8001a42:	4b67      	ldr	r3, [pc, #412]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4a66      	ldr	r2, [pc, #408]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	6213      	str	r3, [r2, #32]
 8001a4e:	4b64      	ldr	r3, [pc, #400]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	4a63      	ldr	r2, [pc, #396]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a54:	f023 0304 	bic.w	r3, r3, #4
 8001a58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d015      	beq.n	8001a8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a62:	f7ff fae7 	bl	8001034 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7ff fae3 	bl	8001034 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e0ab      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a80:	4b57      	ldr	r3, [pc, #348]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ee      	beq.n	8001a6a <HAL_RCC_OscConfig+0x37e>
 8001a8c:	e014      	b.n	8001ab8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fad1 	bl	8001034 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a94:	e00a      	b.n	8001aac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7ff facd 	bl	8001034 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e095      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aac:	4b4c      	ldr	r3, [pc, #304]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1ee      	bne.n	8001a96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d105      	bne.n	8001aca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001abe:	4b48      	ldr	r3, [pc, #288]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	4a47      	ldr	r2, [pc, #284]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 8081 	beq.w	8001bd6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad4:	4b42      	ldr	r3, [pc, #264]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d061      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d146      	bne.n	8001b76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae8:	4b3f      	ldr	r3, [pc, #252]	; (8001be8 <HAL_RCC_OscConfig+0x4fc>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7ff faa1 	bl	8001034 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af6:	f7ff fa9d 	bl	8001034 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e067      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b08:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f0      	bne.n	8001af6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b1c:	d108      	bne.n	8001b30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b1e:	4b30      	ldr	r3, [pc, #192]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	492d      	ldr	r1, [pc, #180]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b30:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a19      	ldr	r1, [r3, #32]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	430b      	orrs	r3, r1
 8001b42:	4927      	ldr	r1, [pc, #156]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b48:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <HAL_RCC_OscConfig+0x4fc>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7ff fa71 	bl	8001034 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b56:	f7ff fa6d 	bl	8001034 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e037      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x46a>
 8001b74:	e02f      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b76:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <HAL_RCC_OscConfig+0x4fc>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fa5a 	bl	8001034 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b84:	f7ff fa56 	bl	8001034 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e020      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x498>
 8001ba2:	e018      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e013      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d106      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40007000 	.word	0x40007000
 8001be8:	42420060 	.word	0x42420060

08001bec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0d0      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b6a      	ldr	r3, [pc, #424]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d910      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b67      	ldr	r3, [pc, #412]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 0207 	bic.w	r2, r3, #7
 8001c16:	4965      	ldr	r1, [pc, #404]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b63      	ldr	r3, [pc, #396]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0b8      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d020      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c48:	4b59      	ldr	r3, [pc, #356]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4a58      	ldr	r2, [pc, #352]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c60:	4b53      	ldr	r3, [pc, #332]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	4a52      	ldr	r2, [pc, #328]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6c:	4b50      	ldr	r3, [pc, #320]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	494d      	ldr	r1, [pc, #308]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d040      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b47      	ldr	r3, [pc, #284]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d115      	bne.n	8001cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e07f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001caa:	4b41      	ldr	r3, [pc, #260]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d109      	bne.n	8001cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e073      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cba:	4b3d      	ldr	r3, [pc, #244]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e06b      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cca:	4b39      	ldr	r3, [pc, #228]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f023 0203 	bic.w	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4936      	ldr	r1, [pc, #216]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cdc:	f7ff f9aa 	bl	8001034 <HAL_GetTick>
 8001ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce2:	e00a      	b.n	8001cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce4:	f7ff f9a6 	bl	8001034 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e053      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfa:	4b2d      	ldr	r3, [pc, #180]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 020c 	and.w	r2, r3, #12
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d1eb      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b27      	ldr	r3, [pc, #156]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d210      	bcs.n	8001d3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b24      	ldr	r3, [pc, #144]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 0207 	bic.w	r2, r3, #7
 8001d22:	4922      	ldr	r1, [pc, #136]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e032      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d48:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4916      	ldr	r1, [pc, #88]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	490e      	ldr	r1, [pc, #56]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d7a:	f000 f821 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 8001d7e:	4601      	mov	r1, r0
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d8c:	5cd3      	ldrb	r3, [r2, r3]
 8001d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <HAL_RCC_ClockConfig+0x1cc>)
 8001d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_RCC_ClockConfig+0x1d0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff f908 	bl	8000fb0 <HAL_InitTick>

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40022000 	.word	0x40022000
 8001db0:	40021000 	.word	0x40021000
 8001db4:	08006124 	.word	0x08006124
 8001db8:	20000008 	.word	0x20000008
 8001dbc:	20000000 	.word	0x20000000

08001dc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc0:	b490      	push	{r4, r7}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dc6:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001dc8:	1d3c      	adds	r4, r7, #4
 8001dca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dd0:	4b28      	ldr	r3, [pc, #160]	; (8001e74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dea:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d002      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x40>
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d003      	beq.n	8001e06 <HAL_RCC_GetSysClockFreq+0x46>
 8001dfe:	e02d      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e00:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e02:	623b      	str	r3, [r7, #32]
      break;
 8001e04:	e02d      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	0c9b      	lsrs	r3, r3, #18
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e12:	4413      	add	r3, r2
 8001e14:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e18:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d013      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e24:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	0c5b      	lsrs	r3, r3, #17
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e32:	4413      	add	r3, r2
 8001e34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e38:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	4a0f      	ldr	r2, [pc, #60]	; (8001e7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e3e:	fb02 f203 	mul.w	r2, r2, r3
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4a:	e004      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e50:	fb02 f303 	mul.w	r3, r2, r3
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	623b      	str	r3, [r7, #32]
      break;
 8001e5a:	e002      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e5c:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e5e:	623b      	str	r3, [r7, #32]
      break;
 8001e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e62:	6a3b      	ldr	r3, [r7, #32]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3728      	adds	r7, #40	; 0x28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc90      	pop	{r4, r7}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	080060f0 	.word	0x080060f0
 8001e74:	08006100 	.word	0x08006100
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	007a1200 	.word	0x007a1200
 8001e80:	003d0900 	.word	0x003d0900

08001e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e88:	4b02      	ldr	r3, [pc, #8]	; (8001e94 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr
 8001e94:	20000008 	.word	0x20000008

08001e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e9c:	f7ff fff2 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 8001ea0:	4601      	mov	r1, r0
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	0a1b      	lsrs	r3, r3, #8
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	4a03      	ldr	r2, [pc, #12]	; (8001ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eae:	5cd3      	ldrb	r3, [r2, r3]
 8001eb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	08006134 	.word	0x08006134

08001ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ec4:	f7ff ffde 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 8001ec8:	4601      	mov	r1, r0
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	0adb      	lsrs	r3, r3, #11
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	4a03      	ldr	r2, [pc, #12]	; (8001ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ed6:	5cd3      	ldrb	r3, [r2, r3]
 8001ed8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	08006134 	.word	0x08006134

08001ee8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <RCC_Delay+0x34>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <RCC_Delay+0x38>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	0a5b      	lsrs	r3, r3, #9
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	fb02 f303 	mul.w	r3, r2, r3
 8001f02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f04:	bf00      	nop
  }
  while (Delay --);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1e5a      	subs	r2, r3, #1
 8001f0a:	60fa      	str	r2, [r7, #12]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f9      	bne.n	8001f04 <RCC_Delay+0x1c>
}
 8001f10:	bf00      	nop
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	10624dd3 	.word	0x10624dd3

08001f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e01d      	b.n	8001f72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f001 fede 	bl	8003d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	4619      	mov	r1, r3
 8001f62:	4610      	mov	r0, r2
 8001f64:	f000 f8e4 	bl	8002130 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b085      	sub	sp, #20
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2202      	movs	r2, #2
 8001f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b06      	cmp	r3, #6
 8001f9a:	d007      	beq.n	8001fac <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_TIM_ConfigClockSource+0x18>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e0a6      	b.n	8002126 <HAL_TIM_ConfigClockSource+0x166>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001ff6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ffe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b40      	cmp	r3, #64	; 0x40
 800200e:	d067      	beq.n	80020e0 <HAL_TIM_ConfigClockSource+0x120>
 8002010:	2b40      	cmp	r3, #64	; 0x40
 8002012:	d80b      	bhi.n	800202c <HAL_TIM_ConfigClockSource+0x6c>
 8002014:	2b10      	cmp	r3, #16
 8002016:	d073      	beq.n	8002100 <HAL_TIM_ConfigClockSource+0x140>
 8002018:	2b10      	cmp	r3, #16
 800201a:	d802      	bhi.n	8002022 <HAL_TIM_ConfigClockSource+0x62>
 800201c:	2b00      	cmp	r3, #0
 800201e:	d06f      	beq.n	8002100 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002020:	e078      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002022:	2b20      	cmp	r3, #32
 8002024:	d06c      	beq.n	8002100 <HAL_TIM_ConfigClockSource+0x140>
 8002026:	2b30      	cmp	r3, #48	; 0x30
 8002028:	d06a      	beq.n	8002100 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800202a:	e073      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800202c:	2b70      	cmp	r3, #112	; 0x70
 800202e:	d00d      	beq.n	800204c <HAL_TIM_ConfigClockSource+0x8c>
 8002030:	2b70      	cmp	r3, #112	; 0x70
 8002032:	d804      	bhi.n	800203e <HAL_TIM_ConfigClockSource+0x7e>
 8002034:	2b50      	cmp	r3, #80	; 0x50
 8002036:	d033      	beq.n	80020a0 <HAL_TIM_ConfigClockSource+0xe0>
 8002038:	2b60      	cmp	r3, #96	; 0x60
 800203a:	d041      	beq.n	80020c0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800203c:	e06a      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800203e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002042:	d066      	beq.n	8002112 <HAL_TIM_ConfigClockSource+0x152>
 8002044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002048:	d017      	beq.n	800207a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800204a:	e063      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6899      	ldr	r1, [r3, #8]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f000 f941 	bl	80022e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800206e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	609a      	str	r2, [r3, #8]
      break;
 8002078:	e04c      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	6899      	ldr	r1, [r3, #8]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f000 f92a 	bl	80022e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800209c:	609a      	str	r2, [r3, #8]
      break;
 800209e:	e039      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	461a      	mov	r2, r3
 80020ae:	f000 f8a1 	bl	80021f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2150      	movs	r1, #80	; 0x50
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 f8f8 	bl	80022ae <TIM_ITRx_SetConfig>
      break;
 80020be:	e029      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	461a      	mov	r2, r3
 80020ce:	f000 f8bf 	bl	8002250 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2160      	movs	r1, #96	; 0x60
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 f8e8 	bl	80022ae <TIM_ITRx_SetConfig>
      break;
 80020de:	e019      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	6859      	ldr	r1, [r3, #4]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	461a      	mov	r2, r3
 80020ee:	f000 f881 	bl	80021f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2140      	movs	r1, #64	; 0x40
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 f8d8 	bl	80022ae <TIM_ITRx_SetConfig>
      break;
 80020fe:	e009      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4619      	mov	r1, r3
 800210a:	4610      	mov	r0, r2
 800210c:	f000 f8cf 	bl	80022ae <TIM_ITRx_SetConfig>
      break;
 8002110:	e000      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002112:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a29      	ldr	r2, [pc, #164]	; (80021e8 <TIM_Base_SetConfig+0xb8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d00b      	beq.n	8002160 <TIM_Base_SetConfig+0x30>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214e:	d007      	beq.n	8002160 <TIM_Base_SetConfig+0x30>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a26      	ldr	r2, [pc, #152]	; (80021ec <TIM_Base_SetConfig+0xbc>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d003      	beq.n	8002160 <TIM_Base_SetConfig+0x30>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a25      	ldr	r2, [pc, #148]	; (80021f0 <TIM_Base_SetConfig+0xc0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d108      	bne.n	8002172 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4313      	orrs	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <TIM_Base_SetConfig+0xb8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d00b      	beq.n	8002192 <TIM_Base_SetConfig+0x62>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002180:	d007      	beq.n	8002192 <TIM_Base_SetConfig+0x62>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a19      	ldr	r2, [pc, #100]	; (80021ec <TIM_Base_SetConfig+0xbc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d003      	beq.n	8002192 <TIM_Base_SetConfig+0x62>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <TIM_Base_SetConfig+0xc0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d108      	bne.n	80021a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <TIM_Base_SetConfig+0xb8>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d103      	bne.n	80021d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	615a      	str	r2, [r3, #20]
}
 80021de:	bf00      	nop
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	40012c00 	.word	0x40012c00
 80021ec:	40000400 	.word	0x40000400
 80021f0:	40000800 	.word	0x40000800

080021f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	f023 0201 	bic.w	r2, r3, #1
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800221e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f023 030a 	bic.w	r3, r3, #10
 8002230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	4313      	orrs	r3, r2
 8002238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	621a      	str	r2, [r3, #32]
}
 8002246:	bf00      	nop
 8002248:	371c      	adds	r7, #28
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	f023 0210 	bic.w	r2, r3, #16
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800227a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	031b      	lsls	r3, r3, #12
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	4313      	orrs	r3, r2
 8002284:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800228c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	621a      	str	r2, [r3, #32]
}
 80022a4:	bf00      	nop
 80022a6:	371c      	adds	r7, #28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr

080022ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b085      	sub	sp, #20
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f043 0307 	orr.w	r3, r3, #7
 80022d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	609a      	str	r2, [r3, #8]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b087      	sub	sp, #28
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	021a      	lsls	r2, r3, #8
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	431a      	orrs	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	4313      	orrs	r3, r2
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	4313      	orrs	r3, r2
 800230e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	609a      	str	r2, [r3, #8]
}
 8002316:	bf00      	nop
 8002318:	371c      	adds	r7, #28
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002334:	2302      	movs	r3, #2
 8002336:	e032      	b.n	800239e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002370:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	4313      	orrs	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e03f      	b.n	800243a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d106      	bne.n	80023d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f001 fcba 	bl	8003d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2224      	movs	r2, #36	; 0x24
 80023d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 fb8d 	bl	8002b0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002400:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695a      	ldr	r2, [r3, #20]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002410:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002420:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b088      	sub	sp, #32
 8002446:	af02      	add	r7, sp, #8
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	603b      	str	r3, [r7, #0]
 800244e:	4613      	mov	r3, r2
 8002450:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b20      	cmp	r3, #32
 8002460:	f040 8083 	bne.w	800256a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <HAL_UART_Transmit+0x2e>
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e07b      	b.n	800256c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_UART_Transmit+0x40>
 800247e:	2302      	movs	r3, #2
 8002480:	e074      	b.n	800256c <HAL_UART_Transmit+0x12a>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2221      	movs	r2, #33	; 0x21
 8002494:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002498:	f7fe fdcc 	bl	8001034 <HAL_GetTick>
 800249c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	88fa      	ldrh	r2, [r7, #6]
 80024a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	88fa      	ldrh	r2, [r7, #6]
 80024a8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024aa:	e042      	b.n	8002532 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c2:	d122      	bne.n	800250a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2200      	movs	r2, #0
 80024cc:	2180      	movs	r1, #128	; 0x80
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f9b2 	bl	8002838 <UART_WaitOnFlagUntilTimeout>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e046      	b.n	800256c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024f0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d103      	bne.n	8002502 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	3302      	adds	r3, #2
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	e017      	b.n	8002532 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	3301      	adds	r3, #1
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	e013      	b.n	8002532 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2200      	movs	r2, #0
 8002512:	2180      	movs	r1, #128	; 0x80
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f98f 	bl	8002838 <UART_WaitOnFlagUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e023      	b.n	800256c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	60ba      	str	r2, [r7, #8]
 800252a:	781a      	ldrb	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002536:	b29b      	uxth	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1b7      	bne.n	80024ac <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	2200      	movs	r2, #0
 8002544:	2140      	movs	r1, #64	; 0x40
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 f976 	bl	8002838 <UART_WaitOnFlagUntilTimeout>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e00a      	b.n	800256c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2220      	movs	r2, #32
 800255a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	e000      	b.n	800256c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800256a:	2302      	movs	r3, #2
  }
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	4613      	mov	r3, r2
 8002580:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b20      	cmp	r3, #32
 800258c:	d140      	bne.n	8002610 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <HAL_UART_Receive_IT+0x26>
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e039      	b.n	8002612 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_UART_Receive_IT+0x38>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e032      	b.n	8002612 <HAL_UART_Receive_IT+0x9e>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	88fa      	ldrh	r2, [r7, #6]
 80025be:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	88fa      	ldrh	r2, [r7, #6]
 80025c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2222      	movs	r2, #34	; 0x22
 80025d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ea:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695a      	ldr	r2, [r3, #20]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0220 	orr.w	r2, r2, #32
 800260a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	e000      	b.n	8002612 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002610:	2302      	movs	r3, #2
  }
}
 8002612:	4618      	mov	r0, r3
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800263c:	2300      	movs	r3, #0
 800263e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10d      	bne.n	800266e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_UART_IRQHandler+0x52>
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f9ce 	bl	8002a08 <UART_Receive_IT>
      return;
 800266c:	e0cc      	b.n	8002808 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80ab 	beq.w	80027cc <HAL_UART_IRQHandler+0x1b0>
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	d105      	bne.n	800268c <HAL_UART_IRQHandler+0x70>
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 80a0 	beq.w	80027cc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_UART_IRQHandler+0x90>
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a4:	f043 0201 	orr.w	r2, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00a      	beq.n	80026cc <HAL_UART_IRQHandler+0xb0>
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c4:	f043 0202 	orr.w	r2, r3, #2
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <HAL_UART_IRQHandler+0xd0>
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e4:	f043 0204 	orr.w	r2, r3, #4
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00a      	beq.n	800270c <HAL_UART_IRQHandler+0xf0>
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002704:	f043 0208 	orr.w	r2, r3, #8
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002710:	2b00      	cmp	r3, #0
 8002712:	d078      	beq.n	8002806 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <HAL_UART_IRQHandler+0x112>
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	f003 0320 	and.w	r3, r3, #32
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f96d 	bl	8002a08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf14      	ite	ne
 800273c:	2301      	movne	r3, #1
 800273e:	2300      	moveq	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d102      	bne.n	8002756 <HAL_UART_IRQHandler+0x13a>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d031      	beq.n	80027ba <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f8b8 	bl	80028cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	d023      	beq.n	80027b2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002778:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277e:	2b00      	cmp	r3, #0
 8002780:	d013      	beq.n	80027aa <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002786:	4a22      	ldr	r2, [pc, #136]	; (8002810 <HAL_UART_IRQHandler+0x1f4>)
 8002788:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe fd8a 	bl	80012a8 <HAL_DMA_Abort_IT>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d016      	beq.n	80027c8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027a4:	4610      	mov	r0, r2
 80027a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a8:	e00e      	b.n	80027c8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f83b 	bl	8002826 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b0:	e00a      	b.n	80027c8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f837 	bl	8002826 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b8:	e006      	b.n	80027c8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f833 	bl	8002826 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80027c6:	e01e      	b.n	8002806 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c8:	bf00      	nop
    return;
 80027ca:	e01c      	b.n	8002806 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d008      	beq.n	80027e8 <HAL_UART_IRQHandler+0x1cc>
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f8a4 	bl	800292e <UART_Transmit_IT>
    return;
 80027e6:	e00f      	b.n	8002808 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_UART_IRQHandler+0x1ec>
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f8eb 	bl	80029d8 <UART_EndTransmit_IT>
    return;
 8002802:	bf00      	nop
 8002804:	e000      	b.n	8002808 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002806:	bf00      	nop
  }
}
 8002808:	3720      	adds	r7, #32
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	08002907 	.word	0x08002907

08002814 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	4613      	mov	r3, r2
 8002846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002848:	e02c      	b.n	80028a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002850:	d028      	beq.n	80028a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d007      	beq.n	8002868 <UART_WaitOnFlagUntilTimeout+0x30>
 8002858:	f7fe fbec 	bl	8001034 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	429a      	cmp	r2, r3
 8002866:	d21d      	bcs.n	80028a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002876:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e00f      	b.n	80028c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	4013      	ands	r3, r2
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	bf0c      	ite	eq
 80028b4:	2301      	moveq	r3, #1
 80028b6:	2300      	movne	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d0c3      	beq.n	800284a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80028e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0201 	bic.w	r2, r2, #1
 80028f2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f7ff ff80 	bl	8002826 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800292e:	b480      	push	{r7}
 8002930:	b085      	sub	sp, #20
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b21      	cmp	r3, #33	; 0x21
 8002940:	d144      	bne.n	80029cc <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800294a:	d11a      	bne.n	8002982 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002960:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d105      	bne.n	8002976 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	1c9a      	adds	r2, r3, #2
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	621a      	str	r2, [r3, #32]
 8002974:	e00e      	b.n	8002994 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	621a      	str	r2, [r3, #32]
 8002980:	e008      	b.n	8002994 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	1c59      	adds	r1, r3, #1
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6211      	str	r1, [r2, #32]
 800298c:	781a      	ldrb	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29b      	uxth	r3, r3
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	4619      	mov	r1, r3
 80029a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10f      	bne.n	80029c8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	e000      	b.n	80029ce <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80029cc:	2302      	movs	r3, #2
  }
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff ff0b 	bl	8002814 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b22      	cmp	r3, #34	; 0x22
 8002a1a:	d171      	bne.n	8002b00 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a24:	d123      	bne.n	8002a6e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10e      	bne.n	8002a52 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4a:	1c9a      	adds	r2, r3, #2
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a50:	e029      	b.n	8002aa6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	629a      	str	r2, [r3, #40]	; 0x28
 8002a6c:	e01b      	b.n	8002aa6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10a      	bne.n	8002a8c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6858      	ldr	r0, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	1c59      	adds	r1, r3, #1
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6291      	str	r1, [r2, #40]	; 0x28
 8002a86:	b2c2      	uxtb	r2, r0
 8002a88:	701a      	strb	r2, [r3, #0]
 8002a8a:	e00c      	b.n	8002aa6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	1c58      	adds	r0, r3, #1
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	6288      	str	r0, [r1, #40]	; 0x28
 8002a9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d120      	bne.n	8002afc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0220 	bic.w	r2, r2, #32
 8002ac8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ad8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695a      	ldr	r2, [r3, #20]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0201 	bic.w	r2, r2, #1
 8002ae8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2220      	movs	r2, #32
 8002aee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fd8a 	bl	800360c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e002      	b.n	8002b02 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e000      	b.n	8002b02 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002b00:	2302      	movs	r3, #2
  }
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b46:	f023 030c 	bic.w	r3, r3, #12
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6812      	ldr	r2, [r2, #0]
 8002b4e:	68f9      	ldr	r1, [r7, #12]
 8002b50:	430b      	orrs	r3, r1
 8002b52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a52      	ldr	r2, [pc, #328]	; (8002cb8 <UART_SetConfig+0x1ac>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d14e      	bne.n	8002c12 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b74:	f7ff f9a4 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 8002b78:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	009a      	lsls	r2, r3, #2
 8002b84:	441a      	add	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b90:	4a4a      	ldr	r2, [pc, #296]	; (8002cbc <UART_SetConfig+0x1b0>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	0119      	lsls	r1, r3, #4
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009a      	lsls	r2, r3, #2
 8002ba4:	441a      	add	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bb0:	4b42      	ldr	r3, [pc, #264]	; (8002cbc <UART_SetConfig+0x1b0>)
 8002bb2:	fba3 0302 	umull	r0, r3, r3, r2
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	2064      	movs	r0, #100	; 0x64
 8002bba:	fb00 f303 	mul.w	r3, r0, r3
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	3332      	adds	r3, #50	; 0x32
 8002bc4:	4a3d      	ldr	r2, [pc, #244]	; (8002cbc <UART_SetConfig+0x1b0>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bd0:	4419      	add	r1, r3
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	009a      	lsls	r2, r3, #2
 8002bdc:	441a      	add	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002be8:	4b34      	ldr	r3, [pc, #208]	; (8002cbc <UART_SetConfig+0x1b0>)
 8002bea:	fba3 0302 	umull	r0, r3, r3, r2
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	2064      	movs	r0, #100	; 0x64
 8002bf2:	fb00 f303 	mul.w	r3, r0, r3
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	3332      	adds	r3, #50	; 0x32
 8002bfc:	4a2f      	ldr	r2, [pc, #188]	; (8002cbc <UART_SetConfig+0x1b0>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	f003 020f 	and.w	r2, r3, #15
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	440a      	add	r2, r1
 8002c0e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002c10:	e04d      	b.n	8002cae <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c12:	f7ff f941 	bl	8001e98 <HAL_RCC_GetPCLK1Freq>
 8002c16:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	009a      	lsls	r2, r3, #2
 8002c22:	441a      	add	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2e:	4a23      	ldr	r2, [pc, #140]	; (8002cbc <UART_SetConfig+0x1b0>)
 8002c30:	fba2 2303 	umull	r2, r3, r2, r3
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	0119      	lsls	r1, r3, #4
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	009a      	lsls	r2, r3, #2
 8002c42:	441a      	add	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c4e:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <UART_SetConfig+0x1b0>)
 8002c50:	fba3 0302 	umull	r0, r3, r3, r2
 8002c54:	095b      	lsrs	r3, r3, #5
 8002c56:	2064      	movs	r0, #100	; 0x64
 8002c58:	fb00 f303 	mul.w	r3, r0, r3
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	3332      	adds	r3, #50	; 0x32
 8002c62:	4a16      	ldr	r2, [pc, #88]	; (8002cbc <UART_SetConfig+0x1b0>)
 8002c64:	fba2 2303 	umull	r2, r3, r2, r3
 8002c68:	095b      	lsrs	r3, r3, #5
 8002c6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c6e:	4419      	add	r1, r3
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	009a      	lsls	r2, r3, #2
 8002c7a:	441a      	add	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c86:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <UART_SetConfig+0x1b0>)
 8002c88:	fba3 0302 	umull	r0, r3, r3, r2
 8002c8c:	095b      	lsrs	r3, r3, #5
 8002c8e:	2064      	movs	r0, #100	; 0x64
 8002c90:	fb00 f303 	mul.w	r3, r0, r3
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	3332      	adds	r3, #50	; 0x32
 8002c9a:	4a08      	ldr	r2, [pc, #32]	; (8002cbc <UART_SetConfig+0x1b0>)
 8002c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca0:	095b      	lsrs	r3, r3, #5
 8002ca2:	f003 020f 	and.w	r2, r3, #15
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	440a      	add	r2, r1
 8002cac:	609a      	str	r2, [r3, #8]
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40013800 	.word	0x40013800
 8002cbc:	51eb851f 	.word	0x51eb851f

08002cc0 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 8002cc4:	4806      	ldr	r0, [pc, #24]	; (8002ce0 <DS18B20_StartAll+0x20>)
 8002cc6:	f000 fdd4 	bl	8003872 <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 8002cca:	21cc      	movs	r1, #204	; 0xcc
 8002ccc:	4804      	ldr	r0, [pc, #16]	; (8002ce0 <DS18B20_StartAll+0x20>)
 8002cce:	f000 fe53 	bl	8003978 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 8002cd2:	2144      	movs	r1, #68	; 0x44
 8002cd4:	4802      	ldr	r0, [pc, #8]	; (8002ce0 <DS18B20_StartAll+0x20>)
 8002cd6:	f000 fe4f 	bl	8003978 <OneWire_WriteByte>
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20000250 	.word	0x20000250

08002ce4 <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 8002ce4:	b590      	push	{r4, r7, lr}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	6039      	str	r1, [r7, #0]
 8002cee:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount) // If read sensor is not availible
 8002cf0:	4b4f      	ldr	r3, [pc, #316]	; (8002e30 <DS18B20_Read+0x14c>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	79fa      	ldrb	r2, [r7, #7]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d301      	bcc.n	8002cfe <DS18B20_Read+0x1a>
		return 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e094      	b.n	8002e28 <DS18B20_Read+0x144>

	uint16_t temperature;
	uint8_t resolution;
	float result;
	uint8_t i = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	74fb      	strb	r3, [r7, #19]
	uint8_t crc;

#endif

	
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	4a4b      	ldr	r2, [pc, #300]	; (8002e34 <DS18B20_Read+0x150>)
 8002d08:	4413      	add	r3, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f93e 	bl	8002f8c <DS18B20_Is>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <DS18B20_Read+0x36>
		return 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e086      	b.n	8002e28 <DS18B20_Read+0x144>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 8002d1a:	4847      	ldr	r0, [pc, #284]	; (8002e38 <DS18B20_Read+0x154>)
 8002d1c:	f000 fe02 	bl	8003924 <OneWire_ReadBit>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <DS18B20_Read+0x46>
		return 0; // Busy bus - conversion is not finished
 8002d26:	2300      	movs	r3, #0
 8002d28:	e07e      	b.n	8002e28 <DS18B20_Read+0x144>

	OneWire_Reset(&OneWire); // Reset the bus
 8002d2a:	4843      	ldr	r0, [pc, #268]	; (8002e38 <DS18B20_Read+0x154>)
 8002d2c:	f000 fda1 	bl	8003872 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	4a3f      	ldr	r2, [pc, #252]	; (8002e34 <DS18B20_Read+0x150>)
 8002d36:	4413      	add	r3, r2
 8002d38:	4619      	mov	r1, r3
 8002d3a:	483f      	ldr	r0, [pc, #252]	; (8002e38 <DS18B20_Read+0x154>)
 8002d3c:	f000 ff4f 	bl	8003bde <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8002d40:	21be      	movs	r1, #190	; 0xbe
 8002d42:	483d      	ldr	r0, [pc, #244]	; (8002e38 <DS18B20_Read+0x154>)
 8002d44:	f000 fe18 	bl	8003978 <OneWire_WriteByte>
	
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8002d48:	2300      	movs	r3, #0
 8002d4a:	74fb      	strb	r3, [r7, #19]
 8002d4c:	e00d      	b.n	8002d6a <DS18B20_Read+0x86>
		data[i] = OneWire_ReadByte(&OneWire);
 8002d4e:	7cfc      	ldrb	r4, [r7, #19]
 8002d50:	4839      	ldr	r0, [pc, #228]	; (8002e38 <DS18B20_Read+0x154>)
 8002d52:	f000 fe2e 	bl	80039b2 <OneWire_ReadByte>
 8002d56:	4603      	mov	r3, r0
 8002d58:	461a      	mov	r2, r3
 8002d5a:	f107 0318 	add.w	r3, r7, #24
 8002d5e:	4423      	add	r3, r4
 8002d60:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	3301      	adds	r3, #1
 8002d68:	74fb      	strb	r3, [r7, #19]
 8002d6a:	7cfb      	ldrb	r3, [r7, #19]
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d9ee      	bls.n	8002d4e <DS18B20_Read+0x6a>
	crc = OneWire_CRC8(data, 8); // CRC calculation

	if (crc != data[8])
		return 0; // CRC invalid
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 8002d70:	7a3b      	ldrb	r3, [r7, #8]
 8002d72:	b21a      	sxth	r2, r3
 8002d74:	7a7b      	ldrb	r3, [r7, #9]
 8002d76:	021b      	lsls	r3, r3, #8
 8002d78:	b21b      	sxth	r3, r3
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	b21b      	sxth	r3, r3
 8002d7e:	823b      	strh	r3, [r7, #16]

	OneWire_Reset(&OneWire); // Reset the bus
 8002d80:	482d      	ldr	r0, [pc, #180]	; (8002e38 <DS18B20_Read+0x154>)
 8002d82:	f000 fd76 	bl	8003872 <OneWire_Reset>
	
	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 8002d86:	7b3b      	ldrb	r3, [r7, #12]
 8002d88:	115b      	asrs	r3, r3, #5
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	3309      	adds	r3, #9
 8002d94:	73fb      	strb	r3, [r7, #15]

	switch (resolution) // Chceck the correct value dur to resolution
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
 8002d98:	3b09      	subs	r3, #9
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d83e      	bhi.n	8002e1c <DS18B20_Read+0x138>
 8002d9e:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <DS18B20_Read+0xc0>)
 8002da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da4:	08002db5 	.word	0x08002db5
 8002da8:	08002dcf 	.word	0x08002dcf
 8002dac:	08002de9 	.word	0x08002de9
 8002db0:	08002e03 	.word	0x08002e03
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 8002db4:	8a3b      	ldrh	r3, [r7, #16]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd ff40 	bl	8000c3c <__aeabi_i2f>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fd ff8e 	bl	8000ce4 <__aeabi_fmul>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	617b      	str	r3, [r7, #20]
		break;
 8002dcc:	e028      	b.n	8002e20 <DS18B20_Read+0x13c>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 8002dce:	8a3b      	ldrh	r3, [r7, #16]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fd ff33 	bl	8000c3c <__aeabi_i2f>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fd ff81 	bl	8000ce4 <__aeabi_fmul>
 8002de2:	4603      	mov	r3, r0
 8002de4:	617b      	str	r3, [r7, #20]
		 break;
 8002de6:	e01b      	b.n	8002e20 <DS18B20_Read+0x13c>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 8002de8:	8a3b      	ldrh	r3, [r7, #16]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd ff26 	bl	8000c3c <__aeabi_i2f>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fd ff74 	bl	8000ce4 <__aeabi_fmul>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	617b      	str	r3, [r7, #20]
		break;
 8002e00:	e00e      	b.n	8002e20 <DS18B20_Read+0x13c>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 8002e02:	8a3b      	ldrh	r3, [r7, #16]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fd ff19 	bl	8000c3c <__aeabi_i2f>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fd ff67 	bl	8000ce4 <__aeabi_fmul>
 8002e16:	4603      	mov	r3, r0
 8002e18:	617b      	str	r3, [r7, #20]
		 break;
 8002e1a:	e001      	b.n	8002e20 <DS18B20_Read+0x13c>
		default: 
			result = 0xFF;
 8002e1c:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <DS18B20_Read+0x158>)
 8002e1e:	617b      	str	r3, [r7, #20]
	}
	
	*destination = result;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	601a      	str	r2, [r3, #0]
	
	return 1; //temperature valid
 8002e26:	2301      	movs	r3, #1
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	371c      	adds	r7, #28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd90      	pop	{r4, r7, pc}
 8002e30:	200001f8 	.word	0x200001f8
 8002e34:	20000210 	.word	0x20000210
 8002e38:	20000250 	.word	0x20000250
 8002e3c:	437f0000 	.word	0x437f0000

08002e40 <DS18B20_SetResolution>:
	
	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	460a      	mov	r2, r1
 8002e4a:	71fb      	strb	r3, [r7, #7]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 8002e50:	4b4b      	ldr	r3, [pc, #300]	; (8002f80 <DS18B20_SetResolution+0x140>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	79fa      	ldrb	r2, [r7, #7]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d301      	bcc.n	8002e5e <DS18B20_SetResolution+0x1e>
		return 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e08c      	b.n	8002f78 <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	4a48      	ldr	r2, [pc, #288]	; (8002f84 <DS18B20_SetResolution+0x144>)
 8002e64:	4413      	add	r3, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 f890 	bl	8002f8c <DS18B20_Is>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <DS18B20_SetResolution+0x36>
		return 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e080      	b.n	8002f78 <DS18B20_SetResolution+0x138>
	
	OneWire_Reset(&OneWire); // Reset the bus
 8002e76:	4844      	ldr	r0, [pc, #272]	; (8002f88 <DS18B20_SetResolution+0x148>)
 8002e78:	f000 fcfb 	bl	8003872 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	4a40      	ldr	r2, [pc, #256]	; (8002f84 <DS18B20_SetResolution+0x144>)
 8002e82:	4413      	add	r3, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	4840      	ldr	r0, [pc, #256]	; (8002f88 <DS18B20_SetResolution+0x148>)
 8002e88:	f000 fea9 	bl	8003bde <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8002e8c:	21be      	movs	r1, #190	; 0xbe
 8002e8e:	483e      	ldr	r0, [pc, #248]	; (8002f88 <DS18B20_SetResolution+0x148>)
 8002e90:	f000 fd72 	bl	8003978 <OneWire_WriteByte>
	
	OneWire_ReadByte(&OneWire);
 8002e94:	483c      	ldr	r0, [pc, #240]	; (8002f88 <DS18B20_SetResolution+0x148>)
 8002e96:	f000 fd8c 	bl	80039b2 <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 8002e9a:	483b      	ldr	r0, [pc, #236]	; (8002f88 <DS18B20_SetResolution+0x148>)
 8002e9c:	f000 fd89 	bl	80039b2 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 8002ea0:	4839      	ldr	r0, [pc, #228]	; (8002f88 <DS18B20_SetResolution+0x148>)
 8002ea2:	f000 fd86 	bl	80039b2 <OneWire_ReadByte>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 8002eaa:	4837      	ldr	r0, [pc, #220]	; (8002f88 <DS18B20_SetResolution+0x148>)
 8002eac:	f000 fd81 	bl	80039b2 <OneWire_ReadByte>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 8002eb4:	4834      	ldr	r0, [pc, #208]	; (8002f88 <DS18B20_SetResolution+0x148>)
 8002eb6:	f000 fd7c 	bl	80039b2 <OneWire_ReadByte>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	73fb      	strb	r3, [r7, #15]
	
	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 8002ebe:	79bb      	ldrb	r3, [r7, #6]
 8002ec0:	2b09      	cmp	r3, #9
 8002ec2:	d108      	bne.n	8002ed6 <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eca:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	f023 0320 	bic.w	r3, r3, #32
 8002ed2:	73fb      	strb	r3, [r7, #15]
 8002ed4:	e022      	b.n	8002f1c <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 8002ed6:	79bb      	ldrb	r3, [r7, #6]
 8002ed8:	2b0a      	cmp	r3, #10
 8002eda:	d108      	bne.n	8002eee <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ee2:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	f043 0320 	orr.w	r3, r3, #32
 8002eea:	73fb      	strb	r3, [r7, #15]
 8002eec:	e016      	b.n	8002f1c <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8002eee:	79bb      	ldrb	r3, [r7, #6]
 8002ef0:	2b0b      	cmp	r3, #11
 8002ef2:	d108      	bne.n	8002f06 <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002efa:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	f023 0320 	bic.w	r3, r3, #32
 8002f02:	73fb      	strb	r3, [r7, #15]
 8002f04:	e00a      	b.n	8002f1c <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8002f06:	79bb      	ldrb	r3, [r7, #6]
 8002f08:	2b0c      	cmp	r3, #12
 8002f0a:	d107      	bne.n	8002f1c <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f12:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	f043 0320 	orr.w	r3, r3, #32
 8002f1a:	73fb      	strb	r3, [r7, #15]
	}
	
	OneWire_Reset(&OneWire); // Reset the bus
 8002f1c:	481a      	ldr	r0, [pc, #104]	; (8002f88 <DS18B20_SetResolution+0x148>)
 8002f1e:	f000 fca8 	bl	8003872 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	4a17      	ldr	r2, [pc, #92]	; (8002f84 <DS18B20_SetResolution+0x144>)
 8002f28:	4413      	add	r3, r2
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4816      	ldr	r0, [pc, #88]	; (8002f88 <DS18B20_SetResolution+0x148>)
 8002f2e:	f000 fe56 	bl	8003bde <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 8002f32:	214e      	movs	r1, #78	; 0x4e
 8002f34:	4814      	ldr	r0, [pc, #80]	; (8002f88 <DS18B20_SetResolution+0x148>)
 8002f36:	f000 fd1f 	bl	8003978 <OneWire_WriteByte>
	
	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 8002f3a:	7bbb      	ldrb	r3, [r7, #14]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4812      	ldr	r0, [pc, #72]	; (8002f88 <DS18B20_SetResolution+0x148>)
 8002f40:	f000 fd1a 	bl	8003978 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 8002f44:	7b7b      	ldrb	r3, [r7, #13]
 8002f46:	4619      	mov	r1, r3
 8002f48:	480f      	ldr	r0, [pc, #60]	; (8002f88 <DS18B20_SetResolution+0x148>)
 8002f4a:	f000 fd15 	bl	8003978 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	4619      	mov	r1, r3
 8002f52:	480d      	ldr	r0, [pc, #52]	; (8002f88 <DS18B20_SetResolution+0x148>)
 8002f54:	f000 fd10 	bl	8003978 <OneWire_WriteByte>
	
	OneWire_Reset(&OneWire); // Reset the bus
 8002f58:	480b      	ldr	r0, [pc, #44]	; (8002f88 <DS18B20_SetResolution+0x148>)
 8002f5a:	f000 fc8a 	bl	8003872 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	4a08      	ldr	r2, [pc, #32]	; (8002f84 <DS18B20_SetResolution+0x144>)
 8002f64:	4413      	add	r3, r2
 8002f66:	4619      	mov	r1, r3
 8002f68:	4807      	ldr	r0, [pc, #28]	; (8002f88 <DS18B20_SetResolution+0x148>)
 8002f6a:	f000 fe38 	bl	8003bde <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 8002f6e:	2148      	movs	r1, #72	; 0x48
 8002f70:	4805      	ldr	r0, [pc, #20]	; (8002f88 <DS18B20_SetResolution+0x148>)
 8002f72:	f000 fd01 	bl	8003978 <OneWire_WriteByte>
	
	return 1;
 8002f76:	2301      	movs	r3, #1
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	200001f8 	.word	0x200001f8
 8002f84:	20000210 	.word	0x20000210
 8002f88:	20000250 	.word	0x20000250

08002f8c <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b28      	cmp	r3, #40	; 0x28
 8002f9a:	d101      	bne.n	8002fa0 <DS18B20_Is+0x14>
		return 1;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <DS18B20_Is+0x16>
	return 0;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 8002fb0:	4802      	ldr	r0, [pc, #8]	; (8002fbc <DS18B20_AllDone+0x10>)
 8002fb2:	f000 fcb7 	bl	8003924 <OneWire_ReadBit>
 8002fb6:	4603      	mov	r3, r0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20000250 	.word	0x20000250

08002fc0 <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 8002fc0:	b590      	push	{r4, r7, lr}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 8002fc6:	f7ff fff1 	bl	8002fac <DS18B20_AllDone>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d02e      	beq.n	800302e <DS18B20_ReadAll+0x6e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	71fb      	strb	r3, [r7, #7]
 8002fd4:	e026      	b.n	8003024 <DS18B20_ReadAll+0x64>
		{
			ds18b20[i].ValidDataFlag = 0;
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
 8002fd8:	4a17      	ldr	r2, [pc, #92]	; (8003038 <DS18B20_ReadAll+0x78>)
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	4413      	add	r3, r2
 8002fde:	330c      	adds	r3, #12
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	4a13      	ldr	r2, [pc, #76]	; (8003038 <DS18B20_ReadAll+0x78>)
 8002fea:	4413      	add	r3, r2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff ffcd 	bl	8002f8c <DS18B20_Is>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d012      	beq.n	800301e <DS18B20_ReadAll+0x5e>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	3308      	adds	r3, #8
 8002ffe:	4a0e      	ldr	r2, [pc, #56]	; (8003038 <DS18B20_ReadAll+0x78>)
 8003000:	441a      	add	r2, r3
 8003002:	79fc      	ldrb	r4, [r7, #7]
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff fe6b 	bl	8002ce4 <DS18B20_Read>
 800300e:	4603      	mov	r3, r0
 8003010:	4619      	mov	r1, r3
 8003012:	4a09      	ldr	r2, [pc, #36]	; (8003038 <DS18B20_ReadAll+0x78>)
 8003014:	0123      	lsls	r3, r4, #4
 8003016:	4413      	add	r3, r2
 8003018:	330c      	adds	r3, #12
 800301a:	460a      	mov	r2, r1
 800301c:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	3301      	adds	r3, #1
 8003022:	71fb      	strb	r3, [r7, #7]
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <DS18B20_ReadAll+0x7c>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	79fa      	ldrb	r2, [r7, #7]
 800302a:	429a      	cmp	r2, r3
 800302c:	d3d3      	bcc.n	8002fd6 <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	bd90      	pop	{r4, r7, pc}
 8003036:	bf00      	nop
 8003038:	20000210 	.word	0x20000210
 800303c:	200001f8 	.word	0x200001f8

08003040 <DS18B20_GetROM>:

void DS18B20_GetROM(uint8_t number, uint8_t* ROM)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	6039      	str	r1, [r7, #0]
 800304a:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount)
 800304c:	4b10      	ldr	r3, [pc, #64]	; (8003090 <DS18B20_GetROM+0x50>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	79fa      	ldrb	r2, [r7, #7]
 8003052:	429a      	cmp	r2, r3
 8003054:	d302      	bcc.n	800305c <DS18B20_GetROM+0x1c>
		number = TempSensorCount;
 8003056:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <DS18B20_GetROM+0x50>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	71fb      	strb	r3, [r7, #7]

	uint8_t i;

	for(i = 0; i < 8; i++)
 800305c:	2300      	movs	r3, #0
 800305e:	73fb      	strb	r3, [r7, #15]
 8003060:	e00d      	b.n	800307e <DS18B20_GetROM+0x3e>
		ROM[i] = ds18b20[number].Address[i];
 8003062:	79f9      	ldrb	r1, [r7, #7]
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	6838      	ldr	r0, [r7, #0]
 800306a:	4403      	add	r3, r0
 800306c:	4809      	ldr	r0, [pc, #36]	; (8003094 <DS18B20_GetROM+0x54>)
 800306e:	0109      	lsls	r1, r1, #4
 8003070:	4401      	add	r1, r0
 8003072:	440a      	add	r2, r1
 8003074:	7812      	ldrb	r2, [r2, #0]
 8003076:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 8; i++)
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	3301      	adds	r3, #1
 800307c:	73fb      	strb	r3, [r7, #15]
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	2b07      	cmp	r3, #7
 8003082:	d9ee      	bls.n	8003062 <DS18B20_GetROM+0x22>
}
 8003084:	bf00      	nop
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	200001f8 	.word	0x200001f8
 8003094:	20000210 	.word	0x20000210

08003098 <DS18B20_Quantity>:
	for(i = 0; i < 8; i++)
		ds18b20[number].Address[i] = ROM[i]; // Write ROM into sensor's structure
}

uint8_t DS18B20_Quantity(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
	return TempSensorCount;
 800309c:	4b02      	ldr	r3, [pc, #8]	; (80030a8 <DS18B20_Quantity+0x10>)
 800309e:	781b      	ldrb	r3, [r3, #0]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr
 80030a8:	200001f8 	.word	0x200001f8

080030ac <DS18B20_GetTemperature>:

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	6039      	str	r1, [r7, #0]
 80030b6:	71fb      	strb	r3, [r7, #7]
	if(!ds18b20[number].ValidDataFlag)
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	4a0b      	ldr	r2, [pc, #44]	; (80030e8 <DS18B20_GetTemperature+0x3c>)
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	4413      	add	r3, r2
 80030c0:	330c      	adds	r3, #12
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <DS18B20_GetTemperature+0x20>
		return 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	e008      	b.n	80030de <DS18B20_GetTemperature+0x32>

	*destination = ds18b20[number].Temperature;
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	4a06      	ldr	r2, [pc, #24]	; (80030e8 <DS18B20_GetTemperature+0x3c>)
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	4413      	add	r3, r2
 80030d4:	3308      	adds	r3, #8
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	601a      	str	r2, [r3, #0]
	return 1;
 80030dc:	2301      	movs	r3, #1

}
 80030de:	4618      	mov	r0, r3
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr
 80030e8:	20000210 	.word	0x20000210

080030ec <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 80030f6:	2300      	movs	r3, #0
 80030f8:	73fb      	strb	r3, [r7, #15]
 80030fa:	2300      	movs	r3, #0
 80030fc:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, DS18B20_GPIO_Port, DS18B20_Pin); // Init OneWire bus
 80030fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003102:	491f      	ldr	r1, [pc, #124]	; (8003180 <DS18B20_Init+0x94>)
 8003104:	481f      	ldr	r0, [pc, #124]	; (8003184 <DS18B20_Init+0x98>)
 8003106:	f000 fda3 	bl	8003c50 <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 800310a:	481e      	ldr	r0, [pc, #120]	; (8003184 <DS18B20_Init+0x98>)
 800310c:	f000 fd4a 	bl	8003ba4 <OneWire_First>
 8003110:	4603      	mov	r3, r0
 8003112:	73fb      	strb	r3, [r7, #15]
	while(next)
 8003114:	e018      	b.n	8003148 <DS18B20_Init+0x5c>
	{
		TempSensorCount++;
 8003116:	4b1c      	ldr	r3, [pc, #112]	; (8003188 <DS18B20_Init+0x9c>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	3301      	adds	r3, #1
 800311c:	b2da      	uxtb	r2, r3
 800311e:	4b1a      	ldr	r3, [pc, #104]	; (8003188 <DS18B20_Init+0x9c>)
 8003120:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 8003122:	7bbb      	ldrb	r3, [r7, #14]
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	73ba      	strb	r2, [r7, #14]
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	4a18      	ldr	r2, [pc, #96]	; (800318c <DS18B20_Init+0xa0>)
 800312c:	4413      	add	r3, r2
 800312e:	4619      	mov	r1, r3
 8003130:	4814      	ldr	r0, [pc, #80]	; (8003184 <DS18B20_Init+0x98>)
 8003132:	f000 fd72 	bl	8003c1a <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 8003136:	4813      	ldr	r0, [pc, #76]	; (8003184 <DS18B20_Init+0x98>)
 8003138:	f000 fd44 	bl	8003bc4 <OneWire_Next>
 800313c:	4603      	mov	r3, r0
 800313e:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <DS18B20_Init+0x9c>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d803      	bhi.n	8003150 <DS18B20_Init+0x64>
	while(next)
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1e3      	bne.n	8003116 <DS18B20_Init+0x2a>
 800314e:	e000      	b.n	8003152 <DS18B20_Init+0x66>
			break;
 8003150:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 8003152:	2300      	movs	r3, #0
 8003154:	737b      	strb	r3, [r7, #13]
 8003156:	e00a      	b.n	800316e <DS18B20_Init+0x82>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 8003158:	79fa      	ldrb	r2, [r7, #7]
 800315a:	7b7b      	ldrb	r3, [r7, #13]
 800315c:	4611      	mov	r1, r2
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff fe6e 	bl	8002e40 <DS18B20_SetResolution>

		DS18B20_StartAll(); // Start conversion on all sensors
 8003164:	f7ff fdac 	bl	8002cc0 <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 8003168:	7b7b      	ldrb	r3, [r7, #13]
 800316a:	3301      	adds	r3, #1
 800316c:	737b      	strb	r3, [r7, #13]
 800316e:	7b7a      	ldrb	r2, [r7, #13]
 8003170:	7bbb      	ldrb	r3, [r7, #14]
 8003172:	429a      	cmp	r2, r3
 8003174:	d3f0      	bcc.n	8003158 <DS18B20_Init+0x6c>
	}
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40011000 	.word	0x40011000
 8003184:	20000250 	.word	0x20000250
 8003188:	200001f8 	.word	0x200001f8
 800318c:	20000210 	.word	0x20000210

08003190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003190:	b5b0      	push	{r4, r5, r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003196:	f7fd fef5 	bl	8000f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800319a:	f000 f8ab 	bl	80032f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800319e:	f000 f98d 	bl	80034bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80031a2:	f000 f937 	bl	8003414 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80031a6:	f000 f95f 	bl	8003468 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80031aa:	f000 f8e5 	bl	8003378 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 80031ae:	4846      	ldr	r0, [pc, #280]	; (80032c8 <main+0x138>)
 80031b0:	f7fe fee3 	bl	8001f7a <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart3, &Received, 1);
 80031b4:	2201      	movs	r2, #1
 80031b6:	4945      	ldr	r1, [pc, #276]	; (80032cc <main+0x13c>)
 80031b8:	4845      	ldr	r0, [pc, #276]	; (80032d0 <main+0x140>)
 80031ba:	f7ff f9db 	bl	8002574 <HAL_UART_Receive_IT>
  DS18B20_Init(DS18B20_Resolution_12bits);
 80031be:	200c      	movs	r0, #12
 80031c0:	f7ff ff94 	bl	80030ec <DS18B20_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sensor_time = hcsr04_read();
 80031c4:	f000 fab2 	bl	800372c <hcsr04_read>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4b42      	ldr	r3, [pc, #264]	; (80032d4 <main+0x144>)
 80031cc:	601a      	str	r2, [r3, #0]
	  distance  = sensor_time * .034/2;
 80031ce:	4b41      	ldr	r3, [pc, #260]	; (80032d4 <main+0x144>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd f906 	bl	80003e4 <__aeabi_ui2d>
 80031d8:	a339      	add	r3, pc, #228	; (adr r3, 80032c0 <main+0x130>)
 80031da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031de:	f7fd f97b 	bl	80004d8 <__aeabi_dmul>
 80031e2:	4603      	mov	r3, r0
 80031e4:	460c      	mov	r4, r1
 80031e6:	4618      	mov	r0, r3
 80031e8:	4621      	mov	r1, r4
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031f2:	f7fd fa9b 	bl	800072c <__aeabi_ddiv>
 80031f6:	4603      	mov	r3, r0
 80031f8:	460c      	mov	r4, r1
 80031fa:	4618      	mov	r0, r3
 80031fc:	4621      	mov	r1, r4
 80031fe:	f7fd fc43 	bl	8000a88 <__aeabi_d2uiz>
 8003202:	4602      	mov	r2, r0
 8003204:	4b34      	ldr	r3, [pc, #208]	; (80032d8 <main+0x148>)
 8003206:	601a      	str	r2, [r3, #0]

	  DS18B20_ReadAll();
 8003208:	f7ff feda 	bl	8002fc0 <DS18B20_ReadAll>
      DS18B20_StartAll();
 800320c:	f7ff fd58 	bl	8002cc0 <DS18B20_StartAll>

      uint8_t ROM_tmp[1];
      uint8_t i;
      for(i = 0; i < DS18B20_Quantity(); i++)
 8003210:	2300      	movs	r3, #0
 8003212:	71fb      	strb	r3, [r7, #7]
 8003214:	e02b      	b.n	800326e <main+0xde>
      {
    	  if(DS18B20_GetTemperature(i, &temperature))
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	4930      	ldr	r1, [pc, #192]	; (80032dc <main+0x14c>)
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff ff46 	bl	80030ac <DS18B20_GetTemperature>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d020      	beq.n	8003268 <main+0xd8>
    	  {
    		  DS18B20_GetROM(i, ROM_tmp);
 8003226:	1d3a      	adds	r2, r7, #4
 8003228:	79fb      	ldrb	r3, [r7, #7]
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff ff07 	bl	8003040 <DS18B20_GetROM>
    		  memset(message, 0, sizeof(message));
 8003232:	2240      	movs	r2, #64	; 0x40
 8003234:	2100      	movs	r1, #0
 8003236:	482a      	ldr	r0, [pc, #168]	; (80032e0 <main+0x150>)
 8003238:	f000 ff06 	bl	8004048 <memset>
    		  sprintf(message, "Distance: %u, Temp: %f\n\r", distance, temperature);
 800323c:	4b26      	ldr	r3, [pc, #152]	; (80032d8 <main+0x148>)
 800323e:	681d      	ldr	r5, [r3, #0]
 8003240:	4b26      	ldr	r3, [pc, #152]	; (80032dc <main+0x14c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f7fd f8ef 	bl	8000428 <__aeabi_f2d>
 800324a:	4603      	mov	r3, r0
 800324c:	460c      	mov	r4, r1
 800324e:	e9cd 3400 	strd	r3, r4, [sp]
 8003252:	462a      	mov	r2, r5
 8003254:	4923      	ldr	r1, [pc, #140]	; (80032e4 <main+0x154>)
 8003256:	4822      	ldr	r0, [pc, #136]	; (80032e0 <main+0x150>)
 8003258:	f001 fb4e 	bl	80048f8 <siprintf>
    		  HAL_UART_Transmit(&huart2, (uint8_t*)message, sizeof(message), 100);
 800325c:	2364      	movs	r3, #100	; 0x64
 800325e:	2240      	movs	r2, #64	; 0x40
 8003260:	491f      	ldr	r1, [pc, #124]	; (80032e0 <main+0x150>)
 8003262:	4821      	ldr	r0, [pc, #132]	; (80032e8 <main+0x158>)
 8003264:	f7ff f8ed 	bl	8002442 <HAL_UART_Transmit>
      for(i = 0; i < DS18B20_Quantity(); i++)
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	3301      	adds	r3, #1
 800326c:	71fb      	strb	r3, [r7, #7]
 800326e:	f7ff ff13 	bl	8003098 <DS18B20_Quantity>
 8003272:	4603      	mov	r3, r0
 8003274:	461a      	mov	r2, r3
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	4293      	cmp	r3, r2
 800327a:	d3cc      	bcc.n	8003216 <main+0x86>
			}
		}
      HAL_UART_Transmit(&huart2, (uint8_t*)"\n\r", sizeof("\n\r"), 100);
 800327c:	2364      	movs	r3, #100	; 0x64
 800327e:	2203      	movs	r2, #3
 8003280:	491a      	ldr	r1, [pc, #104]	; (80032ec <main+0x15c>)
 8003282:	4819      	ldr	r0, [pc, #100]	; (80032e8 <main+0x158>)
 8003284:	f7ff f8dd 	bl	8002442 <HAL_UART_Transmit>
      HAL_Delay(1000);
 8003288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800328c:	f7fd fedc 	bl	8001048 <HAL_Delay>

      if(MOTOR_OPEN_COMMAND == motor_command && distance > 20)
 8003290:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <main+0x160>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b61      	cmp	r3, #97	; 0x61
 8003296:	d105      	bne.n	80032a4 <main+0x114>
 8003298:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <main+0x148>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b14      	cmp	r3, #20
 800329e:	d901      	bls.n	80032a4 <main+0x114>
      {
    	  motor_hold();
 80032a0:	f000 fa1c 	bl	80036dc <motor_hold>
      }

      if(MOTOR_CLOSE_COMMAND == motor_command && distance < 5)
 80032a4:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <main+0x160>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b62      	cmp	r3, #98	; 0x62
 80032aa:	d18b      	bne.n	80031c4 <main+0x34>
 80032ac:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <main+0x148>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d887      	bhi.n	80031c4 <main+0x34>
      {
    	  motor_hold();
 80032b4:	f000 fa12 	bl	80036dc <motor_hold>
  {
 80032b8:	e784      	b.n	80031c4 <main+0x34>
 80032ba:	bf00      	nop
 80032bc:	f3af 8000 	nop.w
 80032c0:	b020c49c 	.word	0xb020c49c
 80032c4:	3fa16872 	.word	0x3fa16872
 80032c8:	200002f4 	.word	0x200002f4
 80032cc:	20000264 	.word	0x20000264
 80032d0:	2000026c 	.word	0x2000026c
 80032d4:	20000268 	.word	0x20000268
 80032d8:	200002b0 	.word	0x200002b0
 80032dc:	200002ac 	.word	0x200002ac
 80032e0:	200002b4 	.word	0x200002b4
 80032e4:	08006104 	.word	0x08006104
 80032e8:	20000334 	.word	0x20000334
 80032ec:	08006120 	.word	0x08006120
 80032f0:	20000374 	.word	0x20000374

080032f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b090      	sub	sp, #64	; 0x40
 80032f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032fa:	f107 0318 	add.w	r3, r7, #24
 80032fe:	2228      	movs	r2, #40	; 0x28
 8003300:	2100      	movs	r1, #0
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fea0 	bl	8004048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003308:	1d3b      	adds	r3, r7, #4
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	605a      	str	r2, [r3, #4]
 8003310:	609a      	str	r2, [r3, #8]
 8003312:	60da      	str	r2, [r3, #12]
 8003314:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003316:	2302      	movs	r3, #2
 8003318:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800331a:	2301      	movs	r3, #1
 800331c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800331e:	2310      	movs	r3, #16
 8003320:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003322:	2302      	movs	r3, #2
 8003324:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8003326:	2300      	movs	r3, #0
 8003328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800332a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800332e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003330:	f107 0318 	add.w	r3, r7, #24
 8003334:	4618      	mov	r0, r3
 8003336:	f7fe f9d9 	bl	80016ec <HAL_RCC_OscConfig>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8003340:	f000 fa2a 	bl	8003798 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003344:	230f      	movs	r3, #15
 8003346:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003348:	2302      	movs	r3, #2
 800334a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003354:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	2102      	movs	r1, #2
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe fc44 	bl	8001bec <HAL_RCC_ClockConfig>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800336a:	f000 fa15 	bl	8003798 <Error_Handler>
  }
}
 800336e:	bf00      	nop
 8003370:	3740      	adds	r7, #64	; 0x40
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800337e:	f107 0308 	add.w	r3, r7, #8
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	605a      	str	r2, [r3, #4]
 8003388:	609a      	str	r2, [r3, #8]
 800338a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800338c:	463b      	mov	r3, r7
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003394:	4b1d      	ldr	r3, [pc, #116]	; (800340c <MX_TIM3_Init+0x94>)
 8003396:	4a1e      	ldr	r2, [pc, #120]	; (8003410 <MX_TIM3_Init+0x98>)
 8003398:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800339a:	4b1c      	ldr	r3, [pc, #112]	; (800340c <MX_TIM3_Init+0x94>)
 800339c:	223f      	movs	r2, #63	; 0x3f
 800339e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033a0:	4b1a      	ldr	r3, [pc, #104]	; (800340c <MX_TIM3_Init+0x94>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80033a6:	4b19      	ldr	r3, [pc, #100]	; (800340c <MX_TIM3_Init+0x94>)
 80033a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ae:	4b17      	ldr	r3, [pc, #92]	; (800340c <MX_TIM3_Init+0x94>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033b4:	4b15      	ldr	r3, [pc, #84]	; (800340c <MX_TIM3_Init+0x94>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80033ba:	4814      	ldr	r0, [pc, #80]	; (800340c <MX_TIM3_Init+0x94>)
 80033bc:	f7fe fdb2 	bl	8001f24 <HAL_TIM_Base_Init>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80033c6:	f000 f9e7 	bl	8003798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80033d0:	f107 0308 	add.w	r3, r7, #8
 80033d4:	4619      	mov	r1, r3
 80033d6:	480d      	ldr	r0, [pc, #52]	; (800340c <MX_TIM3_Init+0x94>)
 80033d8:	f7fe fdf2 	bl	8001fc0 <HAL_TIM_ConfigClockSource>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80033e2:	f000 f9d9 	bl	8003798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033e6:	2300      	movs	r3, #0
 80033e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033ee:	463b      	mov	r3, r7
 80033f0:	4619      	mov	r1, r3
 80033f2:	4806      	ldr	r0, [pc, #24]	; (800340c <MX_TIM3_Init+0x94>)
 80033f4:	f7fe ff94 	bl	8002320 <HAL_TIMEx_MasterConfigSynchronization>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80033fe:	f000 f9cb 	bl	8003798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003402:	bf00      	nop
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	200002f4 	.word	0x200002f4
 8003410:	40000400 	.word	0x40000400

08003414 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003418:	4b11      	ldr	r3, [pc, #68]	; (8003460 <MX_USART2_UART_Init+0x4c>)
 800341a:	4a12      	ldr	r2, [pc, #72]	; (8003464 <MX_USART2_UART_Init+0x50>)
 800341c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800341e:	4b10      	ldr	r3, [pc, #64]	; (8003460 <MX_USART2_UART_Init+0x4c>)
 8003420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003426:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <MX_USART2_UART_Init+0x4c>)
 8003428:	2200      	movs	r2, #0
 800342a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800342c:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <MX_USART2_UART_Init+0x4c>)
 800342e:	2200      	movs	r2, #0
 8003430:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003432:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <MX_USART2_UART_Init+0x4c>)
 8003434:	2200      	movs	r2, #0
 8003436:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003438:	4b09      	ldr	r3, [pc, #36]	; (8003460 <MX_USART2_UART_Init+0x4c>)
 800343a:	220c      	movs	r2, #12
 800343c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800343e:	4b08      	ldr	r3, [pc, #32]	; (8003460 <MX_USART2_UART_Init+0x4c>)
 8003440:	2200      	movs	r2, #0
 8003442:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003444:	4b06      	ldr	r3, [pc, #24]	; (8003460 <MX_USART2_UART_Init+0x4c>)
 8003446:	2200      	movs	r2, #0
 8003448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800344a:	4805      	ldr	r0, [pc, #20]	; (8003460 <MX_USART2_UART_Init+0x4c>)
 800344c:	f7fe ffac 	bl	80023a8 <HAL_UART_Init>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003456:	f000 f99f 	bl	8003798 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000334 	.word	0x20000334
 8003464:	40004400 	.word	0x40004400

08003468 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800346c:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <MX_USART3_UART_Init+0x4c>)
 800346e:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <MX_USART3_UART_Init+0x50>)
 8003470:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <MX_USART3_UART_Init+0x4c>)
 8003474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003478:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800347a:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <MX_USART3_UART_Init+0x4c>)
 800347c:	2200      	movs	r2, #0
 800347e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <MX_USART3_UART_Init+0x4c>)
 8003482:	2200      	movs	r2, #0
 8003484:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003486:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <MX_USART3_UART_Init+0x4c>)
 8003488:	2200      	movs	r2, #0
 800348a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800348c:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <MX_USART3_UART_Init+0x4c>)
 800348e:	220c      	movs	r2, #12
 8003490:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003492:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <MX_USART3_UART_Init+0x4c>)
 8003494:	2200      	movs	r2, #0
 8003496:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <MX_USART3_UART_Init+0x4c>)
 800349a:	2200      	movs	r2, #0
 800349c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800349e:	4805      	ldr	r0, [pc, #20]	; (80034b4 <MX_USART3_UART_Init+0x4c>)
 80034a0:	f7fe ff82 	bl	80023a8 <HAL_UART_Init>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80034aa:	f000 f975 	bl	8003798 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	2000026c 	.word	0x2000026c
 80034b8:	40004800 	.word	0x40004800

080034bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b088      	sub	sp, #32
 80034c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c2:	f107 0310 	add.w	r3, r7, #16
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	605a      	str	r2, [r3, #4]
 80034cc:	609a      	str	r2, [r3, #8]
 80034ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034d0:	4b49      	ldr	r3, [pc, #292]	; (80035f8 <MX_GPIO_Init+0x13c>)
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	4a48      	ldr	r2, [pc, #288]	; (80035f8 <MX_GPIO_Init+0x13c>)
 80034d6:	f043 0310 	orr.w	r3, r3, #16
 80034da:	6193      	str	r3, [r2, #24]
 80034dc:	4b46      	ldr	r3, [pc, #280]	; (80035f8 <MX_GPIO_Init+0x13c>)
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034e8:	4b43      	ldr	r3, [pc, #268]	; (80035f8 <MX_GPIO_Init+0x13c>)
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	4a42      	ldr	r2, [pc, #264]	; (80035f8 <MX_GPIO_Init+0x13c>)
 80034ee:	f043 0320 	orr.w	r3, r3, #32
 80034f2:	6193      	str	r3, [r2, #24]
 80034f4:	4b40      	ldr	r3, [pc, #256]	; (80035f8 <MX_GPIO_Init+0x13c>)
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003500:	4b3d      	ldr	r3, [pc, #244]	; (80035f8 <MX_GPIO_Init+0x13c>)
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	4a3c      	ldr	r2, [pc, #240]	; (80035f8 <MX_GPIO_Init+0x13c>)
 8003506:	f043 0304 	orr.w	r3, r3, #4
 800350a:	6193      	str	r3, [r2, #24]
 800350c:	4b3a      	ldr	r3, [pc, #232]	; (80035f8 <MX_GPIO_Init+0x13c>)
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	607b      	str	r3, [r7, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003518:	4b37      	ldr	r3, [pc, #220]	; (80035f8 <MX_GPIO_Init+0x13c>)
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	4a36      	ldr	r2, [pc, #216]	; (80035f8 <MX_GPIO_Init+0x13c>)
 800351e:	f043 0308 	orr.w	r3, r3, #8
 8003522:	6193      	str	r3, [r2, #24]
 8003524:	4b34      	ldr	r3, [pc, #208]	; (80035f8 <MX_GPIO_Init+0x13c>)
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	603b      	str	r3, [r7, #0]
 800352e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003530:	2200      	movs	r2, #0
 8003532:	2120      	movs	r1, #32
 8003534:	4831      	ldr	r0, [pc, #196]	; (80035fc <MX_GPIO_Init+0x140>)
 8003536:	f7fe f89e 	bl	8001676 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, US_TRIGGER_Pin|DS18B20_Pin, GPIO_PIN_RESET);
 800353a:	2200      	movs	r2, #0
 800353c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003540:	482f      	ldr	r0, [pc, #188]	; (8003600 <MX_GPIO_Init+0x144>)
 8003542:	f7fe f898 	bl	8001676 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_A_Pin|MOTOR_B_Pin, GPIO_PIN_RESET);
 8003546:	2200      	movs	r2, #0
 8003548:	f44f 7140 	mov.w	r1, #768	; 0x300
 800354c:	482d      	ldr	r0, [pc, #180]	; (8003604 <MX_GPIO_Init+0x148>)
 800354e:	f7fe f892 	bl	8001676 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003552:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003558:	4b2b      	ldr	r3, [pc, #172]	; (8003608 <MX_GPIO_Init+0x14c>)
 800355a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355c:	2300      	movs	r3, #0
 800355e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003560:	f107 0310 	add.w	r3, r7, #16
 8003564:	4619      	mov	r1, r3
 8003566:	4826      	ldr	r0, [pc, #152]	; (8003600 <MX_GPIO_Init+0x144>)
 8003568:	f7fd ff14 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800356c:	2320      	movs	r3, #32
 800356e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003570:	2301      	movs	r3, #1
 8003572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	2300      	movs	r3, #0
 8003576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003578:	2302      	movs	r3, #2
 800357a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800357c:	f107 0310 	add.w	r3, r7, #16
 8003580:	4619      	mov	r1, r3
 8003582:	481e      	ldr	r0, [pc, #120]	; (80035fc <MX_GPIO_Init+0x140>)
 8003584:	f7fd ff06 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pins : US_TRIGGER_Pin DS18B20_Pin */
  GPIO_InitStruct.Pin = US_TRIGGER_Pin|DS18B20_Pin;
 8003588:	f44f 7310 	mov.w	r3, #576	; 0x240
 800358c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800358e:	2301      	movs	r3, #1
 8003590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003592:	2300      	movs	r3, #0
 8003594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003596:	2302      	movs	r3, #2
 8003598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800359a:	f107 0310 	add.w	r3, r7, #16
 800359e:	4619      	mov	r1, r3
 80035a0:	4817      	ldr	r0, [pc, #92]	; (8003600 <MX_GPIO_Init+0x144>)
 80035a2:	f7fd fef7 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pin : US_ECHO_Pin */
  GPIO_InitStruct.Pin = US_ECHO_Pin;
 80035a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(US_ECHO_GPIO_Port, &GPIO_InitStruct);
 80035b4:	f107 0310 	add.w	r3, r7, #16
 80035b8:	4619      	mov	r1, r3
 80035ba:	4811      	ldr	r0, [pc, #68]	; (8003600 <MX_GPIO_Init+0x144>)
 80035bc:	f7fd feea 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_A_Pin MOTOR_B_Pin */
  GPIO_InitStruct.Pin = MOTOR_A_Pin|MOTOR_B_Pin;
 80035c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035c6:	2301      	movs	r3, #1
 80035c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ce:	2302      	movs	r3, #2
 80035d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d2:	f107 0310 	add.w	r3, r7, #16
 80035d6:	4619      	mov	r1, r3
 80035d8:	480a      	ldr	r0, [pc, #40]	; (8003604 <MX_GPIO_Init+0x148>)
 80035da:	f7fd fedb 	bl	8001394 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80035de:	2200      	movs	r2, #0
 80035e0:	2100      	movs	r1, #0
 80035e2:	2028      	movs	r0, #40	; 0x28
 80035e4:	f7fd fe29 	bl	800123a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80035e8:	2028      	movs	r0, #40	; 0x28
 80035ea:	f7fd fe42 	bl	8001272 <HAL_NVIC_EnableIRQ>

}
 80035ee:	bf00      	nop
 80035f0:	3720      	adds	r7, #32
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40010800 	.word	0x40010800
 8003600:	40011000 	.word	0x40011000
 8003604:	40010c00 	.word	0x40010c00
 8003608:	10110000 	.word	0x10110000

0800360c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
// uint16_t size = 0; // Rozmiar wysylanej wiadomosci

// size = sprintf(Data, "Odebrana wiadomosc: %c\n\r",Received);
//
// HAL_UART_Transmit_IT(&huart3, Data, size); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
 if (MOTOR_OPEN_COMMAND == Received && distance < 20)
 8003614:	4b1b      	ldr	r3, [pc, #108]	; (8003684 <HAL_UART_RxCpltCallback+0x78>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b61      	cmp	r3, #97	; 0x61
 800361c:	d10b      	bne.n	8003636 <HAL_UART_RxCpltCallback+0x2a>
 800361e:	4b1a      	ldr	r3, [pc, #104]	; (8003688 <HAL_UART_RxCpltCallback+0x7c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b13      	cmp	r3, #19
 8003624:	d807      	bhi.n	8003636 <HAL_UART_RxCpltCallback+0x2a>
 {
	 motor_open();
 8003626:	f000 f835 	bl	8003694 <motor_open>
	 motor_command = Received;
 800362a:	4b16      	ldr	r3, [pc, #88]	; (8003684 <HAL_UART_RxCpltCallback+0x78>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	b2da      	uxtb	r2, r3
 8003630:	4b16      	ldr	r3, [pc, #88]	; (800368c <HAL_UART_RxCpltCallback+0x80>)
 8003632:	701a      	strb	r2, [r3, #0]
 8003634:	e01c      	b.n	8003670 <HAL_UART_RxCpltCallback+0x64>
 }
 else if (MOTOR_CLOSE_COMMAND == Received && distance > 5)
 8003636:	4b13      	ldr	r3, [pc, #76]	; (8003684 <HAL_UART_RxCpltCallback+0x78>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b62      	cmp	r3, #98	; 0x62
 800363e:	d10b      	bne.n	8003658 <HAL_UART_RxCpltCallback+0x4c>
 8003640:	4b11      	ldr	r3, [pc, #68]	; (8003688 <HAL_UART_RxCpltCallback+0x7c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b05      	cmp	r3, #5
 8003646:	d907      	bls.n	8003658 <HAL_UART_RxCpltCallback+0x4c>
 {
	 motor_close();
 8003648:	f000 f836 	bl	80036b8 <motor_close>
	 motor_command = Received;
 800364c:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <HAL_UART_RxCpltCallback+0x78>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	b2da      	uxtb	r2, r3
 8003652:	4b0e      	ldr	r3, [pc, #56]	; (800368c <HAL_UART_RxCpltCallback+0x80>)
 8003654:	701a      	strb	r2, [r3, #0]
 8003656:	e00b      	b.n	8003670 <HAL_UART_RxCpltCallback+0x64>
 }
 else if (MOTOR_HOLD_COMMAND == Received)
 8003658:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <HAL_UART_RxCpltCallback+0x78>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b63      	cmp	r3, #99	; 0x63
 8003660:	d106      	bne.n	8003670 <HAL_UART_RxCpltCallback+0x64>
 {
	 motor_hold();
 8003662:	f000 f83b 	bl	80036dc <motor_hold>
	 motor_command = Received;
 8003666:	4b07      	ldr	r3, [pc, #28]	; (8003684 <HAL_UART_RxCpltCallback+0x78>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	b2da      	uxtb	r2, r3
 800366c:	4b07      	ldr	r3, [pc, #28]	; (800368c <HAL_UART_RxCpltCallback+0x80>)
 800366e:	701a      	strb	r2, [r3, #0]
 }

 HAL_UART_Receive_IT(&huart3, &Received, 1); // Ponowne włączenie nasłuchiwania
 8003670:	2201      	movs	r2, #1
 8003672:	4904      	ldr	r1, [pc, #16]	; (8003684 <HAL_UART_RxCpltCallback+0x78>)
 8003674:	4806      	ldr	r0, [pc, #24]	; (8003690 <HAL_UART_RxCpltCallback+0x84>)
 8003676:	f7fe ff7d 	bl	8002574 <HAL_UART_Receive_IT>
}
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	20000264 	.word	0x20000264
 8003688:	200002b0 	.word	0x200002b0
 800368c:	20000374 	.word	0x20000374
 8003690:	2000026c 	.word	0x2000026c

08003694 <motor_open>:

void motor_open(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(MOTOR_A_GPIO_Port, MOTOR_A_Pin, GPIO_PIN_RESET);
 8003698:	2200      	movs	r2, #0
 800369a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800369e:	4805      	ldr	r0, [pc, #20]	; (80036b4 <motor_open+0x20>)
 80036a0:	f7fd ffe9 	bl	8001676 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MOTOR_B_GPIO_Port, MOTOR_B_Pin, GPIO_PIN_SET);
 80036a4:	2201      	movs	r2, #1
 80036a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036aa:	4802      	ldr	r0, [pc, #8]	; (80036b4 <motor_open+0x20>)
 80036ac:	f7fd ffe3 	bl	8001676 <HAL_GPIO_WritePin>
}
 80036b0:	bf00      	nop
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40010c00 	.word	0x40010c00

080036b8 <motor_close>:

void motor_close(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(MOTOR_A_GPIO_Port, MOTOR_A_Pin, GPIO_PIN_SET);
 80036bc:	2201      	movs	r2, #1
 80036be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036c2:	4805      	ldr	r0, [pc, #20]	; (80036d8 <motor_close+0x20>)
 80036c4:	f7fd ffd7 	bl	8001676 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MOTOR_B_GPIO_Port, MOTOR_B_Pin, GPIO_PIN_RESET);
 80036c8:	2200      	movs	r2, #0
 80036ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036ce:	4802      	ldr	r0, [pc, #8]	; (80036d8 <motor_close+0x20>)
 80036d0:	f7fd ffd1 	bl	8001676 <HAL_GPIO_WritePin>
}
 80036d4:	bf00      	nop
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40010c00 	.word	0x40010c00

080036dc <motor_hold>:

void motor_hold(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(MOTOR_A_GPIO_Port, MOTOR_A_Pin, GPIO_PIN_RESET);
 80036e0:	2200      	movs	r2, #0
 80036e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036e6:	4805      	ldr	r0, [pc, #20]	; (80036fc <motor_hold+0x20>)
 80036e8:	f7fd ffc5 	bl	8001676 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MOTOR_B_GPIO_Port, MOTOR_B_Pin, GPIO_PIN_RESET);
 80036ec:	2200      	movs	r2, #0
 80036ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036f2:	4802      	ldr	r0, [pc, #8]	; (80036fc <motor_hold+0x20>)
 80036f4:	f7fd ffbf 	bl	8001676 <HAL_GPIO_WritePin>
}
 80036f8:	bf00      	nop
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40010c00 	.word	0x40010c00

08003700 <delay>:

void delay (uint32_t us)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003708:	4b07      	ldr	r3, [pc, #28]	; (8003728 <delay+0x28>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2200      	movs	r2, #0
 800370e:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim3))<us);
 8003710:	bf00      	nop
 8003712:	4b05      	ldr	r3, [pc, #20]	; (8003728 <delay+0x28>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	429a      	cmp	r2, r3
 800371c:	d8f9      	bhi.n	8003712 <delay+0x12>
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr
 8003728:	200002f4 	.word	0x200002f4

0800372c <hcsr04_read>:

uint32_t hcsr04_read(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(US_TRIGGER_GPIO_Port, US_TRIGGER_Pin, GPIO_PIN_RESET);  // pull the TRIG pin LOW
 8003730:	2200      	movs	r2, #0
 8003732:	2140      	movs	r1, #64	; 0x40
 8003734:	4816      	ldr	r0, [pc, #88]	; (8003790 <hcsr04_read+0x64>)
 8003736:	f7fd ff9e 	bl	8001676 <HAL_GPIO_WritePin>
	delay(2);  // wait for 2 us
 800373a:	2002      	movs	r0, #2
 800373c:	f7ff ffe0 	bl	8003700 <delay>


	HAL_GPIO_WritePin(US_TRIGGER_GPIO_Port, US_TRIGGER_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8003740:	2201      	movs	r2, #1
 8003742:	2140      	movs	r1, #64	; 0x40
 8003744:	4812      	ldr	r0, [pc, #72]	; (8003790 <hcsr04_read+0x64>)
 8003746:	f7fd ff96 	bl	8001676 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 800374a:	200a      	movs	r0, #10
 800374c:	f7ff ffd8 	bl	8003700 <delay>
	HAL_GPIO_WritePin(US_TRIGGER_GPIO_Port, US_TRIGGER_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8003750:	2200      	movs	r2, #0
 8003752:	2140      	movs	r1, #64	; 0x40
 8003754:	480e      	ldr	r0, [pc, #56]	; (8003790 <hcsr04_read+0x64>)
 8003756:	f7fd ff8e 	bl	8001676 <HAL_GPIO_WritePin>

	// read the time for which the pin is high
	while (!(HAL_GPIO_ReadPin(US_ECHO_GPIO_Port, US_ECHO_Pin)));  // wait for the ECHO pin to go high
 800375a:	bf00      	nop
 800375c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003760:	480b      	ldr	r0, [pc, #44]	; (8003790 <hcsr04_read+0x64>)
 8003762:	f7fd ff71 	bl	8001648 <HAL_GPIO_ReadPin>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f7      	beq.n	800375c <hcsr04_read+0x30>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800376c:	4b09      	ldr	r3, [pc, #36]	; (8003794 <hcsr04_read+0x68>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2200      	movs	r2, #0
 8003772:	625a      	str	r2, [r3, #36]	; 0x24
	while (HAL_GPIO_ReadPin(US_ECHO_GPIO_Port, US_ECHO_Pin)); // wait for the ECHO pin to go high
 8003774:	bf00      	nop
 8003776:	f44f 7180 	mov.w	r1, #256	; 0x100
 800377a:	4805      	ldr	r0, [pc, #20]	; (8003790 <hcsr04_read+0x64>)
 800377c:	f7fd ff64 	bl	8001648 <HAL_GPIO_ReadPin>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f7      	bne.n	8003776 <hcsr04_read+0x4a>
	return __HAL_TIM_GET_COUNTER(&htim3);
 8003786:	4b03      	ldr	r3, [pc, #12]	; (8003794 <hcsr04_read+0x68>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800378c:	4618      	mov	r0, r3
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40011000 	.word	0x40011000
 8003794:	200002f4 	.word	0x200002f4

08003798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr

080037a4 <OneWire_Delay>:
#include "main.h"
//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 80037ae:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <OneWire_Delay+0x2c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2200      	movs	r2, #0
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 80037b6:	bf00      	nop
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <OneWire_Delay+0x2c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d9f9      	bls.n	80037b8 <OneWire_Delay+0x14>
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	200002f4 	.word	0x200002f4

080037d4 <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 80037e0:	2300      	movs	r3, #0
 80037e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 80037e4:	2301      	movs	r3, #1
 80037e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	889b      	ldrh	r3, [r3, #4]
 80037ec:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f107 0208 	add.w	r2, r7, #8
 80037f6:	4611      	mov	r1, r2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fd fdcb 	bl	8001394 <HAL_GPIO_Init>
}	
 80037fe:	bf00      	nop
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b086      	sub	sp, #24
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 800380e:	2311      	movs	r3, #17
 8003810:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8003812:	2300      	movs	r3, #0
 8003814:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8003816:	2301      	movs	r3, #1
 8003818:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	889b      	ldrh	r3, [r3, #4]
 800381e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f107 0208 	add.w	r2, r7, #8
 8003828:	4611      	mov	r1, r2
 800382a:	4618      	mov	r0, r3
 800382c:	f7fd fdb2 	bl	8001394 <HAL_GPIO_Init>
}
 8003830:	bf00      	nop
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	889b      	ldrh	r3, [r3, #4]
 8003844:	041a      	lsls	r2, r3, #16
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	611a      	str	r2, [r3, #16]
}	
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr

08003856 <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	889a      	ldrh	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	611a      	str	r2, [r3, #16]
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr

08003872 <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	OneWire_OutputLow(onewire);  // Write bus output low
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff ffdc 	bl	8003838 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff ffc0 	bl	8003806 <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 8003886:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800388a:	f7ff ff8b 	bl	80037a4 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7ff ffa0 	bl	80037d4 <OneWire_BusInputDirection>
	OneWire_Delay(70);
 8003894:	2046      	movs	r0, #70	; 0x46
 8003896:	f7ff ff85 	bl	80037a4 <OneWire_Delay>
	
	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	889b      	ldrh	r3, [r3, #4]
 80038a2:	4619      	mov	r1, r3
 80038a4:	4610      	mov	r0, r2
 80038a6:	f7fd fecf 	bl	8001648 <HAL_GPIO_ReadPin>
 80038aa:	4603      	mov	r3, r0
 80038ac:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 80038ae:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80038b2:	f7ff ff77 	bl	80037a4 <OneWire_Delay>

	return i;
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 80038cc:	78fb      	ldrb	r3, [r7, #3]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d012      	beq.n	80038f8 <OneWire_WriteBit+0x38>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff ffb0 	bl	8003838 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff ff94 	bl	8003806 <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 80038de:	2006      	movs	r0, #6
 80038e0:	f7ff ff60 	bl	80037a4 <OneWire_Delay>
		
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff ff75 	bl	80037d4 <OneWire_BusInputDirection>
		
		OneWire_Delay(64);
 80038ea:	2040      	movs	r0, #64	; 0x40
 80038ec:	f7ff ff5a 	bl	80037a4 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); //Release bus
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff ff6f 	bl	80037d4 <OneWire_BusInputDirection>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		
		OneWire_Delay(10);
		OneWire_BusInputDirection(onewire); // Release bus
	}
}
 80038f6:	e011      	b.n	800391c <OneWire_WriteBit+0x5c>
		OneWire_OutputLow(onewire); // Set the bus low
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff ff9d 	bl	8003838 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff ff81 	bl	8003806 <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 8003904:	203c      	movs	r0, #60	; 0x3c
 8003906:	f7ff ff4d 	bl	80037a4 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff ff62 	bl	80037d4 <OneWire_BusInputDirection>
		OneWire_Delay(10);
 8003910:	200a      	movs	r0, #10
 8003912:	f7ff ff47 	bl	80037a4 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff ff5c 	bl	80037d4 <OneWire_BusInputDirection>
}
 800391c:	bf00      	nop
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 800392c:	2300      	movs	r3, #0
 800392e:	73fb      	strb	r3, [r7, #15]
	
	OneWire_OutputLow(onewire); // Set low to initiate reading
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff ff81 	bl	8003838 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff ff65 	bl	8003806 <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 800393c:	2002      	movs	r0, #2
 800393e:	f7ff ff31 	bl	80037a4 <OneWire_Delay>
	
	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff ff46 	bl	80037d4 <OneWire_BusInputDirection>
	OneWire_Delay(10);
 8003948:	200a      	movs	r0, #10
 800394a:	f7ff ff2b 	bl	80037a4 <OneWire_Delay>
	
	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	889b      	ldrh	r3, [r3, #4]
 8003956:	4619      	mov	r1, r3
 8003958:	4610      	mov	r0, r2
 800395a:	f7fd fe75 	bl	8001648 <HAL_GPIO_ReadPin>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <OneWire_ReadBit+0x44>
		bit = 1;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
	
	OneWire_Delay(50); // Wait for end of read cycle
 8003968:	2032      	movs	r0, #50	; 0x32
 800396a:	f7ff ff1b 	bl	80037a4 <OneWire_Delay>

	return bit;
 800396e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8003984:	2308      	movs	r3, #8
 8003986:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	b2db      	uxtb	r3, r3
 8003990:	4619      	mov	r1, r3
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff ff94 	bl	80038c0 <OneWire_WriteBit>
		byte >>= 1;
 8003998:	78fb      	ldrb	r3, [r7, #3]
 800399a:	085b      	lsrs	r3, r3, #1
 800399c:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 800399e:	7bfb      	ldrb	r3, [r7, #15]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1ee      	bne.n	8003988 <OneWire_WriteByte+0x10>
}
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 80039ba:	2308      	movs	r3, #8
 80039bc:	73fb      	strb	r3, [r7, #15]
 80039be:	2300      	movs	r3, #0
 80039c0:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 80039c2:	7bbb      	ldrb	r3, [r7, #14]
 80039c4:	085b      	lsrs	r3, r3, #1
 80039c6:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff ffab 	bl	8003924 <OneWire_ReadBit>
 80039ce:	4603      	mov	r3, r0
 80039d0:	01db      	lsls	r3, r3, #7
 80039d2:	b25a      	sxtb	r2, r3
 80039d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039d8:	4313      	orrs	r3, r2
 80039da:	b25b      	sxtb	r3, r3
 80039dc:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1eb      	bne.n	80039c2 <OneWire_ReadByte+0x10>
	
	return byte;
 80039ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	71da      	strb	r2, [r3, #7]
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr

08003a18 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8003a30:	2301      	movs	r3, #1
 8003a32:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	7a1b      	ldrb	r3, [r3, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f040 809a 	bne.w	8003b76 <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff ff15 	bl	8003872 <OneWire_Reset>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	71da      	strb	r2, [r3, #7]
			return 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	e09b      	b.n	8003b9c <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	4619      	mov	r1, r3
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff ff85 	bl	8003978 <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff ff58 	bl	8003924 <OneWire_ReadBit>
 8003a74:	4603      	mov	r3, r0
 8003a76:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff ff53 	bl	8003924 <OneWire_ReadBit>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 8003a82:	7a7b      	ldrb	r3, [r7, #9]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d102      	bne.n	8003a8e <OneWire_Search+0x76>
 8003a88:	7a3b      	ldrb	r3, [r7, #8]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d064      	beq.n	8003b58 <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 8003a8e:	7a7a      	ldrb	r2, [r7, #9]
 8003a90:	7a3b      	ldrb	r3, [r7, #8]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d002      	beq.n	8003a9c <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 8003a96:	7a7b      	ldrb	r3, [r7, #9]
 8003a98:	72bb      	strb	r3, [r7, #10]
 8003a9a:	e026      	b.n	8003aea <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	799b      	ldrb	r3, [r3, #6]
 8003aa0:	7bfa      	ldrb	r2, [r7, #15]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d20d      	bcs.n	8003ac2 <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8003aa6:	7b7b      	ldrb	r3, [r7, #13]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	4413      	add	r3, r2
 8003aac:	7a5a      	ldrb	r2, [r3, #9]
 8003aae:	7afb      	ldrb	r3, [r7, #11]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf14      	ite	ne
 8003ab8:	2301      	movne	r3, #1
 8003aba:	2300      	moveq	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	72bb      	strb	r3, [r7, #10]
 8003ac0:	e008      	b.n	8003ad4 <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	799b      	ldrb	r3, [r3, #6]
 8003ac6:	7bfa      	ldrb	r2, [r7, #15]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 8003ad4:	7abb      	ldrb	r3, [r7, #10]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d107      	bne.n	8003aea <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 8003ade:	7bbb      	ldrb	r3, [r7, #14]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d802      	bhi.n	8003aea <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	7bba      	ldrb	r2, [r7, #14]
 8003ae8:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 8003aea:	7abb      	ldrb	r3, [r7, #10]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d10c      	bne.n	8003b0a <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 8003af0:	7b7b      	ldrb	r3, [r7, #13]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	4413      	add	r3, r2
 8003af6:	7a59      	ldrb	r1, [r3, #9]
 8003af8:	7b7b      	ldrb	r3, [r7, #13]
 8003afa:	7afa      	ldrb	r2, [r7, #11]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	b2d1      	uxtb	r1, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	4413      	add	r3, r2
 8003b04:	460a      	mov	r2, r1
 8003b06:	725a      	strb	r2, [r3, #9]
 8003b08:	e010      	b.n	8003b2c <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 8003b0a:	7b7b      	ldrb	r3, [r7, #13]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	4413      	add	r3, r2
 8003b10:	7a5b      	ldrb	r3, [r3, #9]
 8003b12:	b25a      	sxtb	r2, r3
 8003b14:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	b25b      	sxtb	r3, r3
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	b25a      	sxtb	r2, r3
 8003b20:	7b7b      	ldrb	r3, [r7, #13]
 8003b22:	b2d1      	uxtb	r1, r2
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	4413      	add	r3, r2
 8003b28:	460a      	mov	r2, r1
 8003b2a:	725a      	strb	r2, [r3, #9]
				}
				
				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 8003b2c:	7abb      	ldrb	r3, [r7, #10]
 8003b2e:	4619      	mov	r1, r3
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff fec5 	bl	80038c0 <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 8003b3c:	7afb      	ldrb	r3, [r7, #11]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 8003b42:	7afb      	ldrb	r3, [r7, #11]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d104      	bne.n	8003b52 <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 8003b48:	7b7b      	ldrb	r3, [r7, #13]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 8003b4e:	2301      	movs	r3, #1
 8003b50:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 8003b52:	7b7b      	ldrb	r3, [r7, #13]
 8003b54:	2b07      	cmp	r3, #7
 8003b56:	d98a      	bls.n	8003a6e <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	2b40      	cmp	r3, #64	; 0x40
 8003b5c:	d90b      	bls.n	8003b76 <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	7bba      	ldrb	r2, [r7, #14]
 8003b62:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	799b      	ldrb	r3, [r3, #6]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d102      	bne.n	8003b72 <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 8003b72:	2301      	movs	r3, #1
 8003b74:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 8003b76:	7b3b      	ldrb	r3, [r7, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <OneWire_Search+0x16c>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	7a5b      	ldrb	r3, [r3, #9]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10a      	bne.n	8003b9a <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8003b96:	2300      	movs	r3, #0
 8003b98:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8003b9a:	7b3b      	ldrb	r3, [r7, #12]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff ff21 	bl	80039f4 <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8003bb2:	21f0      	movs	r1, #240	; 0xf0
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7ff ff2f 	bl	8003a18 <OneWire_Search>
 8003bba:	4603      	mov	r3, r0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8003bcc:	21f0      	movs	r1, #240	; 0xf0
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff ff22 	bl	8003a18 <OneWire_Search>
 8003bd4:	4603      	mov	r3, r0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 8003be8:	2155      	movs	r1, #85	; 0x55
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff fec4 	bl	8003978 <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	73fb      	strb	r3, [r7, #15]
 8003bf4:	e00a      	b.n	8003c0c <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	4619      	mov	r1, r3
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff feb9 	bl	8003978 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	2b07      	cmp	r3, #7
 8003c10:	d9f1      	bls.n	8003bf6 <OneWire_SelectWithPointer+0x18>
	}	
}
 8003c12:	bf00      	nop
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b085      	sub	sp, #20
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8003c24:	2300      	movs	r3, #0
 8003c26:	73fb      	strb	r3, [r7, #15]
 8003c28:	e00a      	b.n	8003c40 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 8003c2a:	7bfa      	ldrb	r2, [r7, #15]
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	6839      	ldr	r1, [r7, #0]
 8003c30:	440b      	add	r3, r1
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	440a      	add	r2, r1
 8003c36:	7a52      	ldrb	r2, [r2, #9]
 8003c38:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	2b07      	cmp	r3, #7
 8003c44:	d9f1      	bls.n	8003c2a <OneWire_GetFullROM+0x10>
	}
}
 8003c46:	bf00      	nop
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr

08003c50 <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 8003c5e:	4811      	ldr	r0, [pc, #68]	; (8003ca4 <OneWire_Init+0x54>)
 8003c60:	f7fe f98b 	bl	8001f7a <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	88fa      	ldrh	r2, [r7, #6]
 8003c6e:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f7ff fdc8 	bl	8003806 <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f7ff fded 	bl	8003856 <OneWire_OutputHigh>
	HAL_Delay(100);
 8003c7c:	2064      	movs	r0, #100	; 0x64
 8003c7e:	f7fd f9e3 	bl	8001048 <HAL_Delay>
	OneWire_OutputLow(onewire);
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f7ff fdd8 	bl	8003838 <OneWire_OutputLow>
	HAL_Delay(100);
 8003c88:	2064      	movs	r0, #100	; 0x64
 8003c8a:	f7fd f9dd 	bl	8001048 <HAL_Delay>
	OneWire_OutputHigh(onewire);
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f7ff fde1 	bl	8003856 <OneWire_OutputHigh>
	HAL_Delay(200);
 8003c94:	20c8      	movs	r0, #200	; 0xc8
 8003c96:	f7fd f9d7 	bl	8001048 <HAL_Delay>
}
 8003c9a:	bf00      	nop
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	200002f4 	.word	0x200002f4

08003ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003cae:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <HAL_MspInit+0x5c>)
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	4a14      	ldr	r2, [pc, #80]	; (8003d04 <HAL_MspInit+0x5c>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	6193      	str	r3, [r2, #24]
 8003cba:	4b12      	ldr	r3, [pc, #72]	; (8003d04 <HAL_MspInit+0x5c>)
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cc6:	4b0f      	ldr	r3, [pc, #60]	; (8003d04 <HAL_MspInit+0x5c>)
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	4a0e      	ldr	r2, [pc, #56]	; (8003d04 <HAL_MspInit+0x5c>)
 8003ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	61d3      	str	r3, [r2, #28]
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <HAL_MspInit+0x5c>)
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cda:	607b      	str	r3, [r7, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003cde:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <HAL_MspInit+0x60>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	4a04      	ldr	r2, [pc, #16]	; (8003d08 <HAL_MspInit+0x60>)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cfa:	bf00      	nop
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40010000 	.word	0x40010000

08003d0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a09      	ldr	r2, [pc, #36]	; (8003d40 <HAL_TIM_Base_MspInit+0x34>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d10b      	bne.n	8003d36 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d1e:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <HAL_TIM_Base_MspInit+0x38>)
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	4a08      	ldr	r2, [pc, #32]	; (8003d44 <HAL_TIM_Base_MspInit+0x38>)
 8003d24:	f043 0302 	orr.w	r3, r3, #2
 8003d28:	61d3      	str	r3, [r2, #28]
 8003d2a:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <HAL_TIM_Base_MspInit+0x38>)
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003d36:	bf00      	nop
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr
 8003d40:	40000400 	.word	0x40000400
 8003d44:	40021000 	.word	0x40021000

08003d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08a      	sub	sp, #40	; 0x28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d50:	f107 0318 	add.w	r3, r7, #24
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	605a      	str	r2, [r3, #4]
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a39      	ldr	r2, [pc, #228]	; (8003e48 <HAL_UART_MspInit+0x100>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d12c      	bne.n	8003dc2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d68:	4b38      	ldr	r3, [pc, #224]	; (8003e4c <HAL_UART_MspInit+0x104>)
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	4a37      	ldr	r2, [pc, #220]	; (8003e4c <HAL_UART_MspInit+0x104>)
 8003d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d72:	61d3      	str	r3, [r2, #28]
 8003d74:	4b35      	ldr	r3, [pc, #212]	; (8003e4c <HAL_UART_MspInit+0x104>)
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d80:	4b32      	ldr	r3, [pc, #200]	; (8003e4c <HAL_UART_MspInit+0x104>)
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	4a31      	ldr	r2, [pc, #196]	; (8003e4c <HAL_UART_MspInit+0x104>)
 8003d86:	f043 0304 	orr.w	r3, r3, #4
 8003d8a:	6193      	str	r3, [r2, #24]
 8003d8c:	4b2f      	ldr	r3, [pc, #188]	; (8003e4c <HAL_UART_MspInit+0x104>)
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003d98:	230c      	movs	r3, #12
 8003d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003da0:	2302      	movs	r3, #2
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da4:	f107 0318 	add.w	r3, r7, #24
 8003da8:	4619      	mov	r1, r3
 8003daa:	4829      	ldr	r0, [pc, #164]	; (8003e50 <HAL_UART_MspInit+0x108>)
 8003dac:	f7fd faf2 	bl	8001394 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003db0:	2200      	movs	r2, #0
 8003db2:	2100      	movs	r1, #0
 8003db4:	2026      	movs	r0, #38	; 0x26
 8003db6:	f7fd fa40 	bl	800123a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003dba:	2026      	movs	r0, #38	; 0x26
 8003dbc:	f7fd fa59 	bl	8001272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003dc0:	e03e      	b.n	8003e40 <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART3)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a23      	ldr	r2, [pc, #140]	; (8003e54 <HAL_UART_MspInit+0x10c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d139      	bne.n	8003e40 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003dcc:	4b1f      	ldr	r3, [pc, #124]	; (8003e4c <HAL_UART_MspInit+0x104>)
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	4a1e      	ldr	r2, [pc, #120]	; (8003e4c <HAL_UART_MspInit+0x104>)
 8003dd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dd6:	61d3      	str	r3, [r2, #28]
 8003dd8:	4b1c      	ldr	r3, [pc, #112]	; (8003e4c <HAL_UART_MspInit+0x104>)
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de4:	4b19      	ldr	r3, [pc, #100]	; (8003e4c <HAL_UART_MspInit+0x104>)
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	4a18      	ldr	r2, [pc, #96]	; (8003e4c <HAL_UART_MspInit+0x104>)
 8003dea:	f043 0308 	orr.w	r3, r3, #8
 8003dee:	6193      	str	r3, [r2, #24]
 8003df0:	4b16      	ldr	r3, [pc, #88]	; (8003e4c <HAL_UART_MspInit+0x104>)
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e02:	2302      	movs	r3, #2
 8003e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e06:	2303      	movs	r3, #3
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e0a:	f107 0318 	add.w	r3, r7, #24
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4811      	ldr	r0, [pc, #68]	; (8003e58 <HAL_UART_MspInit+0x110>)
 8003e12:	f7fd fabf 	bl	8001394 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003e16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e24:	f107 0318 	add.w	r3, r7, #24
 8003e28:	4619      	mov	r1, r3
 8003e2a:	480b      	ldr	r0, [pc, #44]	; (8003e58 <HAL_UART_MspInit+0x110>)
 8003e2c:	f7fd fab2 	bl	8001394 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003e30:	2200      	movs	r2, #0
 8003e32:	2100      	movs	r1, #0
 8003e34:	2027      	movs	r0, #39	; 0x27
 8003e36:	f7fd fa00 	bl	800123a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003e3a:	2027      	movs	r0, #39	; 0x27
 8003e3c:	f7fd fa19 	bl	8001272 <HAL_NVIC_EnableIRQ>
}
 8003e40:	bf00      	nop
 8003e42:	3728      	adds	r7, #40	; 0x28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40004400 	.word	0x40004400
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	40010800 	.word	0x40010800
 8003e54:	40004800 	.word	0x40004800
 8003e58:	40010c00 	.word	0x40010c00

08003e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e60:	bf00      	nop
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr

08003e68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e6c:	e7fe      	b.n	8003e6c <HardFault_Handler+0x4>

08003e6e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e72:	e7fe      	b.n	8003e72 <MemManage_Handler+0x4>

08003e74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e78:	e7fe      	b.n	8003e78 <BusFault_Handler+0x4>

08003e7a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e7e:	e7fe      	b.n	8003e7e <UsageFault_Handler+0x4>

08003e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e84:	bf00      	nop
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr

08003e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e90:	bf00      	nop
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr

08003e98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e9c:	bf00      	nop
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr

08003ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ea8:	f7fd f8b2 	bl	8001010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003eac:	bf00      	nop
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003eb4:	4802      	ldr	r0, [pc, #8]	; (8003ec0 <USART2_IRQHandler+0x10>)
 8003eb6:	f7fe fbb1 	bl	800261c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003eba:	bf00      	nop
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20000334 	.word	0x20000334

08003ec4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003ec8:	4802      	ldr	r0, [pc, #8]	; (8003ed4 <USART3_IRQHandler+0x10>)
 8003eca:	f7fe fba7 	bl	800261c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	2000026c 	.word	0x2000026c

08003ed8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003edc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003ee0:	f7fd fbe2 	bl	80016a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003ee4:	bf00      	nop
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003ef0:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <_sbrk+0x50>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d102      	bne.n	8003efe <_sbrk+0x16>
		heap_end = &end;
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <_sbrk+0x50>)
 8003efa:	4a10      	ldr	r2, [pc, #64]	; (8003f3c <_sbrk+0x54>)
 8003efc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003efe:	4b0e      	ldr	r3, [pc, #56]	; (8003f38 <_sbrk+0x50>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003f04:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <_sbrk+0x50>)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	466a      	mov	r2, sp
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d907      	bls.n	8003f22 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003f12:	f000 f86f 	bl	8003ff4 <__errno>
 8003f16:	4602      	mov	r2, r0
 8003f18:	230c      	movs	r3, #12
 8003f1a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f20:	e006      	b.n	8003f30 <_sbrk+0x48>
	}

	heap_end += incr;
 8003f22:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <_sbrk+0x50>)
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4413      	add	r3, r2
 8003f2a:	4a03      	ldr	r2, [pc, #12]	; (8003f38 <_sbrk+0x50>)
 8003f2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	200001fc 	.word	0x200001fc
 8003f3c:	20000380 	.word	0x20000380

08003f40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003f44:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <SystemInit+0x5c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a14      	ldr	r2, [pc, #80]	; (8003f9c <SystemInit+0x5c>)
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003f50:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <SystemInit+0x5c>)
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	4911      	ldr	r1, [pc, #68]	; (8003f9c <SystemInit+0x5c>)
 8003f56:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <SystemInit+0x60>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003f5c:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <SystemInit+0x5c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a0e      	ldr	r2, [pc, #56]	; (8003f9c <SystemInit+0x5c>)
 8003f62:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f6a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <SystemInit+0x5c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a0a      	ldr	r2, [pc, #40]	; (8003f9c <SystemInit+0x5c>)
 8003f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f76:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003f78:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <SystemInit+0x5c>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	4a07      	ldr	r2, [pc, #28]	; (8003f9c <SystemInit+0x5c>)
 8003f7e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003f82:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <SystemInit+0x5c>)
 8003f86:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003f8a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <SystemInit+0x64>)
 8003f8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f92:	609a      	str	r2, [r3, #8]
#endif 
}
 8003f94:	bf00      	nop
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	f8ff0000 	.word	0xf8ff0000
 8003fa4:	e000ed00 	.word	0xe000ed00

08003fa8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003fa8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003faa:	e003      	b.n	8003fb4 <LoopCopyDataInit>

08003fac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003fae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003fb0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003fb2:	3104      	adds	r1, #4

08003fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003fb4:	480a      	ldr	r0, [pc, #40]	; (8003fe0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003fb8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003fba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003fbc:	d3f6      	bcc.n	8003fac <CopyDataInit>
  ldr r2, =_sbss
 8003fbe:	4a0a      	ldr	r2, [pc, #40]	; (8003fe8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003fc0:	e002      	b.n	8003fc8 <LoopFillZerobss>

08003fc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003fc2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003fc4:	f842 3b04 	str.w	r3, [r2], #4

08003fc8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003fc8:	4b08      	ldr	r3, [pc, #32]	; (8003fec <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003fca:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003fcc:	d3f9      	bcc.n	8003fc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003fce:	f7ff ffb7 	bl	8003f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fd2:	f000 f815 	bl	8004000 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003fd6:	f7ff f8db 	bl	8003190 <main>
  bx lr
 8003fda:	4770      	bx	lr
  ldr r3, =_sidata
 8003fdc:	080063a0 	.word	0x080063a0
  ldr r0, =_sdata
 8003fe0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003fe4:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8003fe8:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8003fec:	2000037c 	.word	0x2000037c

08003ff0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ff0:	e7fe      	b.n	8003ff0 <ADC1_2_IRQHandler>
	...

08003ff4 <__errno>:
 8003ff4:	4b01      	ldr	r3, [pc, #4]	; (8003ffc <__errno+0x8>)
 8003ff6:	6818      	ldr	r0, [r3, #0]
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	2000000c 	.word	0x2000000c

08004000 <__libc_init_array>:
 8004000:	b570      	push	{r4, r5, r6, lr}
 8004002:	2500      	movs	r5, #0
 8004004:	4e0c      	ldr	r6, [pc, #48]	; (8004038 <__libc_init_array+0x38>)
 8004006:	4c0d      	ldr	r4, [pc, #52]	; (800403c <__libc_init_array+0x3c>)
 8004008:	1ba4      	subs	r4, r4, r6
 800400a:	10a4      	asrs	r4, r4, #2
 800400c:	42a5      	cmp	r5, r4
 800400e:	d109      	bne.n	8004024 <__libc_init_array+0x24>
 8004010:	f002 f860 	bl	80060d4 <_init>
 8004014:	2500      	movs	r5, #0
 8004016:	4e0a      	ldr	r6, [pc, #40]	; (8004040 <__libc_init_array+0x40>)
 8004018:	4c0a      	ldr	r4, [pc, #40]	; (8004044 <__libc_init_array+0x44>)
 800401a:	1ba4      	subs	r4, r4, r6
 800401c:	10a4      	asrs	r4, r4, #2
 800401e:	42a5      	cmp	r5, r4
 8004020:	d105      	bne.n	800402e <__libc_init_array+0x2e>
 8004022:	bd70      	pop	{r4, r5, r6, pc}
 8004024:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004028:	4798      	blx	r3
 800402a:	3501      	adds	r5, #1
 800402c:	e7ee      	b.n	800400c <__libc_init_array+0xc>
 800402e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004032:	4798      	blx	r3
 8004034:	3501      	adds	r5, #1
 8004036:	e7f2      	b.n	800401e <__libc_init_array+0x1e>
 8004038:	08006398 	.word	0x08006398
 800403c:	08006398 	.word	0x08006398
 8004040:	08006398 	.word	0x08006398
 8004044:	0800639c 	.word	0x0800639c

08004048 <memset>:
 8004048:	4603      	mov	r3, r0
 800404a:	4402      	add	r2, r0
 800404c:	4293      	cmp	r3, r2
 800404e:	d100      	bne.n	8004052 <memset+0xa>
 8004050:	4770      	bx	lr
 8004052:	f803 1b01 	strb.w	r1, [r3], #1
 8004056:	e7f9      	b.n	800404c <memset+0x4>

08004058 <__cvt>:
 8004058:	2b00      	cmp	r3, #0
 800405a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800405e:	461e      	mov	r6, r3
 8004060:	bfbb      	ittet	lt
 8004062:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004066:	461e      	movlt	r6, r3
 8004068:	2300      	movge	r3, #0
 800406a:	232d      	movlt	r3, #45	; 0x2d
 800406c:	b088      	sub	sp, #32
 800406e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004070:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004074:	f027 0720 	bic.w	r7, r7, #32
 8004078:	2f46      	cmp	r7, #70	; 0x46
 800407a:	4614      	mov	r4, r2
 800407c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800407e:	700b      	strb	r3, [r1, #0]
 8004080:	d004      	beq.n	800408c <__cvt+0x34>
 8004082:	2f45      	cmp	r7, #69	; 0x45
 8004084:	d100      	bne.n	8004088 <__cvt+0x30>
 8004086:	3501      	adds	r5, #1
 8004088:	2302      	movs	r3, #2
 800408a:	e000      	b.n	800408e <__cvt+0x36>
 800408c:	2303      	movs	r3, #3
 800408e:	aa07      	add	r2, sp, #28
 8004090:	9204      	str	r2, [sp, #16]
 8004092:	aa06      	add	r2, sp, #24
 8004094:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004098:	e9cd 3500 	strd	r3, r5, [sp]
 800409c:	4622      	mov	r2, r4
 800409e:	4633      	mov	r3, r6
 80040a0:	f000 fcda 	bl	8004a58 <_dtoa_r>
 80040a4:	2f47      	cmp	r7, #71	; 0x47
 80040a6:	4680      	mov	r8, r0
 80040a8:	d102      	bne.n	80040b0 <__cvt+0x58>
 80040aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80040ac:	07db      	lsls	r3, r3, #31
 80040ae:	d526      	bpl.n	80040fe <__cvt+0xa6>
 80040b0:	2f46      	cmp	r7, #70	; 0x46
 80040b2:	eb08 0905 	add.w	r9, r8, r5
 80040b6:	d111      	bne.n	80040dc <__cvt+0x84>
 80040b8:	f898 3000 	ldrb.w	r3, [r8]
 80040bc:	2b30      	cmp	r3, #48	; 0x30
 80040be:	d10a      	bne.n	80040d6 <__cvt+0x7e>
 80040c0:	2200      	movs	r2, #0
 80040c2:	2300      	movs	r3, #0
 80040c4:	4620      	mov	r0, r4
 80040c6:	4631      	mov	r1, r6
 80040c8:	f7fc fc6e 	bl	80009a8 <__aeabi_dcmpeq>
 80040cc:	b918      	cbnz	r0, 80040d6 <__cvt+0x7e>
 80040ce:	f1c5 0501 	rsb	r5, r5, #1
 80040d2:	f8ca 5000 	str.w	r5, [sl]
 80040d6:	f8da 3000 	ldr.w	r3, [sl]
 80040da:	4499      	add	r9, r3
 80040dc:	2200      	movs	r2, #0
 80040de:	2300      	movs	r3, #0
 80040e0:	4620      	mov	r0, r4
 80040e2:	4631      	mov	r1, r6
 80040e4:	f7fc fc60 	bl	80009a8 <__aeabi_dcmpeq>
 80040e8:	b938      	cbnz	r0, 80040fa <__cvt+0xa2>
 80040ea:	2230      	movs	r2, #48	; 0x30
 80040ec:	9b07      	ldr	r3, [sp, #28]
 80040ee:	454b      	cmp	r3, r9
 80040f0:	d205      	bcs.n	80040fe <__cvt+0xa6>
 80040f2:	1c59      	adds	r1, r3, #1
 80040f4:	9107      	str	r1, [sp, #28]
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	e7f8      	b.n	80040ec <__cvt+0x94>
 80040fa:	f8cd 901c 	str.w	r9, [sp, #28]
 80040fe:	4640      	mov	r0, r8
 8004100:	9b07      	ldr	r3, [sp, #28]
 8004102:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004104:	eba3 0308 	sub.w	r3, r3, r8
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	b008      	add	sp, #32
 800410c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004110 <__exponent>:
 8004110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004112:	2900      	cmp	r1, #0
 8004114:	bfb4      	ite	lt
 8004116:	232d      	movlt	r3, #45	; 0x2d
 8004118:	232b      	movge	r3, #43	; 0x2b
 800411a:	4604      	mov	r4, r0
 800411c:	bfb8      	it	lt
 800411e:	4249      	neglt	r1, r1
 8004120:	2909      	cmp	r1, #9
 8004122:	f804 2b02 	strb.w	r2, [r4], #2
 8004126:	7043      	strb	r3, [r0, #1]
 8004128:	dd21      	ble.n	800416e <__exponent+0x5e>
 800412a:	f10d 0307 	add.w	r3, sp, #7
 800412e:	461f      	mov	r7, r3
 8004130:	260a      	movs	r6, #10
 8004132:	fb91 f5f6 	sdiv	r5, r1, r6
 8004136:	fb06 1115 	mls	r1, r6, r5, r1
 800413a:	2d09      	cmp	r5, #9
 800413c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004140:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004144:	f103 32ff 	add.w	r2, r3, #4294967295
 8004148:	4629      	mov	r1, r5
 800414a:	dc09      	bgt.n	8004160 <__exponent+0x50>
 800414c:	3130      	adds	r1, #48	; 0x30
 800414e:	3b02      	subs	r3, #2
 8004150:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004154:	42bb      	cmp	r3, r7
 8004156:	4622      	mov	r2, r4
 8004158:	d304      	bcc.n	8004164 <__exponent+0x54>
 800415a:	1a10      	subs	r0, r2, r0
 800415c:	b003      	add	sp, #12
 800415e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004160:	4613      	mov	r3, r2
 8004162:	e7e6      	b.n	8004132 <__exponent+0x22>
 8004164:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004168:	f804 2b01 	strb.w	r2, [r4], #1
 800416c:	e7f2      	b.n	8004154 <__exponent+0x44>
 800416e:	2330      	movs	r3, #48	; 0x30
 8004170:	4419      	add	r1, r3
 8004172:	7083      	strb	r3, [r0, #2]
 8004174:	1d02      	adds	r2, r0, #4
 8004176:	70c1      	strb	r1, [r0, #3]
 8004178:	e7ef      	b.n	800415a <__exponent+0x4a>
	...

0800417c <_printf_float>:
 800417c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004180:	b091      	sub	sp, #68	; 0x44
 8004182:	460c      	mov	r4, r1
 8004184:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004186:	4693      	mov	fp, r2
 8004188:	461e      	mov	r6, r3
 800418a:	4605      	mov	r5, r0
 800418c:	f001 fa18 	bl	80055c0 <_localeconv_r>
 8004190:	6803      	ldr	r3, [r0, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	9309      	str	r3, [sp, #36]	; 0x24
 8004196:	f7fb ffdb 	bl	8000150 <strlen>
 800419a:	2300      	movs	r3, #0
 800419c:	930e      	str	r3, [sp, #56]	; 0x38
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	900a      	str	r0, [sp, #40]	; 0x28
 80041a2:	3307      	adds	r3, #7
 80041a4:	f023 0307 	bic.w	r3, r3, #7
 80041a8:	f103 0208 	add.w	r2, r3, #8
 80041ac:	f894 8018 	ldrb.w	r8, [r4, #24]
 80041b0:	f8d4 a000 	ldr.w	sl, [r4]
 80041b4:	603a      	str	r2, [r7, #0]
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80041be:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80041c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80041c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80041c8:	f04f 32ff 	mov.w	r2, #4294967295
 80041cc:	4ba6      	ldr	r3, [pc, #664]	; (8004468 <_printf_float+0x2ec>)
 80041ce:	4638      	mov	r0, r7
 80041d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041d2:	f7fc fc1b 	bl	8000a0c <__aeabi_dcmpun>
 80041d6:	bb68      	cbnz	r0, 8004234 <_printf_float+0xb8>
 80041d8:	f04f 32ff 	mov.w	r2, #4294967295
 80041dc:	4ba2      	ldr	r3, [pc, #648]	; (8004468 <_printf_float+0x2ec>)
 80041de:	4638      	mov	r0, r7
 80041e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041e2:	f7fc fbf5 	bl	80009d0 <__aeabi_dcmple>
 80041e6:	bb28      	cbnz	r0, 8004234 <_printf_float+0xb8>
 80041e8:	2200      	movs	r2, #0
 80041ea:	2300      	movs	r3, #0
 80041ec:	4638      	mov	r0, r7
 80041ee:	4649      	mov	r1, r9
 80041f0:	f7fc fbe4 	bl	80009bc <__aeabi_dcmplt>
 80041f4:	b110      	cbz	r0, 80041fc <_printf_float+0x80>
 80041f6:	232d      	movs	r3, #45	; 0x2d
 80041f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041fc:	4f9b      	ldr	r7, [pc, #620]	; (800446c <_printf_float+0x2f0>)
 80041fe:	4b9c      	ldr	r3, [pc, #624]	; (8004470 <_printf_float+0x2f4>)
 8004200:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004204:	bf98      	it	ls
 8004206:	461f      	movls	r7, r3
 8004208:	2303      	movs	r3, #3
 800420a:	f04f 0900 	mov.w	r9, #0
 800420e:	6123      	str	r3, [r4, #16]
 8004210:	f02a 0304 	bic.w	r3, sl, #4
 8004214:	6023      	str	r3, [r4, #0]
 8004216:	9600      	str	r6, [sp, #0]
 8004218:	465b      	mov	r3, fp
 800421a:	aa0f      	add	r2, sp, #60	; 0x3c
 800421c:	4621      	mov	r1, r4
 800421e:	4628      	mov	r0, r5
 8004220:	f000 f9e2 	bl	80045e8 <_printf_common>
 8004224:	3001      	adds	r0, #1
 8004226:	f040 8090 	bne.w	800434a <_printf_float+0x1ce>
 800422a:	f04f 30ff 	mov.w	r0, #4294967295
 800422e:	b011      	add	sp, #68	; 0x44
 8004230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004234:	463a      	mov	r2, r7
 8004236:	464b      	mov	r3, r9
 8004238:	4638      	mov	r0, r7
 800423a:	4649      	mov	r1, r9
 800423c:	f7fc fbe6 	bl	8000a0c <__aeabi_dcmpun>
 8004240:	b110      	cbz	r0, 8004248 <_printf_float+0xcc>
 8004242:	4f8c      	ldr	r7, [pc, #560]	; (8004474 <_printf_float+0x2f8>)
 8004244:	4b8c      	ldr	r3, [pc, #560]	; (8004478 <_printf_float+0x2fc>)
 8004246:	e7db      	b.n	8004200 <_printf_float+0x84>
 8004248:	6863      	ldr	r3, [r4, #4]
 800424a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800424e:	1c59      	adds	r1, r3, #1
 8004250:	a80d      	add	r0, sp, #52	; 0x34
 8004252:	a90e      	add	r1, sp, #56	; 0x38
 8004254:	d140      	bne.n	80042d8 <_printf_float+0x15c>
 8004256:	2306      	movs	r3, #6
 8004258:	6063      	str	r3, [r4, #4]
 800425a:	f04f 0c00 	mov.w	ip, #0
 800425e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004262:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004266:	6863      	ldr	r3, [r4, #4]
 8004268:	6022      	str	r2, [r4, #0]
 800426a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	463a      	mov	r2, r7
 8004272:	464b      	mov	r3, r9
 8004274:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004278:	4628      	mov	r0, r5
 800427a:	f7ff feed 	bl	8004058 <__cvt>
 800427e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004282:	2b47      	cmp	r3, #71	; 0x47
 8004284:	4607      	mov	r7, r0
 8004286:	d109      	bne.n	800429c <_printf_float+0x120>
 8004288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800428a:	1cd8      	adds	r0, r3, #3
 800428c:	db02      	blt.n	8004294 <_printf_float+0x118>
 800428e:	6862      	ldr	r2, [r4, #4]
 8004290:	4293      	cmp	r3, r2
 8004292:	dd47      	ble.n	8004324 <_printf_float+0x1a8>
 8004294:	f1a8 0802 	sub.w	r8, r8, #2
 8004298:	fa5f f888 	uxtb.w	r8, r8
 800429c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80042a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80042a2:	d824      	bhi.n	80042ee <_printf_float+0x172>
 80042a4:	3901      	subs	r1, #1
 80042a6:	4642      	mov	r2, r8
 80042a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80042ac:	910d      	str	r1, [sp, #52]	; 0x34
 80042ae:	f7ff ff2f 	bl	8004110 <__exponent>
 80042b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042b4:	4681      	mov	r9, r0
 80042b6:	1813      	adds	r3, r2, r0
 80042b8:	2a01      	cmp	r2, #1
 80042ba:	6123      	str	r3, [r4, #16]
 80042bc:	dc02      	bgt.n	80042c4 <_printf_float+0x148>
 80042be:	6822      	ldr	r2, [r4, #0]
 80042c0:	07d1      	lsls	r1, r2, #31
 80042c2:	d501      	bpl.n	80042c8 <_printf_float+0x14c>
 80042c4:	3301      	adds	r3, #1
 80042c6:	6123      	str	r3, [r4, #16]
 80042c8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0a2      	beq.n	8004216 <_printf_float+0x9a>
 80042d0:	232d      	movs	r3, #45	; 0x2d
 80042d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042d6:	e79e      	b.n	8004216 <_printf_float+0x9a>
 80042d8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80042dc:	f000 816e 	beq.w	80045bc <_printf_float+0x440>
 80042e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042e4:	d1b9      	bne.n	800425a <_printf_float+0xde>
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1b7      	bne.n	800425a <_printf_float+0xde>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e7b4      	b.n	8004258 <_printf_float+0xdc>
 80042ee:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80042f2:	d119      	bne.n	8004328 <_printf_float+0x1ac>
 80042f4:	2900      	cmp	r1, #0
 80042f6:	6863      	ldr	r3, [r4, #4]
 80042f8:	dd0c      	ble.n	8004314 <_printf_float+0x198>
 80042fa:	6121      	str	r1, [r4, #16]
 80042fc:	b913      	cbnz	r3, 8004304 <_printf_float+0x188>
 80042fe:	6822      	ldr	r2, [r4, #0]
 8004300:	07d2      	lsls	r2, r2, #31
 8004302:	d502      	bpl.n	800430a <_printf_float+0x18e>
 8004304:	3301      	adds	r3, #1
 8004306:	440b      	add	r3, r1
 8004308:	6123      	str	r3, [r4, #16]
 800430a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800430c:	f04f 0900 	mov.w	r9, #0
 8004310:	65a3      	str	r3, [r4, #88]	; 0x58
 8004312:	e7d9      	b.n	80042c8 <_printf_float+0x14c>
 8004314:	b913      	cbnz	r3, 800431c <_printf_float+0x1a0>
 8004316:	6822      	ldr	r2, [r4, #0]
 8004318:	07d0      	lsls	r0, r2, #31
 800431a:	d501      	bpl.n	8004320 <_printf_float+0x1a4>
 800431c:	3302      	adds	r3, #2
 800431e:	e7f3      	b.n	8004308 <_printf_float+0x18c>
 8004320:	2301      	movs	r3, #1
 8004322:	e7f1      	b.n	8004308 <_printf_float+0x18c>
 8004324:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004328:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800432c:	4293      	cmp	r3, r2
 800432e:	db05      	blt.n	800433c <_printf_float+0x1c0>
 8004330:	6822      	ldr	r2, [r4, #0]
 8004332:	6123      	str	r3, [r4, #16]
 8004334:	07d1      	lsls	r1, r2, #31
 8004336:	d5e8      	bpl.n	800430a <_printf_float+0x18e>
 8004338:	3301      	adds	r3, #1
 800433a:	e7e5      	b.n	8004308 <_printf_float+0x18c>
 800433c:	2b00      	cmp	r3, #0
 800433e:	bfcc      	ite	gt
 8004340:	2301      	movgt	r3, #1
 8004342:	f1c3 0302 	rsble	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	e7de      	b.n	8004308 <_printf_float+0x18c>
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	055a      	lsls	r2, r3, #21
 800434e:	d407      	bmi.n	8004360 <_printf_float+0x1e4>
 8004350:	6923      	ldr	r3, [r4, #16]
 8004352:	463a      	mov	r2, r7
 8004354:	4659      	mov	r1, fp
 8004356:	4628      	mov	r0, r5
 8004358:	47b0      	blx	r6
 800435a:	3001      	adds	r0, #1
 800435c:	d129      	bne.n	80043b2 <_printf_float+0x236>
 800435e:	e764      	b.n	800422a <_printf_float+0xae>
 8004360:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004364:	f240 80d7 	bls.w	8004516 <_printf_float+0x39a>
 8004368:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800436c:	2200      	movs	r2, #0
 800436e:	2300      	movs	r3, #0
 8004370:	f7fc fb1a 	bl	80009a8 <__aeabi_dcmpeq>
 8004374:	b388      	cbz	r0, 80043da <_printf_float+0x25e>
 8004376:	2301      	movs	r3, #1
 8004378:	4a40      	ldr	r2, [pc, #256]	; (800447c <_printf_float+0x300>)
 800437a:	4659      	mov	r1, fp
 800437c:	4628      	mov	r0, r5
 800437e:	47b0      	blx	r6
 8004380:	3001      	adds	r0, #1
 8004382:	f43f af52 	beq.w	800422a <_printf_float+0xae>
 8004386:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800438a:	429a      	cmp	r2, r3
 800438c:	db02      	blt.n	8004394 <_printf_float+0x218>
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	07d8      	lsls	r0, r3, #31
 8004392:	d50e      	bpl.n	80043b2 <_printf_float+0x236>
 8004394:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004398:	4659      	mov	r1, fp
 800439a:	4628      	mov	r0, r5
 800439c:	47b0      	blx	r6
 800439e:	3001      	adds	r0, #1
 80043a0:	f43f af43 	beq.w	800422a <_printf_float+0xae>
 80043a4:	2700      	movs	r7, #0
 80043a6:	f104 081a 	add.w	r8, r4, #26
 80043aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043ac:	3b01      	subs	r3, #1
 80043ae:	42bb      	cmp	r3, r7
 80043b0:	dc09      	bgt.n	80043c6 <_printf_float+0x24a>
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	079f      	lsls	r7, r3, #30
 80043b6:	f100 80fd 	bmi.w	80045b4 <_printf_float+0x438>
 80043ba:	68e0      	ldr	r0, [r4, #12]
 80043bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043be:	4298      	cmp	r0, r3
 80043c0:	bfb8      	it	lt
 80043c2:	4618      	movlt	r0, r3
 80043c4:	e733      	b.n	800422e <_printf_float+0xb2>
 80043c6:	2301      	movs	r3, #1
 80043c8:	4642      	mov	r2, r8
 80043ca:	4659      	mov	r1, fp
 80043cc:	4628      	mov	r0, r5
 80043ce:	47b0      	blx	r6
 80043d0:	3001      	adds	r0, #1
 80043d2:	f43f af2a 	beq.w	800422a <_printf_float+0xae>
 80043d6:	3701      	adds	r7, #1
 80043d8:	e7e7      	b.n	80043aa <_printf_float+0x22e>
 80043da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043dc:	2b00      	cmp	r3, #0
 80043de:	dc2b      	bgt.n	8004438 <_printf_float+0x2bc>
 80043e0:	2301      	movs	r3, #1
 80043e2:	4a26      	ldr	r2, [pc, #152]	; (800447c <_printf_float+0x300>)
 80043e4:	4659      	mov	r1, fp
 80043e6:	4628      	mov	r0, r5
 80043e8:	47b0      	blx	r6
 80043ea:	3001      	adds	r0, #1
 80043ec:	f43f af1d 	beq.w	800422a <_printf_float+0xae>
 80043f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043f2:	b923      	cbnz	r3, 80043fe <_printf_float+0x282>
 80043f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043f6:	b913      	cbnz	r3, 80043fe <_printf_float+0x282>
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	07d9      	lsls	r1, r3, #31
 80043fc:	d5d9      	bpl.n	80043b2 <_printf_float+0x236>
 80043fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004402:	4659      	mov	r1, fp
 8004404:	4628      	mov	r0, r5
 8004406:	47b0      	blx	r6
 8004408:	3001      	adds	r0, #1
 800440a:	f43f af0e 	beq.w	800422a <_printf_float+0xae>
 800440e:	f04f 0800 	mov.w	r8, #0
 8004412:	f104 091a 	add.w	r9, r4, #26
 8004416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004418:	425b      	negs	r3, r3
 800441a:	4543      	cmp	r3, r8
 800441c:	dc01      	bgt.n	8004422 <_printf_float+0x2a6>
 800441e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004420:	e797      	b.n	8004352 <_printf_float+0x1d6>
 8004422:	2301      	movs	r3, #1
 8004424:	464a      	mov	r2, r9
 8004426:	4659      	mov	r1, fp
 8004428:	4628      	mov	r0, r5
 800442a:	47b0      	blx	r6
 800442c:	3001      	adds	r0, #1
 800442e:	f43f aefc 	beq.w	800422a <_printf_float+0xae>
 8004432:	f108 0801 	add.w	r8, r8, #1
 8004436:	e7ee      	b.n	8004416 <_printf_float+0x29a>
 8004438:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800443a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800443c:	429a      	cmp	r2, r3
 800443e:	bfa8      	it	ge
 8004440:	461a      	movge	r2, r3
 8004442:	2a00      	cmp	r2, #0
 8004444:	4690      	mov	r8, r2
 8004446:	dd07      	ble.n	8004458 <_printf_float+0x2dc>
 8004448:	4613      	mov	r3, r2
 800444a:	4659      	mov	r1, fp
 800444c:	463a      	mov	r2, r7
 800444e:	4628      	mov	r0, r5
 8004450:	47b0      	blx	r6
 8004452:	3001      	adds	r0, #1
 8004454:	f43f aee9 	beq.w	800422a <_printf_float+0xae>
 8004458:	f104 031a 	add.w	r3, r4, #26
 800445c:	f04f 0a00 	mov.w	sl, #0
 8004460:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004464:	930b      	str	r3, [sp, #44]	; 0x2c
 8004466:	e015      	b.n	8004494 <_printf_float+0x318>
 8004468:	7fefffff 	.word	0x7fefffff
 800446c:	08006140 	.word	0x08006140
 8004470:	0800613c 	.word	0x0800613c
 8004474:	08006148 	.word	0x08006148
 8004478:	08006144 	.word	0x08006144
 800447c:	0800614c 	.word	0x0800614c
 8004480:	2301      	movs	r3, #1
 8004482:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004484:	4659      	mov	r1, fp
 8004486:	4628      	mov	r0, r5
 8004488:	47b0      	blx	r6
 800448a:	3001      	adds	r0, #1
 800448c:	f43f aecd 	beq.w	800422a <_printf_float+0xae>
 8004490:	f10a 0a01 	add.w	sl, sl, #1
 8004494:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004498:	eba9 0308 	sub.w	r3, r9, r8
 800449c:	4553      	cmp	r3, sl
 800449e:	dcef      	bgt.n	8004480 <_printf_float+0x304>
 80044a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80044a4:	429a      	cmp	r2, r3
 80044a6:	444f      	add	r7, r9
 80044a8:	db14      	blt.n	80044d4 <_printf_float+0x358>
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	07da      	lsls	r2, r3, #31
 80044ae:	d411      	bmi.n	80044d4 <_printf_float+0x358>
 80044b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044b2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80044b4:	eba3 0209 	sub.w	r2, r3, r9
 80044b8:	eba3 0901 	sub.w	r9, r3, r1
 80044bc:	4591      	cmp	r9, r2
 80044be:	bfa8      	it	ge
 80044c0:	4691      	movge	r9, r2
 80044c2:	f1b9 0f00 	cmp.w	r9, #0
 80044c6:	dc0d      	bgt.n	80044e4 <_printf_float+0x368>
 80044c8:	2700      	movs	r7, #0
 80044ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044ce:	f104 081a 	add.w	r8, r4, #26
 80044d2:	e018      	b.n	8004506 <_printf_float+0x38a>
 80044d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044d8:	4659      	mov	r1, fp
 80044da:	4628      	mov	r0, r5
 80044dc:	47b0      	blx	r6
 80044de:	3001      	adds	r0, #1
 80044e0:	d1e6      	bne.n	80044b0 <_printf_float+0x334>
 80044e2:	e6a2      	b.n	800422a <_printf_float+0xae>
 80044e4:	464b      	mov	r3, r9
 80044e6:	463a      	mov	r2, r7
 80044e8:	4659      	mov	r1, fp
 80044ea:	4628      	mov	r0, r5
 80044ec:	47b0      	blx	r6
 80044ee:	3001      	adds	r0, #1
 80044f0:	d1ea      	bne.n	80044c8 <_printf_float+0x34c>
 80044f2:	e69a      	b.n	800422a <_printf_float+0xae>
 80044f4:	2301      	movs	r3, #1
 80044f6:	4642      	mov	r2, r8
 80044f8:	4659      	mov	r1, fp
 80044fa:	4628      	mov	r0, r5
 80044fc:	47b0      	blx	r6
 80044fe:	3001      	adds	r0, #1
 8004500:	f43f ae93 	beq.w	800422a <_printf_float+0xae>
 8004504:	3701      	adds	r7, #1
 8004506:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800450a:	1a9b      	subs	r3, r3, r2
 800450c:	eba3 0309 	sub.w	r3, r3, r9
 8004510:	42bb      	cmp	r3, r7
 8004512:	dcef      	bgt.n	80044f4 <_printf_float+0x378>
 8004514:	e74d      	b.n	80043b2 <_printf_float+0x236>
 8004516:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004518:	2a01      	cmp	r2, #1
 800451a:	dc01      	bgt.n	8004520 <_printf_float+0x3a4>
 800451c:	07db      	lsls	r3, r3, #31
 800451e:	d538      	bpl.n	8004592 <_printf_float+0x416>
 8004520:	2301      	movs	r3, #1
 8004522:	463a      	mov	r2, r7
 8004524:	4659      	mov	r1, fp
 8004526:	4628      	mov	r0, r5
 8004528:	47b0      	blx	r6
 800452a:	3001      	adds	r0, #1
 800452c:	f43f ae7d 	beq.w	800422a <_printf_float+0xae>
 8004530:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004534:	4659      	mov	r1, fp
 8004536:	4628      	mov	r0, r5
 8004538:	47b0      	blx	r6
 800453a:	3001      	adds	r0, #1
 800453c:	f107 0701 	add.w	r7, r7, #1
 8004540:	f43f ae73 	beq.w	800422a <_printf_float+0xae>
 8004544:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004548:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800454a:	2200      	movs	r2, #0
 800454c:	f103 38ff 	add.w	r8, r3, #4294967295
 8004550:	2300      	movs	r3, #0
 8004552:	f7fc fa29 	bl	80009a8 <__aeabi_dcmpeq>
 8004556:	b9c0      	cbnz	r0, 800458a <_printf_float+0x40e>
 8004558:	4643      	mov	r3, r8
 800455a:	463a      	mov	r2, r7
 800455c:	4659      	mov	r1, fp
 800455e:	4628      	mov	r0, r5
 8004560:	47b0      	blx	r6
 8004562:	3001      	adds	r0, #1
 8004564:	d10d      	bne.n	8004582 <_printf_float+0x406>
 8004566:	e660      	b.n	800422a <_printf_float+0xae>
 8004568:	2301      	movs	r3, #1
 800456a:	4642      	mov	r2, r8
 800456c:	4659      	mov	r1, fp
 800456e:	4628      	mov	r0, r5
 8004570:	47b0      	blx	r6
 8004572:	3001      	adds	r0, #1
 8004574:	f43f ae59 	beq.w	800422a <_printf_float+0xae>
 8004578:	3701      	adds	r7, #1
 800457a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800457c:	3b01      	subs	r3, #1
 800457e:	42bb      	cmp	r3, r7
 8004580:	dcf2      	bgt.n	8004568 <_printf_float+0x3ec>
 8004582:	464b      	mov	r3, r9
 8004584:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004588:	e6e4      	b.n	8004354 <_printf_float+0x1d8>
 800458a:	2700      	movs	r7, #0
 800458c:	f104 081a 	add.w	r8, r4, #26
 8004590:	e7f3      	b.n	800457a <_printf_float+0x3fe>
 8004592:	2301      	movs	r3, #1
 8004594:	e7e1      	b.n	800455a <_printf_float+0x3de>
 8004596:	2301      	movs	r3, #1
 8004598:	4642      	mov	r2, r8
 800459a:	4659      	mov	r1, fp
 800459c:	4628      	mov	r0, r5
 800459e:	47b0      	blx	r6
 80045a0:	3001      	adds	r0, #1
 80045a2:	f43f ae42 	beq.w	800422a <_printf_float+0xae>
 80045a6:	3701      	adds	r7, #1
 80045a8:	68e3      	ldr	r3, [r4, #12]
 80045aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	42bb      	cmp	r3, r7
 80045b0:	dcf1      	bgt.n	8004596 <_printf_float+0x41a>
 80045b2:	e702      	b.n	80043ba <_printf_float+0x23e>
 80045b4:	2700      	movs	r7, #0
 80045b6:	f104 0819 	add.w	r8, r4, #25
 80045ba:	e7f5      	b.n	80045a8 <_printf_float+0x42c>
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f43f ae94 	beq.w	80042ea <_printf_float+0x16e>
 80045c2:	f04f 0c00 	mov.w	ip, #0
 80045c6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80045ca:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80045ce:	6022      	str	r2, [r4, #0]
 80045d0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80045d4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	463a      	mov	r2, r7
 80045dc:	464b      	mov	r3, r9
 80045de:	4628      	mov	r0, r5
 80045e0:	f7ff fd3a 	bl	8004058 <__cvt>
 80045e4:	4607      	mov	r7, r0
 80045e6:	e64f      	b.n	8004288 <_printf_float+0x10c>

080045e8 <_printf_common>:
 80045e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045ec:	4691      	mov	r9, r2
 80045ee:	461f      	mov	r7, r3
 80045f0:	688a      	ldr	r2, [r1, #8]
 80045f2:	690b      	ldr	r3, [r1, #16]
 80045f4:	4606      	mov	r6, r0
 80045f6:	4293      	cmp	r3, r2
 80045f8:	bfb8      	it	lt
 80045fa:	4613      	movlt	r3, r2
 80045fc:	f8c9 3000 	str.w	r3, [r9]
 8004600:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004604:	460c      	mov	r4, r1
 8004606:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800460a:	b112      	cbz	r2, 8004612 <_printf_common+0x2a>
 800460c:	3301      	adds	r3, #1
 800460e:	f8c9 3000 	str.w	r3, [r9]
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	0699      	lsls	r1, r3, #26
 8004616:	bf42      	ittt	mi
 8004618:	f8d9 3000 	ldrmi.w	r3, [r9]
 800461c:	3302      	addmi	r3, #2
 800461e:	f8c9 3000 	strmi.w	r3, [r9]
 8004622:	6825      	ldr	r5, [r4, #0]
 8004624:	f015 0506 	ands.w	r5, r5, #6
 8004628:	d107      	bne.n	800463a <_printf_common+0x52>
 800462a:	f104 0a19 	add.w	sl, r4, #25
 800462e:	68e3      	ldr	r3, [r4, #12]
 8004630:	f8d9 2000 	ldr.w	r2, [r9]
 8004634:	1a9b      	subs	r3, r3, r2
 8004636:	42ab      	cmp	r3, r5
 8004638:	dc29      	bgt.n	800468e <_printf_common+0xa6>
 800463a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800463e:	6822      	ldr	r2, [r4, #0]
 8004640:	3300      	adds	r3, #0
 8004642:	bf18      	it	ne
 8004644:	2301      	movne	r3, #1
 8004646:	0692      	lsls	r2, r2, #26
 8004648:	d42e      	bmi.n	80046a8 <_printf_common+0xc0>
 800464a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800464e:	4639      	mov	r1, r7
 8004650:	4630      	mov	r0, r6
 8004652:	47c0      	blx	r8
 8004654:	3001      	adds	r0, #1
 8004656:	d021      	beq.n	800469c <_printf_common+0xb4>
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	68e5      	ldr	r5, [r4, #12]
 800465c:	f003 0306 	and.w	r3, r3, #6
 8004660:	2b04      	cmp	r3, #4
 8004662:	bf18      	it	ne
 8004664:	2500      	movne	r5, #0
 8004666:	f8d9 2000 	ldr.w	r2, [r9]
 800466a:	f04f 0900 	mov.w	r9, #0
 800466e:	bf08      	it	eq
 8004670:	1aad      	subeq	r5, r5, r2
 8004672:	68a3      	ldr	r3, [r4, #8]
 8004674:	6922      	ldr	r2, [r4, #16]
 8004676:	bf08      	it	eq
 8004678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800467c:	4293      	cmp	r3, r2
 800467e:	bfc4      	itt	gt
 8004680:	1a9b      	subgt	r3, r3, r2
 8004682:	18ed      	addgt	r5, r5, r3
 8004684:	341a      	adds	r4, #26
 8004686:	454d      	cmp	r5, r9
 8004688:	d11a      	bne.n	80046c0 <_printf_common+0xd8>
 800468a:	2000      	movs	r0, #0
 800468c:	e008      	b.n	80046a0 <_printf_common+0xb8>
 800468e:	2301      	movs	r3, #1
 8004690:	4652      	mov	r2, sl
 8004692:	4639      	mov	r1, r7
 8004694:	4630      	mov	r0, r6
 8004696:	47c0      	blx	r8
 8004698:	3001      	adds	r0, #1
 800469a:	d103      	bne.n	80046a4 <_printf_common+0xbc>
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
 80046a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a4:	3501      	adds	r5, #1
 80046a6:	e7c2      	b.n	800462e <_printf_common+0x46>
 80046a8:	2030      	movs	r0, #48	; 0x30
 80046aa:	18e1      	adds	r1, r4, r3
 80046ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046b6:	4422      	add	r2, r4
 80046b8:	3302      	adds	r3, #2
 80046ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046be:	e7c4      	b.n	800464a <_printf_common+0x62>
 80046c0:	2301      	movs	r3, #1
 80046c2:	4622      	mov	r2, r4
 80046c4:	4639      	mov	r1, r7
 80046c6:	4630      	mov	r0, r6
 80046c8:	47c0      	blx	r8
 80046ca:	3001      	adds	r0, #1
 80046cc:	d0e6      	beq.n	800469c <_printf_common+0xb4>
 80046ce:	f109 0901 	add.w	r9, r9, #1
 80046d2:	e7d8      	b.n	8004686 <_printf_common+0x9e>

080046d4 <_printf_i>:
 80046d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80046d8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80046dc:	460c      	mov	r4, r1
 80046de:	7e09      	ldrb	r1, [r1, #24]
 80046e0:	b085      	sub	sp, #20
 80046e2:	296e      	cmp	r1, #110	; 0x6e
 80046e4:	4617      	mov	r7, r2
 80046e6:	4606      	mov	r6, r0
 80046e8:	4698      	mov	r8, r3
 80046ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046ec:	f000 80b3 	beq.w	8004856 <_printf_i+0x182>
 80046f0:	d822      	bhi.n	8004738 <_printf_i+0x64>
 80046f2:	2963      	cmp	r1, #99	; 0x63
 80046f4:	d036      	beq.n	8004764 <_printf_i+0x90>
 80046f6:	d80a      	bhi.n	800470e <_printf_i+0x3a>
 80046f8:	2900      	cmp	r1, #0
 80046fa:	f000 80b9 	beq.w	8004870 <_printf_i+0x19c>
 80046fe:	2958      	cmp	r1, #88	; 0x58
 8004700:	f000 8083 	beq.w	800480a <_printf_i+0x136>
 8004704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004708:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800470c:	e032      	b.n	8004774 <_printf_i+0xa0>
 800470e:	2964      	cmp	r1, #100	; 0x64
 8004710:	d001      	beq.n	8004716 <_printf_i+0x42>
 8004712:	2969      	cmp	r1, #105	; 0x69
 8004714:	d1f6      	bne.n	8004704 <_printf_i+0x30>
 8004716:	6820      	ldr	r0, [r4, #0]
 8004718:	6813      	ldr	r3, [r2, #0]
 800471a:	0605      	lsls	r5, r0, #24
 800471c:	f103 0104 	add.w	r1, r3, #4
 8004720:	d52a      	bpl.n	8004778 <_printf_i+0xa4>
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6011      	str	r1, [r2, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	da03      	bge.n	8004732 <_printf_i+0x5e>
 800472a:	222d      	movs	r2, #45	; 0x2d
 800472c:	425b      	negs	r3, r3
 800472e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004732:	486f      	ldr	r0, [pc, #444]	; (80048f0 <_printf_i+0x21c>)
 8004734:	220a      	movs	r2, #10
 8004736:	e039      	b.n	80047ac <_printf_i+0xd8>
 8004738:	2973      	cmp	r1, #115	; 0x73
 800473a:	f000 809d 	beq.w	8004878 <_printf_i+0x1a4>
 800473e:	d808      	bhi.n	8004752 <_printf_i+0x7e>
 8004740:	296f      	cmp	r1, #111	; 0x6f
 8004742:	d020      	beq.n	8004786 <_printf_i+0xb2>
 8004744:	2970      	cmp	r1, #112	; 0x70
 8004746:	d1dd      	bne.n	8004704 <_printf_i+0x30>
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	f043 0320 	orr.w	r3, r3, #32
 800474e:	6023      	str	r3, [r4, #0]
 8004750:	e003      	b.n	800475a <_printf_i+0x86>
 8004752:	2975      	cmp	r1, #117	; 0x75
 8004754:	d017      	beq.n	8004786 <_printf_i+0xb2>
 8004756:	2978      	cmp	r1, #120	; 0x78
 8004758:	d1d4      	bne.n	8004704 <_printf_i+0x30>
 800475a:	2378      	movs	r3, #120	; 0x78
 800475c:	4865      	ldr	r0, [pc, #404]	; (80048f4 <_printf_i+0x220>)
 800475e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004762:	e055      	b.n	8004810 <_printf_i+0x13c>
 8004764:	6813      	ldr	r3, [r2, #0]
 8004766:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800476a:	1d19      	adds	r1, r3, #4
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6011      	str	r1, [r2, #0]
 8004770:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004774:	2301      	movs	r3, #1
 8004776:	e08c      	b.n	8004892 <_printf_i+0x1be>
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800477e:	6011      	str	r1, [r2, #0]
 8004780:	bf18      	it	ne
 8004782:	b21b      	sxthne	r3, r3
 8004784:	e7cf      	b.n	8004726 <_printf_i+0x52>
 8004786:	6813      	ldr	r3, [r2, #0]
 8004788:	6825      	ldr	r5, [r4, #0]
 800478a:	1d18      	adds	r0, r3, #4
 800478c:	6010      	str	r0, [r2, #0]
 800478e:	0628      	lsls	r0, r5, #24
 8004790:	d501      	bpl.n	8004796 <_printf_i+0xc2>
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	e002      	b.n	800479c <_printf_i+0xc8>
 8004796:	0668      	lsls	r0, r5, #25
 8004798:	d5fb      	bpl.n	8004792 <_printf_i+0xbe>
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	296f      	cmp	r1, #111	; 0x6f
 800479e:	bf14      	ite	ne
 80047a0:	220a      	movne	r2, #10
 80047a2:	2208      	moveq	r2, #8
 80047a4:	4852      	ldr	r0, [pc, #328]	; (80048f0 <_printf_i+0x21c>)
 80047a6:	2100      	movs	r1, #0
 80047a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047ac:	6865      	ldr	r5, [r4, #4]
 80047ae:	2d00      	cmp	r5, #0
 80047b0:	60a5      	str	r5, [r4, #8]
 80047b2:	f2c0 8095 	blt.w	80048e0 <_printf_i+0x20c>
 80047b6:	6821      	ldr	r1, [r4, #0]
 80047b8:	f021 0104 	bic.w	r1, r1, #4
 80047bc:	6021      	str	r1, [r4, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d13d      	bne.n	800483e <_printf_i+0x16a>
 80047c2:	2d00      	cmp	r5, #0
 80047c4:	f040 808e 	bne.w	80048e4 <_printf_i+0x210>
 80047c8:	4665      	mov	r5, ip
 80047ca:	2a08      	cmp	r2, #8
 80047cc:	d10b      	bne.n	80047e6 <_printf_i+0x112>
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	07db      	lsls	r3, r3, #31
 80047d2:	d508      	bpl.n	80047e6 <_printf_i+0x112>
 80047d4:	6923      	ldr	r3, [r4, #16]
 80047d6:	6862      	ldr	r2, [r4, #4]
 80047d8:	429a      	cmp	r2, r3
 80047da:	bfde      	ittt	le
 80047dc:	2330      	movle	r3, #48	; 0x30
 80047de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047e6:	ebac 0305 	sub.w	r3, ip, r5
 80047ea:	6123      	str	r3, [r4, #16]
 80047ec:	f8cd 8000 	str.w	r8, [sp]
 80047f0:	463b      	mov	r3, r7
 80047f2:	aa03      	add	r2, sp, #12
 80047f4:	4621      	mov	r1, r4
 80047f6:	4630      	mov	r0, r6
 80047f8:	f7ff fef6 	bl	80045e8 <_printf_common>
 80047fc:	3001      	adds	r0, #1
 80047fe:	d14d      	bne.n	800489c <_printf_i+0x1c8>
 8004800:	f04f 30ff 	mov.w	r0, #4294967295
 8004804:	b005      	add	sp, #20
 8004806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800480a:	4839      	ldr	r0, [pc, #228]	; (80048f0 <_printf_i+0x21c>)
 800480c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004810:	6813      	ldr	r3, [r2, #0]
 8004812:	6821      	ldr	r1, [r4, #0]
 8004814:	1d1d      	adds	r5, r3, #4
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6015      	str	r5, [r2, #0]
 800481a:	060a      	lsls	r2, r1, #24
 800481c:	d50b      	bpl.n	8004836 <_printf_i+0x162>
 800481e:	07ca      	lsls	r2, r1, #31
 8004820:	bf44      	itt	mi
 8004822:	f041 0120 	orrmi.w	r1, r1, #32
 8004826:	6021      	strmi	r1, [r4, #0]
 8004828:	b91b      	cbnz	r3, 8004832 <_printf_i+0x15e>
 800482a:	6822      	ldr	r2, [r4, #0]
 800482c:	f022 0220 	bic.w	r2, r2, #32
 8004830:	6022      	str	r2, [r4, #0]
 8004832:	2210      	movs	r2, #16
 8004834:	e7b7      	b.n	80047a6 <_printf_i+0xd2>
 8004836:	064d      	lsls	r5, r1, #25
 8004838:	bf48      	it	mi
 800483a:	b29b      	uxthmi	r3, r3
 800483c:	e7ef      	b.n	800481e <_printf_i+0x14a>
 800483e:	4665      	mov	r5, ip
 8004840:	fbb3 f1f2 	udiv	r1, r3, r2
 8004844:	fb02 3311 	mls	r3, r2, r1, r3
 8004848:	5cc3      	ldrb	r3, [r0, r3]
 800484a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800484e:	460b      	mov	r3, r1
 8004850:	2900      	cmp	r1, #0
 8004852:	d1f5      	bne.n	8004840 <_printf_i+0x16c>
 8004854:	e7b9      	b.n	80047ca <_printf_i+0xf6>
 8004856:	6813      	ldr	r3, [r2, #0]
 8004858:	6825      	ldr	r5, [r4, #0]
 800485a:	1d18      	adds	r0, r3, #4
 800485c:	6961      	ldr	r1, [r4, #20]
 800485e:	6010      	str	r0, [r2, #0]
 8004860:	0628      	lsls	r0, r5, #24
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	d501      	bpl.n	800486a <_printf_i+0x196>
 8004866:	6019      	str	r1, [r3, #0]
 8004868:	e002      	b.n	8004870 <_printf_i+0x19c>
 800486a:	066a      	lsls	r2, r5, #25
 800486c:	d5fb      	bpl.n	8004866 <_printf_i+0x192>
 800486e:	8019      	strh	r1, [r3, #0]
 8004870:	2300      	movs	r3, #0
 8004872:	4665      	mov	r5, ip
 8004874:	6123      	str	r3, [r4, #16]
 8004876:	e7b9      	b.n	80047ec <_printf_i+0x118>
 8004878:	6813      	ldr	r3, [r2, #0]
 800487a:	1d19      	adds	r1, r3, #4
 800487c:	6011      	str	r1, [r2, #0]
 800487e:	681d      	ldr	r5, [r3, #0]
 8004880:	6862      	ldr	r2, [r4, #4]
 8004882:	2100      	movs	r1, #0
 8004884:	4628      	mov	r0, r5
 8004886:	f000 feb1 	bl	80055ec <memchr>
 800488a:	b108      	cbz	r0, 8004890 <_printf_i+0x1bc>
 800488c:	1b40      	subs	r0, r0, r5
 800488e:	6060      	str	r0, [r4, #4]
 8004890:	6863      	ldr	r3, [r4, #4]
 8004892:	6123      	str	r3, [r4, #16]
 8004894:	2300      	movs	r3, #0
 8004896:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800489a:	e7a7      	b.n	80047ec <_printf_i+0x118>
 800489c:	6923      	ldr	r3, [r4, #16]
 800489e:	462a      	mov	r2, r5
 80048a0:	4639      	mov	r1, r7
 80048a2:	4630      	mov	r0, r6
 80048a4:	47c0      	blx	r8
 80048a6:	3001      	adds	r0, #1
 80048a8:	d0aa      	beq.n	8004800 <_printf_i+0x12c>
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	079b      	lsls	r3, r3, #30
 80048ae:	d413      	bmi.n	80048d8 <_printf_i+0x204>
 80048b0:	68e0      	ldr	r0, [r4, #12]
 80048b2:	9b03      	ldr	r3, [sp, #12]
 80048b4:	4298      	cmp	r0, r3
 80048b6:	bfb8      	it	lt
 80048b8:	4618      	movlt	r0, r3
 80048ba:	e7a3      	b.n	8004804 <_printf_i+0x130>
 80048bc:	2301      	movs	r3, #1
 80048be:	464a      	mov	r2, r9
 80048c0:	4639      	mov	r1, r7
 80048c2:	4630      	mov	r0, r6
 80048c4:	47c0      	blx	r8
 80048c6:	3001      	adds	r0, #1
 80048c8:	d09a      	beq.n	8004800 <_printf_i+0x12c>
 80048ca:	3501      	adds	r5, #1
 80048cc:	68e3      	ldr	r3, [r4, #12]
 80048ce:	9a03      	ldr	r2, [sp, #12]
 80048d0:	1a9b      	subs	r3, r3, r2
 80048d2:	42ab      	cmp	r3, r5
 80048d4:	dcf2      	bgt.n	80048bc <_printf_i+0x1e8>
 80048d6:	e7eb      	b.n	80048b0 <_printf_i+0x1dc>
 80048d8:	2500      	movs	r5, #0
 80048da:	f104 0919 	add.w	r9, r4, #25
 80048de:	e7f5      	b.n	80048cc <_printf_i+0x1f8>
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1ac      	bne.n	800483e <_printf_i+0x16a>
 80048e4:	7803      	ldrb	r3, [r0, #0]
 80048e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048ee:	e76c      	b.n	80047ca <_printf_i+0xf6>
 80048f0:	0800614e 	.word	0x0800614e
 80048f4:	0800615f 	.word	0x0800615f

080048f8 <siprintf>:
 80048f8:	b40e      	push	{r1, r2, r3}
 80048fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048fe:	b500      	push	{lr}
 8004900:	b09c      	sub	sp, #112	; 0x70
 8004902:	ab1d      	add	r3, sp, #116	; 0x74
 8004904:	9002      	str	r0, [sp, #8]
 8004906:	9006      	str	r0, [sp, #24]
 8004908:	9107      	str	r1, [sp, #28]
 800490a:	9104      	str	r1, [sp, #16]
 800490c:	4808      	ldr	r0, [pc, #32]	; (8004930 <siprintf+0x38>)
 800490e:	4909      	ldr	r1, [pc, #36]	; (8004934 <siprintf+0x3c>)
 8004910:	f853 2b04 	ldr.w	r2, [r3], #4
 8004914:	9105      	str	r1, [sp, #20]
 8004916:	6800      	ldr	r0, [r0, #0]
 8004918:	a902      	add	r1, sp, #8
 800491a:	9301      	str	r3, [sp, #4]
 800491c:	f001 fa6a 	bl	8005df4 <_svfiprintf_r>
 8004920:	2200      	movs	r2, #0
 8004922:	9b02      	ldr	r3, [sp, #8]
 8004924:	701a      	strb	r2, [r3, #0]
 8004926:	b01c      	add	sp, #112	; 0x70
 8004928:	f85d eb04 	ldr.w	lr, [sp], #4
 800492c:	b003      	add	sp, #12
 800492e:	4770      	bx	lr
 8004930:	2000000c 	.word	0x2000000c
 8004934:	ffff0208 	.word	0xffff0208

08004938 <quorem>:
 8004938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800493c:	6903      	ldr	r3, [r0, #16]
 800493e:	690c      	ldr	r4, [r1, #16]
 8004940:	4680      	mov	r8, r0
 8004942:	42a3      	cmp	r3, r4
 8004944:	f2c0 8084 	blt.w	8004a50 <quorem+0x118>
 8004948:	3c01      	subs	r4, #1
 800494a:	f101 0714 	add.w	r7, r1, #20
 800494e:	f100 0614 	add.w	r6, r0, #20
 8004952:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004956:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800495a:	3501      	adds	r5, #1
 800495c:	fbb0 f5f5 	udiv	r5, r0, r5
 8004960:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004964:	eb06 030c 	add.w	r3, r6, ip
 8004968:	eb07 090c 	add.w	r9, r7, ip
 800496c:	9301      	str	r3, [sp, #4]
 800496e:	b39d      	cbz	r5, 80049d8 <quorem+0xa0>
 8004970:	f04f 0a00 	mov.w	sl, #0
 8004974:	4638      	mov	r0, r7
 8004976:	46b6      	mov	lr, r6
 8004978:	46d3      	mov	fp, sl
 800497a:	f850 2b04 	ldr.w	r2, [r0], #4
 800497e:	b293      	uxth	r3, r2
 8004980:	fb05 a303 	mla	r3, r5, r3, sl
 8004984:	0c12      	lsrs	r2, r2, #16
 8004986:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800498a:	fb05 a202 	mla	r2, r5, r2, sl
 800498e:	b29b      	uxth	r3, r3
 8004990:	ebab 0303 	sub.w	r3, fp, r3
 8004994:	f8de b000 	ldr.w	fp, [lr]
 8004998:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800499c:	fa1f fb8b 	uxth.w	fp, fp
 80049a0:	445b      	add	r3, fp
 80049a2:	fa1f fb82 	uxth.w	fp, r2
 80049a6:	f8de 2000 	ldr.w	r2, [lr]
 80049aa:	4581      	cmp	r9, r0
 80049ac:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80049b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049ba:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80049be:	f84e 3b04 	str.w	r3, [lr], #4
 80049c2:	d2da      	bcs.n	800497a <quorem+0x42>
 80049c4:	f856 300c 	ldr.w	r3, [r6, ip]
 80049c8:	b933      	cbnz	r3, 80049d8 <quorem+0xa0>
 80049ca:	9b01      	ldr	r3, [sp, #4]
 80049cc:	3b04      	subs	r3, #4
 80049ce:	429e      	cmp	r6, r3
 80049d0:	461a      	mov	r2, r3
 80049d2:	d331      	bcc.n	8004a38 <quorem+0x100>
 80049d4:	f8c8 4010 	str.w	r4, [r8, #16]
 80049d8:	4640      	mov	r0, r8
 80049da:	f001 f835 	bl	8005a48 <__mcmp>
 80049de:	2800      	cmp	r0, #0
 80049e0:	db26      	blt.n	8004a30 <quorem+0xf8>
 80049e2:	4630      	mov	r0, r6
 80049e4:	f04f 0c00 	mov.w	ip, #0
 80049e8:	3501      	adds	r5, #1
 80049ea:	f857 1b04 	ldr.w	r1, [r7], #4
 80049ee:	f8d0 e000 	ldr.w	lr, [r0]
 80049f2:	b28b      	uxth	r3, r1
 80049f4:	ebac 0303 	sub.w	r3, ip, r3
 80049f8:	fa1f f28e 	uxth.w	r2, lr
 80049fc:	4413      	add	r3, r2
 80049fe:	0c0a      	lsrs	r2, r1, #16
 8004a00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a0e:	45b9      	cmp	r9, r7
 8004a10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a14:	f840 3b04 	str.w	r3, [r0], #4
 8004a18:	d2e7      	bcs.n	80049ea <quorem+0xb2>
 8004a1a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004a1e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004a22:	b92a      	cbnz	r2, 8004a30 <quorem+0xf8>
 8004a24:	3b04      	subs	r3, #4
 8004a26:	429e      	cmp	r6, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	d30b      	bcc.n	8004a44 <quorem+0x10c>
 8004a2c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004a30:	4628      	mov	r0, r5
 8004a32:	b003      	add	sp, #12
 8004a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a38:	6812      	ldr	r2, [r2, #0]
 8004a3a:	3b04      	subs	r3, #4
 8004a3c:	2a00      	cmp	r2, #0
 8004a3e:	d1c9      	bne.n	80049d4 <quorem+0x9c>
 8004a40:	3c01      	subs	r4, #1
 8004a42:	e7c4      	b.n	80049ce <quorem+0x96>
 8004a44:	6812      	ldr	r2, [r2, #0]
 8004a46:	3b04      	subs	r3, #4
 8004a48:	2a00      	cmp	r2, #0
 8004a4a:	d1ef      	bne.n	8004a2c <quorem+0xf4>
 8004a4c:	3c01      	subs	r4, #1
 8004a4e:	e7ea      	b.n	8004a26 <quorem+0xee>
 8004a50:	2000      	movs	r0, #0
 8004a52:	e7ee      	b.n	8004a32 <quorem+0xfa>
 8004a54:	0000      	movs	r0, r0
	...

08004a58 <_dtoa_r>:
 8004a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a5c:	4616      	mov	r6, r2
 8004a5e:	461f      	mov	r7, r3
 8004a60:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004a62:	b095      	sub	sp, #84	; 0x54
 8004a64:	4604      	mov	r4, r0
 8004a66:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004a6a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004a6e:	b93d      	cbnz	r5, 8004a80 <_dtoa_r+0x28>
 8004a70:	2010      	movs	r0, #16
 8004a72:	f000 fdb3 	bl	80055dc <malloc>
 8004a76:	6260      	str	r0, [r4, #36]	; 0x24
 8004a78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004a7c:	6005      	str	r5, [r0, #0]
 8004a7e:	60c5      	str	r5, [r0, #12]
 8004a80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a82:	6819      	ldr	r1, [r3, #0]
 8004a84:	b151      	cbz	r1, 8004a9c <_dtoa_r+0x44>
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	2301      	movs	r3, #1
 8004a8a:	4093      	lsls	r3, r2
 8004a8c:	604a      	str	r2, [r1, #4]
 8004a8e:	608b      	str	r3, [r1, #8]
 8004a90:	4620      	mov	r0, r4
 8004a92:	f000 fdf8 	bl	8005686 <_Bfree>
 8004a96:	2200      	movs	r2, #0
 8004a98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	1e3b      	subs	r3, r7, #0
 8004a9e:	bfaf      	iteee	ge
 8004aa0:	2300      	movge	r3, #0
 8004aa2:	2201      	movlt	r2, #1
 8004aa4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004aa8:	9303      	strlt	r3, [sp, #12]
 8004aaa:	bfac      	ite	ge
 8004aac:	f8c8 3000 	strge.w	r3, [r8]
 8004ab0:	f8c8 2000 	strlt.w	r2, [r8]
 8004ab4:	4bae      	ldr	r3, [pc, #696]	; (8004d70 <_dtoa_r+0x318>)
 8004ab6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004aba:	ea33 0308 	bics.w	r3, r3, r8
 8004abe:	d11b      	bne.n	8004af8 <_dtoa_r+0xa0>
 8004ac0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ac4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	9b02      	ldr	r3, [sp, #8]
 8004aca:	b923      	cbnz	r3, 8004ad6 <_dtoa_r+0x7e>
 8004acc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	f000 8545 	beq.w	8005560 <_dtoa_r+0xb08>
 8004ad6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ad8:	b953      	cbnz	r3, 8004af0 <_dtoa_r+0x98>
 8004ada:	4ba6      	ldr	r3, [pc, #664]	; (8004d74 <_dtoa_r+0x31c>)
 8004adc:	e021      	b.n	8004b22 <_dtoa_r+0xca>
 8004ade:	4ba6      	ldr	r3, [pc, #664]	; (8004d78 <_dtoa_r+0x320>)
 8004ae0:	9306      	str	r3, [sp, #24]
 8004ae2:	3308      	adds	r3, #8
 8004ae4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	9806      	ldr	r0, [sp, #24]
 8004aea:	b015      	add	sp, #84	; 0x54
 8004aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004af0:	4ba0      	ldr	r3, [pc, #640]	; (8004d74 <_dtoa_r+0x31c>)
 8004af2:	9306      	str	r3, [sp, #24]
 8004af4:	3303      	adds	r3, #3
 8004af6:	e7f5      	b.n	8004ae4 <_dtoa_r+0x8c>
 8004af8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004afc:	2200      	movs	r2, #0
 8004afe:	2300      	movs	r3, #0
 8004b00:	4630      	mov	r0, r6
 8004b02:	4639      	mov	r1, r7
 8004b04:	f7fb ff50 	bl	80009a8 <__aeabi_dcmpeq>
 8004b08:	4682      	mov	sl, r0
 8004b0a:	b160      	cbz	r0, 8004b26 <_dtoa_r+0xce>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8520 	beq.w	800555a <_dtoa_r+0xb02>
 8004b1a:	4b98      	ldr	r3, [pc, #608]	; (8004d7c <_dtoa_r+0x324>)
 8004b1c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	9306      	str	r3, [sp, #24]
 8004b24:	e7e0      	b.n	8004ae8 <_dtoa_r+0x90>
 8004b26:	ab12      	add	r3, sp, #72	; 0x48
 8004b28:	9301      	str	r3, [sp, #4]
 8004b2a:	ab13      	add	r3, sp, #76	; 0x4c
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	4632      	mov	r2, r6
 8004b30:	463b      	mov	r3, r7
 8004b32:	4620      	mov	r0, r4
 8004b34:	f001 f800 	bl	8005b38 <__d2b>
 8004b38:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004b3c:	4683      	mov	fp, r0
 8004b3e:	2d00      	cmp	r5, #0
 8004b40:	d07d      	beq.n	8004c3e <_dtoa_r+0x1e6>
 8004b42:	46b0      	mov	r8, r6
 8004b44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004b48:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004b4c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004b50:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004b54:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004b58:	2200      	movs	r2, #0
 8004b5a:	4b89      	ldr	r3, [pc, #548]	; (8004d80 <_dtoa_r+0x328>)
 8004b5c:	4640      	mov	r0, r8
 8004b5e:	4649      	mov	r1, r9
 8004b60:	f7fb fb02 	bl	8000168 <__aeabi_dsub>
 8004b64:	a37c      	add	r3, pc, #496	; (adr r3, 8004d58 <_dtoa_r+0x300>)
 8004b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6a:	f7fb fcb5 	bl	80004d8 <__aeabi_dmul>
 8004b6e:	a37c      	add	r3, pc, #496	; (adr r3, 8004d60 <_dtoa_r+0x308>)
 8004b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b74:	f7fb fafa 	bl	800016c <__adddf3>
 8004b78:	4606      	mov	r6, r0
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	460f      	mov	r7, r1
 8004b7e:	f7fb fc41 	bl	8000404 <__aeabi_i2d>
 8004b82:	a379      	add	r3, pc, #484	; (adr r3, 8004d68 <_dtoa_r+0x310>)
 8004b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b88:	f7fb fca6 	bl	80004d8 <__aeabi_dmul>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4630      	mov	r0, r6
 8004b92:	4639      	mov	r1, r7
 8004b94:	f7fb faea 	bl	800016c <__adddf3>
 8004b98:	4606      	mov	r6, r0
 8004b9a:	460f      	mov	r7, r1
 8004b9c:	f7fb ff4c 	bl	8000a38 <__aeabi_d2iz>
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	4682      	mov	sl, r0
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	4639      	mov	r1, r7
 8004baa:	f7fb ff07 	bl	80009bc <__aeabi_dcmplt>
 8004bae:	b148      	cbz	r0, 8004bc4 <_dtoa_r+0x16c>
 8004bb0:	4650      	mov	r0, sl
 8004bb2:	f7fb fc27 	bl	8000404 <__aeabi_i2d>
 8004bb6:	4632      	mov	r2, r6
 8004bb8:	463b      	mov	r3, r7
 8004bba:	f7fb fef5 	bl	80009a8 <__aeabi_dcmpeq>
 8004bbe:	b908      	cbnz	r0, 8004bc4 <_dtoa_r+0x16c>
 8004bc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004bc4:	f1ba 0f16 	cmp.w	sl, #22
 8004bc8:	d85a      	bhi.n	8004c80 <_dtoa_r+0x228>
 8004bca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bce:	496d      	ldr	r1, [pc, #436]	; (8004d84 <_dtoa_r+0x32c>)
 8004bd0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bd8:	f7fb ff0e 	bl	80009f8 <__aeabi_dcmpgt>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d051      	beq.n	8004c84 <_dtoa_r+0x22c>
 8004be0:	2300      	movs	r3, #0
 8004be2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004be6:	930d      	str	r3, [sp, #52]	; 0x34
 8004be8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004bea:	1b5d      	subs	r5, r3, r5
 8004bec:	1e6b      	subs	r3, r5, #1
 8004bee:	9307      	str	r3, [sp, #28]
 8004bf0:	bf43      	ittte	mi
 8004bf2:	2300      	movmi	r3, #0
 8004bf4:	f1c5 0901 	rsbmi	r9, r5, #1
 8004bf8:	9307      	strmi	r3, [sp, #28]
 8004bfa:	f04f 0900 	movpl.w	r9, #0
 8004bfe:	f1ba 0f00 	cmp.w	sl, #0
 8004c02:	db41      	blt.n	8004c88 <_dtoa_r+0x230>
 8004c04:	9b07      	ldr	r3, [sp, #28]
 8004c06:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004c0a:	4453      	add	r3, sl
 8004c0c:	9307      	str	r3, [sp, #28]
 8004c0e:	2300      	movs	r3, #0
 8004c10:	9308      	str	r3, [sp, #32]
 8004c12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004c14:	2b09      	cmp	r3, #9
 8004c16:	f200 808f 	bhi.w	8004d38 <_dtoa_r+0x2e0>
 8004c1a:	2b05      	cmp	r3, #5
 8004c1c:	bfc4      	itt	gt
 8004c1e:	3b04      	subgt	r3, #4
 8004c20:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004c22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004c24:	bfc8      	it	gt
 8004c26:	2500      	movgt	r5, #0
 8004c28:	f1a3 0302 	sub.w	r3, r3, #2
 8004c2c:	bfd8      	it	le
 8004c2e:	2501      	movle	r5, #1
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	f200 808d 	bhi.w	8004d50 <_dtoa_r+0x2f8>
 8004c36:	e8df f003 	tbb	[pc, r3]
 8004c3a:	7d7b      	.short	0x7d7b
 8004c3c:	6f2f      	.short	0x6f2f
 8004c3e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004c42:	441d      	add	r5, r3
 8004c44:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004c48:	2820      	cmp	r0, #32
 8004c4a:	dd13      	ble.n	8004c74 <_dtoa_r+0x21c>
 8004c4c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004c50:	9b02      	ldr	r3, [sp, #8]
 8004c52:	fa08 f800 	lsl.w	r8, r8, r0
 8004c56:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004c5a:	fa23 f000 	lsr.w	r0, r3, r0
 8004c5e:	ea48 0000 	orr.w	r0, r8, r0
 8004c62:	f7fb fbbf 	bl	80003e4 <__aeabi_ui2d>
 8004c66:	2301      	movs	r3, #1
 8004c68:	4680      	mov	r8, r0
 8004c6a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004c6e:	3d01      	subs	r5, #1
 8004c70:	9310      	str	r3, [sp, #64]	; 0x40
 8004c72:	e771      	b.n	8004b58 <_dtoa_r+0x100>
 8004c74:	9b02      	ldr	r3, [sp, #8]
 8004c76:	f1c0 0020 	rsb	r0, r0, #32
 8004c7a:	fa03 f000 	lsl.w	r0, r3, r0
 8004c7e:	e7f0      	b.n	8004c62 <_dtoa_r+0x20a>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e7b0      	b.n	8004be6 <_dtoa_r+0x18e>
 8004c84:	900d      	str	r0, [sp, #52]	; 0x34
 8004c86:	e7af      	b.n	8004be8 <_dtoa_r+0x190>
 8004c88:	f1ca 0300 	rsb	r3, sl, #0
 8004c8c:	9308      	str	r3, [sp, #32]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	eba9 090a 	sub.w	r9, r9, sl
 8004c94:	930c      	str	r3, [sp, #48]	; 0x30
 8004c96:	e7bc      	b.n	8004c12 <_dtoa_r+0x1ba>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	dd74      	ble.n	8004d8c <_dtoa_r+0x334>
 8004ca2:	4698      	mov	r8, r3
 8004ca4:	9304      	str	r3, [sp, #16]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004caa:	6072      	str	r2, [r6, #4]
 8004cac:	2204      	movs	r2, #4
 8004cae:	f102 0014 	add.w	r0, r2, #20
 8004cb2:	4298      	cmp	r0, r3
 8004cb4:	6871      	ldr	r1, [r6, #4]
 8004cb6:	d96e      	bls.n	8004d96 <_dtoa_r+0x33e>
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f000 fcb0 	bl	800561e <_Balloc>
 8004cbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cc0:	6030      	str	r0, [r6, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f1b8 0f0e 	cmp.w	r8, #14
 8004cc8:	9306      	str	r3, [sp, #24]
 8004cca:	f200 80ed 	bhi.w	8004ea8 <_dtoa_r+0x450>
 8004cce:	2d00      	cmp	r5, #0
 8004cd0:	f000 80ea 	beq.w	8004ea8 <_dtoa_r+0x450>
 8004cd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cd8:	f1ba 0f00 	cmp.w	sl, #0
 8004cdc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004ce0:	dd77      	ble.n	8004dd2 <_dtoa_r+0x37a>
 8004ce2:	4a28      	ldr	r2, [pc, #160]	; (8004d84 <_dtoa_r+0x32c>)
 8004ce4:	f00a 030f 	and.w	r3, sl, #15
 8004ce8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004cec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004cf0:	06f0      	lsls	r0, r6, #27
 8004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004cfa:	d568      	bpl.n	8004dce <_dtoa_r+0x376>
 8004cfc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004d00:	4b21      	ldr	r3, [pc, #132]	; (8004d88 <_dtoa_r+0x330>)
 8004d02:	2503      	movs	r5, #3
 8004d04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d08:	f7fb fd10 	bl	800072c <__aeabi_ddiv>
 8004d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d10:	f006 060f 	and.w	r6, r6, #15
 8004d14:	4f1c      	ldr	r7, [pc, #112]	; (8004d88 <_dtoa_r+0x330>)
 8004d16:	e04f      	b.n	8004db8 <_dtoa_r+0x360>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d1e:	4453      	add	r3, sl
 8004d20:	f103 0801 	add.w	r8, r3, #1
 8004d24:	9304      	str	r3, [sp, #16]
 8004d26:	4643      	mov	r3, r8
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	bfb8      	it	lt
 8004d2c:	2301      	movlt	r3, #1
 8004d2e:	e7ba      	b.n	8004ca6 <_dtoa_r+0x24e>
 8004d30:	2300      	movs	r3, #0
 8004d32:	e7b2      	b.n	8004c9a <_dtoa_r+0x242>
 8004d34:	2300      	movs	r3, #0
 8004d36:	e7f0      	b.n	8004d1a <_dtoa_r+0x2c2>
 8004d38:	2501      	movs	r5, #1
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	9509      	str	r5, [sp, #36]	; 0x24
 8004d3e:	931e      	str	r3, [sp, #120]	; 0x78
 8004d40:	f04f 33ff 	mov.w	r3, #4294967295
 8004d44:	2200      	movs	r2, #0
 8004d46:	9304      	str	r3, [sp, #16]
 8004d48:	4698      	mov	r8, r3
 8004d4a:	2312      	movs	r3, #18
 8004d4c:	921f      	str	r2, [sp, #124]	; 0x7c
 8004d4e:	e7aa      	b.n	8004ca6 <_dtoa_r+0x24e>
 8004d50:	2301      	movs	r3, #1
 8004d52:	9309      	str	r3, [sp, #36]	; 0x24
 8004d54:	e7f4      	b.n	8004d40 <_dtoa_r+0x2e8>
 8004d56:	bf00      	nop
 8004d58:	636f4361 	.word	0x636f4361
 8004d5c:	3fd287a7 	.word	0x3fd287a7
 8004d60:	8b60c8b3 	.word	0x8b60c8b3
 8004d64:	3fc68a28 	.word	0x3fc68a28
 8004d68:	509f79fb 	.word	0x509f79fb
 8004d6c:	3fd34413 	.word	0x3fd34413
 8004d70:	7ff00000 	.word	0x7ff00000
 8004d74:	08006179 	.word	0x08006179
 8004d78:	08006170 	.word	0x08006170
 8004d7c:	0800614d 	.word	0x0800614d
 8004d80:	3ff80000 	.word	0x3ff80000
 8004d84:	080061a8 	.word	0x080061a8
 8004d88:	08006180 	.word	0x08006180
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	9304      	str	r3, [sp, #16]
 8004d90:	4698      	mov	r8, r3
 8004d92:	461a      	mov	r2, r3
 8004d94:	e7da      	b.n	8004d4c <_dtoa_r+0x2f4>
 8004d96:	3101      	adds	r1, #1
 8004d98:	6071      	str	r1, [r6, #4]
 8004d9a:	0052      	lsls	r2, r2, #1
 8004d9c:	e787      	b.n	8004cae <_dtoa_r+0x256>
 8004d9e:	07f1      	lsls	r1, r6, #31
 8004da0:	d508      	bpl.n	8004db4 <_dtoa_r+0x35c>
 8004da2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004da6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004daa:	f7fb fb95 	bl	80004d8 <__aeabi_dmul>
 8004dae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004db2:	3501      	adds	r5, #1
 8004db4:	1076      	asrs	r6, r6, #1
 8004db6:	3708      	adds	r7, #8
 8004db8:	2e00      	cmp	r6, #0
 8004dba:	d1f0      	bne.n	8004d9e <_dtoa_r+0x346>
 8004dbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004dc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dc4:	f7fb fcb2 	bl	800072c <__aeabi_ddiv>
 8004dc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dcc:	e01b      	b.n	8004e06 <_dtoa_r+0x3ae>
 8004dce:	2502      	movs	r5, #2
 8004dd0:	e7a0      	b.n	8004d14 <_dtoa_r+0x2bc>
 8004dd2:	f000 80a4 	beq.w	8004f1e <_dtoa_r+0x4c6>
 8004dd6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004dda:	f1ca 0600 	rsb	r6, sl, #0
 8004dde:	4ba0      	ldr	r3, [pc, #640]	; (8005060 <_dtoa_r+0x608>)
 8004de0:	f006 020f 	and.w	r2, r6, #15
 8004de4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dec:	f7fb fb74 	bl	80004d8 <__aeabi_dmul>
 8004df0:	2502      	movs	r5, #2
 8004df2:	2300      	movs	r3, #0
 8004df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004df8:	4f9a      	ldr	r7, [pc, #616]	; (8005064 <_dtoa_r+0x60c>)
 8004dfa:	1136      	asrs	r6, r6, #4
 8004dfc:	2e00      	cmp	r6, #0
 8004dfe:	f040 8083 	bne.w	8004f08 <_dtoa_r+0x4b0>
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1e0      	bne.n	8004dc8 <_dtoa_r+0x370>
 8004e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 808a 	beq.w	8004f22 <_dtoa_r+0x4ca>
 8004e0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e12:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004e16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	4b92      	ldr	r3, [pc, #584]	; (8005068 <_dtoa_r+0x610>)
 8004e1e:	f7fb fdcd 	bl	80009bc <__aeabi_dcmplt>
 8004e22:	2800      	cmp	r0, #0
 8004e24:	d07d      	beq.n	8004f22 <_dtoa_r+0x4ca>
 8004e26:	f1b8 0f00 	cmp.w	r8, #0
 8004e2a:	d07a      	beq.n	8004f22 <_dtoa_r+0x4ca>
 8004e2c:	9b04      	ldr	r3, [sp, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	dd36      	ble.n	8004ea0 <_dtoa_r+0x448>
 8004e32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e36:	2200      	movs	r2, #0
 8004e38:	4b8c      	ldr	r3, [pc, #560]	; (800506c <_dtoa_r+0x614>)
 8004e3a:	f7fb fb4d 	bl	80004d8 <__aeabi_dmul>
 8004e3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e42:	9e04      	ldr	r6, [sp, #16]
 8004e44:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004e48:	3501      	adds	r5, #1
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	f7fb fada 	bl	8000404 <__aeabi_i2d>
 8004e50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e54:	f7fb fb40 	bl	80004d8 <__aeabi_dmul>
 8004e58:	2200      	movs	r2, #0
 8004e5a:	4b85      	ldr	r3, [pc, #532]	; (8005070 <_dtoa_r+0x618>)
 8004e5c:	f7fb f986 	bl	800016c <__adddf3>
 8004e60:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004e64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004e68:	950b      	str	r5, [sp, #44]	; 0x2c
 8004e6a:	2e00      	cmp	r6, #0
 8004e6c:	d15c      	bne.n	8004f28 <_dtoa_r+0x4d0>
 8004e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e72:	2200      	movs	r2, #0
 8004e74:	4b7f      	ldr	r3, [pc, #508]	; (8005074 <_dtoa_r+0x61c>)
 8004e76:	f7fb f977 	bl	8000168 <__aeabi_dsub>
 8004e7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e7c:	462b      	mov	r3, r5
 8004e7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e82:	f7fb fdb9 	bl	80009f8 <__aeabi_dcmpgt>
 8004e86:	2800      	cmp	r0, #0
 8004e88:	f040 8281 	bne.w	800538e <_dtoa_r+0x936>
 8004e8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e92:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004e96:	f7fb fd91 	bl	80009bc <__aeabi_dcmplt>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	f040 8275 	bne.w	800538a <_dtoa_r+0x932>
 8004ea0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004ea4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ea8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f2c0 814b 	blt.w	8005146 <_dtoa_r+0x6ee>
 8004eb0:	f1ba 0f0e 	cmp.w	sl, #14
 8004eb4:	f300 8147 	bgt.w	8005146 <_dtoa_r+0x6ee>
 8004eb8:	4b69      	ldr	r3, [pc, #420]	; (8005060 <_dtoa_r+0x608>)
 8004eba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ec6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f280 80d7 	bge.w	800507c <_dtoa_r+0x624>
 8004ece:	f1b8 0f00 	cmp.w	r8, #0
 8004ed2:	f300 80d3 	bgt.w	800507c <_dtoa_r+0x624>
 8004ed6:	f040 8257 	bne.w	8005388 <_dtoa_r+0x930>
 8004eda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	4b64      	ldr	r3, [pc, #400]	; (8005074 <_dtoa_r+0x61c>)
 8004ee2:	f7fb faf9 	bl	80004d8 <__aeabi_dmul>
 8004ee6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004eea:	f7fb fd7b 	bl	80009e4 <__aeabi_dcmpge>
 8004eee:	4646      	mov	r6, r8
 8004ef0:	4647      	mov	r7, r8
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	f040 822d 	bne.w	8005352 <_dtoa_r+0x8fa>
 8004ef8:	9b06      	ldr	r3, [sp, #24]
 8004efa:	9a06      	ldr	r2, [sp, #24]
 8004efc:	1c5d      	adds	r5, r3, #1
 8004efe:	2331      	movs	r3, #49	; 0x31
 8004f00:	f10a 0a01 	add.w	sl, sl, #1
 8004f04:	7013      	strb	r3, [r2, #0]
 8004f06:	e228      	b.n	800535a <_dtoa_r+0x902>
 8004f08:	07f2      	lsls	r2, r6, #31
 8004f0a:	d505      	bpl.n	8004f18 <_dtoa_r+0x4c0>
 8004f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f10:	f7fb fae2 	bl	80004d8 <__aeabi_dmul>
 8004f14:	2301      	movs	r3, #1
 8004f16:	3501      	adds	r5, #1
 8004f18:	1076      	asrs	r6, r6, #1
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	e76e      	b.n	8004dfc <_dtoa_r+0x3a4>
 8004f1e:	2502      	movs	r5, #2
 8004f20:	e771      	b.n	8004e06 <_dtoa_r+0x3ae>
 8004f22:	4657      	mov	r7, sl
 8004f24:	4646      	mov	r6, r8
 8004f26:	e790      	b.n	8004e4a <_dtoa_r+0x3f2>
 8004f28:	4b4d      	ldr	r3, [pc, #308]	; (8005060 <_dtoa_r+0x608>)
 8004f2a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004f2e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d048      	beq.n	8004fca <_dtoa_r+0x572>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	494e      	ldr	r1, [pc, #312]	; (8005078 <_dtoa_r+0x620>)
 8004f40:	f7fb fbf4 	bl	800072c <__aeabi_ddiv>
 8004f44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004f48:	f7fb f90e 	bl	8000168 <__aeabi_dsub>
 8004f4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004f50:	9d06      	ldr	r5, [sp, #24]
 8004f52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f56:	f7fb fd6f 	bl	8000a38 <__aeabi_d2iz>
 8004f5a:	9011      	str	r0, [sp, #68]	; 0x44
 8004f5c:	f7fb fa52 	bl	8000404 <__aeabi_i2d>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f68:	f7fb f8fe 	bl	8000168 <__aeabi_dsub>
 8004f6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f72:	3330      	adds	r3, #48	; 0x30
 8004f74:	f805 3b01 	strb.w	r3, [r5], #1
 8004f78:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004f7c:	f7fb fd1e 	bl	80009bc <__aeabi_dcmplt>
 8004f80:	2800      	cmp	r0, #0
 8004f82:	d163      	bne.n	800504c <_dtoa_r+0x5f4>
 8004f84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f88:	2000      	movs	r0, #0
 8004f8a:	4937      	ldr	r1, [pc, #220]	; (8005068 <_dtoa_r+0x610>)
 8004f8c:	f7fb f8ec 	bl	8000168 <__aeabi_dsub>
 8004f90:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004f94:	f7fb fd12 	bl	80009bc <__aeabi_dcmplt>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	f040 80b5 	bne.w	8005108 <_dtoa_r+0x6b0>
 8004f9e:	9b06      	ldr	r3, [sp, #24]
 8004fa0:	1aeb      	subs	r3, r5, r3
 8004fa2:	429e      	cmp	r6, r3
 8004fa4:	f77f af7c 	ble.w	8004ea0 <_dtoa_r+0x448>
 8004fa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004fac:	2200      	movs	r2, #0
 8004fae:	4b2f      	ldr	r3, [pc, #188]	; (800506c <_dtoa_r+0x614>)
 8004fb0:	f7fb fa92 	bl	80004d8 <__aeabi_dmul>
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004fba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fbe:	4b2b      	ldr	r3, [pc, #172]	; (800506c <_dtoa_r+0x614>)
 8004fc0:	f7fb fa8a 	bl	80004d8 <__aeabi_dmul>
 8004fc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fc8:	e7c3      	b.n	8004f52 <_dtoa_r+0x4fa>
 8004fca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004fce:	f7fb fa83 	bl	80004d8 <__aeabi_dmul>
 8004fd2:	9b06      	ldr	r3, [sp, #24]
 8004fd4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004fd8:	199d      	adds	r5, r3, r6
 8004fda:	461e      	mov	r6, r3
 8004fdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fe0:	f7fb fd2a 	bl	8000a38 <__aeabi_d2iz>
 8004fe4:	9011      	str	r0, [sp, #68]	; 0x44
 8004fe6:	f7fb fa0d 	bl	8000404 <__aeabi_i2d>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ff2:	f7fb f8b9 	bl	8000168 <__aeabi_dsub>
 8004ff6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ffc:	3330      	adds	r3, #48	; 0x30
 8004ffe:	f806 3b01 	strb.w	r3, [r6], #1
 8005002:	42ae      	cmp	r6, r5
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	d124      	bne.n	8005054 <_dtoa_r+0x5fc>
 800500a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800500e:	4b1a      	ldr	r3, [pc, #104]	; (8005078 <_dtoa_r+0x620>)
 8005010:	f7fb f8ac 	bl	800016c <__adddf3>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800501c:	f7fb fcec 	bl	80009f8 <__aeabi_dcmpgt>
 8005020:	2800      	cmp	r0, #0
 8005022:	d171      	bne.n	8005108 <_dtoa_r+0x6b0>
 8005024:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005028:	2000      	movs	r0, #0
 800502a:	4913      	ldr	r1, [pc, #76]	; (8005078 <_dtoa_r+0x620>)
 800502c:	f7fb f89c 	bl	8000168 <__aeabi_dsub>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005038:	f7fb fcc0 	bl	80009bc <__aeabi_dcmplt>
 800503c:	2800      	cmp	r0, #0
 800503e:	f43f af2f 	beq.w	8004ea0 <_dtoa_r+0x448>
 8005042:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005046:	1e6a      	subs	r2, r5, #1
 8005048:	2b30      	cmp	r3, #48	; 0x30
 800504a:	d001      	beq.n	8005050 <_dtoa_r+0x5f8>
 800504c:	46ba      	mov	sl, r7
 800504e:	e04a      	b.n	80050e6 <_dtoa_r+0x68e>
 8005050:	4615      	mov	r5, r2
 8005052:	e7f6      	b.n	8005042 <_dtoa_r+0x5ea>
 8005054:	4b05      	ldr	r3, [pc, #20]	; (800506c <_dtoa_r+0x614>)
 8005056:	f7fb fa3f 	bl	80004d8 <__aeabi_dmul>
 800505a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800505e:	e7bd      	b.n	8004fdc <_dtoa_r+0x584>
 8005060:	080061a8 	.word	0x080061a8
 8005064:	08006180 	.word	0x08006180
 8005068:	3ff00000 	.word	0x3ff00000
 800506c:	40240000 	.word	0x40240000
 8005070:	401c0000 	.word	0x401c0000
 8005074:	40140000 	.word	0x40140000
 8005078:	3fe00000 	.word	0x3fe00000
 800507c:	9d06      	ldr	r5, [sp, #24]
 800507e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005086:	4630      	mov	r0, r6
 8005088:	4639      	mov	r1, r7
 800508a:	f7fb fb4f 	bl	800072c <__aeabi_ddiv>
 800508e:	f7fb fcd3 	bl	8000a38 <__aeabi_d2iz>
 8005092:	4681      	mov	r9, r0
 8005094:	f7fb f9b6 	bl	8000404 <__aeabi_i2d>
 8005098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800509c:	f7fb fa1c 	bl	80004d8 <__aeabi_dmul>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4630      	mov	r0, r6
 80050a6:	4639      	mov	r1, r7
 80050a8:	f7fb f85e 	bl	8000168 <__aeabi_dsub>
 80050ac:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80050b0:	f805 6b01 	strb.w	r6, [r5], #1
 80050b4:	9e06      	ldr	r6, [sp, #24]
 80050b6:	4602      	mov	r2, r0
 80050b8:	1bae      	subs	r6, r5, r6
 80050ba:	45b0      	cmp	r8, r6
 80050bc:	460b      	mov	r3, r1
 80050be:	d135      	bne.n	800512c <_dtoa_r+0x6d4>
 80050c0:	f7fb f854 	bl	800016c <__adddf3>
 80050c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050c8:	4606      	mov	r6, r0
 80050ca:	460f      	mov	r7, r1
 80050cc:	f7fb fc94 	bl	80009f8 <__aeabi_dcmpgt>
 80050d0:	b9c8      	cbnz	r0, 8005106 <_dtoa_r+0x6ae>
 80050d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050d6:	4630      	mov	r0, r6
 80050d8:	4639      	mov	r1, r7
 80050da:	f7fb fc65 	bl	80009a8 <__aeabi_dcmpeq>
 80050de:	b110      	cbz	r0, 80050e6 <_dtoa_r+0x68e>
 80050e0:	f019 0f01 	tst.w	r9, #1
 80050e4:	d10f      	bne.n	8005106 <_dtoa_r+0x6ae>
 80050e6:	4659      	mov	r1, fp
 80050e8:	4620      	mov	r0, r4
 80050ea:	f000 facc 	bl	8005686 <_Bfree>
 80050ee:	2300      	movs	r3, #0
 80050f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80050f2:	702b      	strb	r3, [r5, #0]
 80050f4:	f10a 0301 	add.w	r3, sl, #1
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f43f acf3 	beq.w	8004ae8 <_dtoa_r+0x90>
 8005102:	601d      	str	r5, [r3, #0]
 8005104:	e4f0      	b.n	8004ae8 <_dtoa_r+0x90>
 8005106:	4657      	mov	r7, sl
 8005108:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800510c:	1e6b      	subs	r3, r5, #1
 800510e:	2a39      	cmp	r2, #57	; 0x39
 8005110:	d106      	bne.n	8005120 <_dtoa_r+0x6c8>
 8005112:	9a06      	ldr	r2, [sp, #24]
 8005114:	429a      	cmp	r2, r3
 8005116:	d107      	bne.n	8005128 <_dtoa_r+0x6d0>
 8005118:	2330      	movs	r3, #48	; 0x30
 800511a:	7013      	strb	r3, [r2, #0]
 800511c:	4613      	mov	r3, r2
 800511e:	3701      	adds	r7, #1
 8005120:	781a      	ldrb	r2, [r3, #0]
 8005122:	3201      	adds	r2, #1
 8005124:	701a      	strb	r2, [r3, #0]
 8005126:	e791      	b.n	800504c <_dtoa_r+0x5f4>
 8005128:	461d      	mov	r5, r3
 800512a:	e7ed      	b.n	8005108 <_dtoa_r+0x6b0>
 800512c:	2200      	movs	r2, #0
 800512e:	4b99      	ldr	r3, [pc, #612]	; (8005394 <_dtoa_r+0x93c>)
 8005130:	f7fb f9d2 	bl	80004d8 <__aeabi_dmul>
 8005134:	2200      	movs	r2, #0
 8005136:	2300      	movs	r3, #0
 8005138:	4606      	mov	r6, r0
 800513a:	460f      	mov	r7, r1
 800513c:	f7fb fc34 	bl	80009a8 <__aeabi_dcmpeq>
 8005140:	2800      	cmp	r0, #0
 8005142:	d09e      	beq.n	8005082 <_dtoa_r+0x62a>
 8005144:	e7cf      	b.n	80050e6 <_dtoa_r+0x68e>
 8005146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005148:	2a00      	cmp	r2, #0
 800514a:	f000 8088 	beq.w	800525e <_dtoa_r+0x806>
 800514e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005150:	2a01      	cmp	r2, #1
 8005152:	dc6d      	bgt.n	8005230 <_dtoa_r+0x7d8>
 8005154:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005156:	2a00      	cmp	r2, #0
 8005158:	d066      	beq.n	8005228 <_dtoa_r+0x7d0>
 800515a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800515e:	464d      	mov	r5, r9
 8005160:	9e08      	ldr	r6, [sp, #32]
 8005162:	9a07      	ldr	r2, [sp, #28]
 8005164:	2101      	movs	r1, #1
 8005166:	441a      	add	r2, r3
 8005168:	4620      	mov	r0, r4
 800516a:	4499      	add	r9, r3
 800516c:	9207      	str	r2, [sp, #28]
 800516e:	f000 fb2a 	bl	80057c6 <__i2b>
 8005172:	4607      	mov	r7, r0
 8005174:	2d00      	cmp	r5, #0
 8005176:	dd0b      	ble.n	8005190 <_dtoa_r+0x738>
 8005178:	9b07      	ldr	r3, [sp, #28]
 800517a:	2b00      	cmp	r3, #0
 800517c:	dd08      	ble.n	8005190 <_dtoa_r+0x738>
 800517e:	42ab      	cmp	r3, r5
 8005180:	bfa8      	it	ge
 8005182:	462b      	movge	r3, r5
 8005184:	9a07      	ldr	r2, [sp, #28]
 8005186:	eba9 0903 	sub.w	r9, r9, r3
 800518a:	1aed      	subs	r5, r5, r3
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	9307      	str	r3, [sp, #28]
 8005190:	9b08      	ldr	r3, [sp, #32]
 8005192:	b1eb      	cbz	r3, 80051d0 <_dtoa_r+0x778>
 8005194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005196:	2b00      	cmp	r3, #0
 8005198:	d065      	beq.n	8005266 <_dtoa_r+0x80e>
 800519a:	b18e      	cbz	r6, 80051c0 <_dtoa_r+0x768>
 800519c:	4639      	mov	r1, r7
 800519e:	4632      	mov	r2, r6
 80051a0:	4620      	mov	r0, r4
 80051a2:	f000 fbaf 	bl	8005904 <__pow5mult>
 80051a6:	465a      	mov	r2, fp
 80051a8:	4601      	mov	r1, r0
 80051aa:	4607      	mov	r7, r0
 80051ac:	4620      	mov	r0, r4
 80051ae:	f000 fb13 	bl	80057d8 <__multiply>
 80051b2:	4659      	mov	r1, fp
 80051b4:	900a      	str	r0, [sp, #40]	; 0x28
 80051b6:	4620      	mov	r0, r4
 80051b8:	f000 fa65 	bl	8005686 <_Bfree>
 80051bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051be:	469b      	mov	fp, r3
 80051c0:	9b08      	ldr	r3, [sp, #32]
 80051c2:	1b9a      	subs	r2, r3, r6
 80051c4:	d004      	beq.n	80051d0 <_dtoa_r+0x778>
 80051c6:	4659      	mov	r1, fp
 80051c8:	4620      	mov	r0, r4
 80051ca:	f000 fb9b 	bl	8005904 <__pow5mult>
 80051ce:	4683      	mov	fp, r0
 80051d0:	2101      	movs	r1, #1
 80051d2:	4620      	mov	r0, r4
 80051d4:	f000 faf7 	bl	80057c6 <__i2b>
 80051d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051da:	4606      	mov	r6, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 81c6 	beq.w	800556e <_dtoa_r+0xb16>
 80051e2:	461a      	mov	r2, r3
 80051e4:	4601      	mov	r1, r0
 80051e6:	4620      	mov	r0, r4
 80051e8:	f000 fb8c 	bl	8005904 <__pow5mult>
 80051ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80051ee:	4606      	mov	r6, r0
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	dc3e      	bgt.n	8005272 <_dtoa_r+0x81a>
 80051f4:	9b02      	ldr	r3, [sp, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d137      	bne.n	800526a <_dtoa_r+0x812>
 80051fa:	9b03      	ldr	r3, [sp, #12]
 80051fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005200:	2b00      	cmp	r3, #0
 8005202:	d134      	bne.n	800526e <_dtoa_r+0x816>
 8005204:	9b03      	ldr	r3, [sp, #12]
 8005206:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800520a:	0d1b      	lsrs	r3, r3, #20
 800520c:	051b      	lsls	r3, r3, #20
 800520e:	b12b      	cbz	r3, 800521c <_dtoa_r+0x7c4>
 8005210:	9b07      	ldr	r3, [sp, #28]
 8005212:	f109 0901 	add.w	r9, r9, #1
 8005216:	3301      	adds	r3, #1
 8005218:	9307      	str	r3, [sp, #28]
 800521a:	2301      	movs	r3, #1
 800521c:	9308      	str	r3, [sp, #32]
 800521e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005220:	2b00      	cmp	r3, #0
 8005222:	d128      	bne.n	8005276 <_dtoa_r+0x81e>
 8005224:	2001      	movs	r0, #1
 8005226:	e02e      	b.n	8005286 <_dtoa_r+0x82e>
 8005228:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800522a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800522e:	e796      	b.n	800515e <_dtoa_r+0x706>
 8005230:	9b08      	ldr	r3, [sp, #32]
 8005232:	f108 36ff 	add.w	r6, r8, #4294967295
 8005236:	42b3      	cmp	r3, r6
 8005238:	bfb7      	itett	lt
 800523a:	9b08      	ldrlt	r3, [sp, #32]
 800523c:	1b9e      	subge	r6, r3, r6
 800523e:	1af2      	sublt	r2, r6, r3
 8005240:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005242:	bfbf      	itttt	lt
 8005244:	9608      	strlt	r6, [sp, #32]
 8005246:	189b      	addlt	r3, r3, r2
 8005248:	930c      	strlt	r3, [sp, #48]	; 0x30
 800524a:	2600      	movlt	r6, #0
 800524c:	f1b8 0f00 	cmp.w	r8, #0
 8005250:	bfb9      	ittee	lt
 8005252:	eba9 0508 	sublt.w	r5, r9, r8
 8005256:	2300      	movlt	r3, #0
 8005258:	464d      	movge	r5, r9
 800525a:	4643      	movge	r3, r8
 800525c:	e781      	b.n	8005162 <_dtoa_r+0x70a>
 800525e:	9e08      	ldr	r6, [sp, #32]
 8005260:	464d      	mov	r5, r9
 8005262:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005264:	e786      	b.n	8005174 <_dtoa_r+0x71c>
 8005266:	9a08      	ldr	r2, [sp, #32]
 8005268:	e7ad      	b.n	80051c6 <_dtoa_r+0x76e>
 800526a:	2300      	movs	r3, #0
 800526c:	e7d6      	b.n	800521c <_dtoa_r+0x7c4>
 800526e:	9b02      	ldr	r3, [sp, #8]
 8005270:	e7d4      	b.n	800521c <_dtoa_r+0x7c4>
 8005272:	2300      	movs	r3, #0
 8005274:	9308      	str	r3, [sp, #32]
 8005276:	6933      	ldr	r3, [r6, #16]
 8005278:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800527c:	6918      	ldr	r0, [r3, #16]
 800527e:	f000 fa54 	bl	800572a <__hi0bits>
 8005282:	f1c0 0020 	rsb	r0, r0, #32
 8005286:	9b07      	ldr	r3, [sp, #28]
 8005288:	4418      	add	r0, r3
 800528a:	f010 001f 	ands.w	r0, r0, #31
 800528e:	d047      	beq.n	8005320 <_dtoa_r+0x8c8>
 8005290:	f1c0 0320 	rsb	r3, r0, #32
 8005294:	2b04      	cmp	r3, #4
 8005296:	dd3b      	ble.n	8005310 <_dtoa_r+0x8b8>
 8005298:	9b07      	ldr	r3, [sp, #28]
 800529a:	f1c0 001c 	rsb	r0, r0, #28
 800529e:	4481      	add	r9, r0
 80052a0:	4405      	add	r5, r0
 80052a2:	4403      	add	r3, r0
 80052a4:	9307      	str	r3, [sp, #28]
 80052a6:	f1b9 0f00 	cmp.w	r9, #0
 80052aa:	dd05      	ble.n	80052b8 <_dtoa_r+0x860>
 80052ac:	4659      	mov	r1, fp
 80052ae:	464a      	mov	r2, r9
 80052b0:	4620      	mov	r0, r4
 80052b2:	f000 fb75 	bl	80059a0 <__lshift>
 80052b6:	4683      	mov	fp, r0
 80052b8:	9b07      	ldr	r3, [sp, #28]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	dd05      	ble.n	80052ca <_dtoa_r+0x872>
 80052be:	4631      	mov	r1, r6
 80052c0:	461a      	mov	r2, r3
 80052c2:	4620      	mov	r0, r4
 80052c4:	f000 fb6c 	bl	80059a0 <__lshift>
 80052c8:	4606      	mov	r6, r0
 80052ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052cc:	b353      	cbz	r3, 8005324 <_dtoa_r+0x8cc>
 80052ce:	4631      	mov	r1, r6
 80052d0:	4658      	mov	r0, fp
 80052d2:	f000 fbb9 	bl	8005a48 <__mcmp>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	da24      	bge.n	8005324 <_dtoa_r+0x8cc>
 80052da:	2300      	movs	r3, #0
 80052dc:	4659      	mov	r1, fp
 80052de:	220a      	movs	r2, #10
 80052e0:	4620      	mov	r0, r4
 80052e2:	f000 f9e7 	bl	80056b4 <__multadd>
 80052e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052ec:	4683      	mov	fp, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 8144 	beq.w	800557c <_dtoa_r+0xb24>
 80052f4:	2300      	movs	r3, #0
 80052f6:	4639      	mov	r1, r7
 80052f8:	220a      	movs	r2, #10
 80052fa:	4620      	mov	r0, r4
 80052fc:	f000 f9da 	bl	80056b4 <__multadd>
 8005300:	9b04      	ldr	r3, [sp, #16]
 8005302:	4607      	mov	r7, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	dc4d      	bgt.n	80053a4 <_dtoa_r+0x94c>
 8005308:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800530a:	2b02      	cmp	r3, #2
 800530c:	dd4a      	ble.n	80053a4 <_dtoa_r+0x94c>
 800530e:	e011      	b.n	8005334 <_dtoa_r+0x8dc>
 8005310:	d0c9      	beq.n	80052a6 <_dtoa_r+0x84e>
 8005312:	9a07      	ldr	r2, [sp, #28]
 8005314:	331c      	adds	r3, #28
 8005316:	441a      	add	r2, r3
 8005318:	4499      	add	r9, r3
 800531a:	441d      	add	r5, r3
 800531c:	4613      	mov	r3, r2
 800531e:	e7c1      	b.n	80052a4 <_dtoa_r+0x84c>
 8005320:	4603      	mov	r3, r0
 8005322:	e7f6      	b.n	8005312 <_dtoa_r+0x8ba>
 8005324:	f1b8 0f00 	cmp.w	r8, #0
 8005328:	dc36      	bgt.n	8005398 <_dtoa_r+0x940>
 800532a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800532c:	2b02      	cmp	r3, #2
 800532e:	dd33      	ble.n	8005398 <_dtoa_r+0x940>
 8005330:	f8cd 8010 	str.w	r8, [sp, #16]
 8005334:	9b04      	ldr	r3, [sp, #16]
 8005336:	b963      	cbnz	r3, 8005352 <_dtoa_r+0x8fa>
 8005338:	4631      	mov	r1, r6
 800533a:	2205      	movs	r2, #5
 800533c:	4620      	mov	r0, r4
 800533e:	f000 f9b9 	bl	80056b4 <__multadd>
 8005342:	4601      	mov	r1, r0
 8005344:	4606      	mov	r6, r0
 8005346:	4658      	mov	r0, fp
 8005348:	f000 fb7e 	bl	8005a48 <__mcmp>
 800534c:	2800      	cmp	r0, #0
 800534e:	f73f add3 	bgt.w	8004ef8 <_dtoa_r+0x4a0>
 8005352:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005354:	9d06      	ldr	r5, [sp, #24]
 8005356:	ea6f 0a03 	mvn.w	sl, r3
 800535a:	f04f 0900 	mov.w	r9, #0
 800535e:	4631      	mov	r1, r6
 8005360:	4620      	mov	r0, r4
 8005362:	f000 f990 	bl	8005686 <_Bfree>
 8005366:	2f00      	cmp	r7, #0
 8005368:	f43f aebd 	beq.w	80050e6 <_dtoa_r+0x68e>
 800536c:	f1b9 0f00 	cmp.w	r9, #0
 8005370:	d005      	beq.n	800537e <_dtoa_r+0x926>
 8005372:	45b9      	cmp	r9, r7
 8005374:	d003      	beq.n	800537e <_dtoa_r+0x926>
 8005376:	4649      	mov	r1, r9
 8005378:	4620      	mov	r0, r4
 800537a:	f000 f984 	bl	8005686 <_Bfree>
 800537e:	4639      	mov	r1, r7
 8005380:	4620      	mov	r0, r4
 8005382:	f000 f980 	bl	8005686 <_Bfree>
 8005386:	e6ae      	b.n	80050e6 <_dtoa_r+0x68e>
 8005388:	2600      	movs	r6, #0
 800538a:	4637      	mov	r7, r6
 800538c:	e7e1      	b.n	8005352 <_dtoa_r+0x8fa>
 800538e:	46ba      	mov	sl, r7
 8005390:	4637      	mov	r7, r6
 8005392:	e5b1      	b.n	8004ef8 <_dtoa_r+0x4a0>
 8005394:	40240000 	.word	0x40240000
 8005398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800539a:	f8cd 8010 	str.w	r8, [sp, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 80f3 	beq.w	800558a <_dtoa_r+0xb32>
 80053a4:	2d00      	cmp	r5, #0
 80053a6:	dd05      	ble.n	80053b4 <_dtoa_r+0x95c>
 80053a8:	4639      	mov	r1, r7
 80053aa:	462a      	mov	r2, r5
 80053ac:	4620      	mov	r0, r4
 80053ae:	f000 faf7 	bl	80059a0 <__lshift>
 80053b2:	4607      	mov	r7, r0
 80053b4:	9b08      	ldr	r3, [sp, #32]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d04c      	beq.n	8005454 <_dtoa_r+0x9fc>
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	4620      	mov	r0, r4
 80053be:	f000 f92e 	bl	800561e <_Balloc>
 80053c2:	4605      	mov	r5, r0
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	f107 010c 	add.w	r1, r7, #12
 80053ca:	3202      	adds	r2, #2
 80053cc:	0092      	lsls	r2, r2, #2
 80053ce:	300c      	adds	r0, #12
 80053d0:	f000 f91a 	bl	8005608 <memcpy>
 80053d4:	2201      	movs	r2, #1
 80053d6:	4629      	mov	r1, r5
 80053d8:	4620      	mov	r0, r4
 80053da:	f000 fae1 	bl	80059a0 <__lshift>
 80053de:	46b9      	mov	r9, r7
 80053e0:	4607      	mov	r7, r0
 80053e2:	9b06      	ldr	r3, [sp, #24]
 80053e4:	9307      	str	r3, [sp, #28]
 80053e6:	9b02      	ldr	r3, [sp, #8]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	9308      	str	r3, [sp, #32]
 80053ee:	4631      	mov	r1, r6
 80053f0:	4658      	mov	r0, fp
 80053f2:	f7ff faa1 	bl	8004938 <quorem>
 80053f6:	4649      	mov	r1, r9
 80053f8:	4605      	mov	r5, r0
 80053fa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80053fe:	4658      	mov	r0, fp
 8005400:	f000 fb22 	bl	8005a48 <__mcmp>
 8005404:	463a      	mov	r2, r7
 8005406:	9002      	str	r0, [sp, #8]
 8005408:	4631      	mov	r1, r6
 800540a:	4620      	mov	r0, r4
 800540c:	f000 fb36 	bl	8005a7c <__mdiff>
 8005410:	68c3      	ldr	r3, [r0, #12]
 8005412:	4602      	mov	r2, r0
 8005414:	bb03      	cbnz	r3, 8005458 <_dtoa_r+0xa00>
 8005416:	4601      	mov	r1, r0
 8005418:	9009      	str	r0, [sp, #36]	; 0x24
 800541a:	4658      	mov	r0, fp
 800541c:	f000 fb14 	bl	8005a48 <__mcmp>
 8005420:	4603      	mov	r3, r0
 8005422:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005424:	4611      	mov	r1, r2
 8005426:	4620      	mov	r0, r4
 8005428:	9309      	str	r3, [sp, #36]	; 0x24
 800542a:	f000 f92c 	bl	8005686 <_Bfree>
 800542e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005430:	b9a3      	cbnz	r3, 800545c <_dtoa_r+0xa04>
 8005432:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005434:	b992      	cbnz	r2, 800545c <_dtoa_r+0xa04>
 8005436:	9a08      	ldr	r2, [sp, #32]
 8005438:	b982      	cbnz	r2, 800545c <_dtoa_r+0xa04>
 800543a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800543e:	d029      	beq.n	8005494 <_dtoa_r+0xa3c>
 8005440:	9b02      	ldr	r3, [sp, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	dd01      	ble.n	800544a <_dtoa_r+0x9f2>
 8005446:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800544a:	9b07      	ldr	r3, [sp, #28]
 800544c:	1c5d      	adds	r5, r3, #1
 800544e:	f883 8000 	strb.w	r8, [r3]
 8005452:	e784      	b.n	800535e <_dtoa_r+0x906>
 8005454:	4638      	mov	r0, r7
 8005456:	e7c2      	b.n	80053de <_dtoa_r+0x986>
 8005458:	2301      	movs	r3, #1
 800545a:	e7e3      	b.n	8005424 <_dtoa_r+0x9cc>
 800545c:	9a02      	ldr	r2, [sp, #8]
 800545e:	2a00      	cmp	r2, #0
 8005460:	db04      	blt.n	800546c <_dtoa_r+0xa14>
 8005462:	d123      	bne.n	80054ac <_dtoa_r+0xa54>
 8005464:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005466:	bb0a      	cbnz	r2, 80054ac <_dtoa_r+0xa54>
 8005468:	9a08      	ldr	r2, [sp, #32]
 800546a:	b9fa      	cbnz	r2, 80054ac <_dtoa_r+0xa54>
 800546c:	2b00      	cmp	r3, #0
 800546e:	ddec      	ble.n	800544a <_dtoa_r+0x9f2>
 8005470:	4659      	mov	r1, fp
 8005472:	2201      	movs	r2, #1
 8005474:	4620      	mov	r0, r4
 8005476:	f000 fa93 	bl	80059a0 <__lshift>
 800547a:	4631      	mov	r1, r6
 800547c:	4683      	mov	fp, r0
 800547e:	f000 fae3 	bl	8005a48 <__mcmp>
 8005482:	2800      	cmp	r0, #0
 8005484:	dc03      	bgt.n	800548e <_dtoa_r+0xa36>
 8005486:	d1e0      	bne.n	800544a <_dtoa_r+0x9f2>
 8005488:	f018 0f01 	tst.w	r8, #1
 800548c:	d0dd      	beq.n	800544a <_dtoa_r+0x9f2>
 800548e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005492:	d1d8      	bne.n	8005446 <_dtoa_r+0x9ee>
 8005494:	9b07      	ldr	r3, [sp, #28]
 8005496:	9a07      	ldr	r2, [sp, #28]
 8005498:	1c5d      	adds	r5, r3, #1
 800549a:	2339      	movs	r3, #57	; 0x39
 800549c:	7013      	strb	r3, [r2, #0]
 800549e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80054a2:	1e6a      	subs	r2, r5, #1
 80054a4:	2b39      	cmp	r3, #57	; 0x39
 80054a6:	d04d      	beq.n	8005544 <_dtoa_r+0xaec>
 80054a8:	3301      	adds	r3, #1
 80054aa:	e052      	b.n	8005552 <_dtoa_r+0xafa>
 80054ac:	9a07      	ldr	r2, [sp, #28]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f102 0501 	add.w	r5, r2, #1
 80054b4:	dd06      	ble.n	80054c4 <_dtoa_r+0xa6c>
 80054b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80054ba:	d0eb      	beq.n	8005494 <_dtoa_r+0xa3c>
 80054bc:	f108 0801 	add.w	r8, r8, #1
 80054c0:	9b07      	ldr	r3, [sp, #28]
 80054c2:	e7c4      	b.n	800544e <_dtoa_r+0x9f6>
 80054c4:	9b06      	ldr	r3, [sp, #24]
 80054c6:	9a04      	ldr	r2, [sp, #16]
 80054c8:	1aeb      	subs	r3, r5, r3
 80054ca:	4293      	cmp	r3, r2
 80054cc:	f805 8c01 	strb.w	r8, [r5, #-1]
 80054d0:	d021      	beq.n	8005516 <_dtoa_r+0xabe>
 80054d2:	4659      	mov	r1, fp
 80054d4:	2300      	movs	r3, #0
 80054d6:	220a      	movs	r2, #10
 80054d8:	4620      	mov	r0, r4
 80054da:	f000 f8eb 	bl	80056b4 <__multadd>
 80054de:	45b9      	cmp	r9, r7
 80054e0:	4683      	mov	fp, r0
 80054e2:	f04f 0300 	mov.w	r3, #0
 80054e6:	f04f 020a 	mov.w	r2, #10
 80054ea:	4649      	mov	r1, r9
 80054ec:	4620      	mov	r0, r4
 80054ee:	d105      	bne.n	80054fc <_dtoa_r+0xaa4>
 80054f0:	f000 f8e0 	bl	80056b4 <__multadd>
 80054f4:	4681      	mov	r9, r0
 80054f6:	4607      	mov	r7, r0
 80054f8:	9507      	str	r5, [sp, #28]
 80054fa:	e778      	b.n	80053ee <_dtoa_r+0x996>
 80054fc:	f000 f8da 	bl	80056b4 <__multadd>
 8005500:	4639      	mov	r1, r7
 8005502:	4681      	mov	r9, r0
 8005504:	2300      	movs	r3, #0
 8005506:	220a      	movs	r2, #10
 8005508:	4620      	mov	r0, r4
 800550a:	f000 f8d3 	bl	80056b4 <__multadd>
 800550e:	4607      	mov	r7, r0
 8005510:	e7f2      	b.n	80054f8 <_dtoa_r+0xaa0>
 8005512:	f04f 0900 	mov.w	r9, #0
 8005516:	4659      	mov	r1, fp
 8005518:	2201      	movs	r2, #1
 800551a:	4620      	mov	r0, r4
 800551c:	f000 fa40 	bl	80059a0 <__lshift>
 8005520:	4631      	mov	r1, r6
 8005522:	4683      	mov	fp, r0
 8005524:	f000 fa90 	bl	8005a48 <__mcmp>
 8005528:	2800      	cmp	r0, #0
 800552a:	dcb8      	bgt.n	800549e <_dtoa_r+0xa46>
 800552c:	d102      	bne.n	8005534 <_dtoa_r+0xadc>
 800552e:	f018 0f01 	tst.w	r8, #1
 8005532:	d1b4      	bne.n	800549e <_dtoa_r+0xa46>
 8005534:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005538:	1e6a      	subs	r2, r5, #1
 800553a:	2b30      	cmp	r3, #48	; 0x30
 800553c:	f47f af0f 	bne.w	800535e <_dtoa_r+0x906>
 8005540:	4615      	mov	r5, r2
 8005542:	e7f7      	b.n	8005534 <_dtoa_r+0xadc>
 8005544:	9b06      	ldr	r3, [sp, #24]
 8005546:	4293      	cmp	r3, r2
 8005548:	d105      	bne.n	8005556 <_dtoa_r+0xafe>
 800554a:	2331      	movs	r3, #49	; 0x31
 800554c:	9a06      	ldr	r2, [sp, #24]
 800554e:	f10a 0a01 	add.w	sl, sl, #1
 8005552:	7013      	strb	r3, [r2, #0]
 8005554:	e703      	b.n	800535e <_dtoa_r+0x906>
 8005556:	4615      	mov	r5, r2
 8005558:	e7a1      	b.n	800549e <_dtoa_r+0xa46>
 800555a:	4b17      	ldr	r3, [pc, #92]	; (80055b8 <_dtoa_r+0xb60>)
 800555c:	f7ff bae1 	b.w	8004b22 <_dtoa_r+0xca>
 8005560:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005562:	2b00      	cmp	r3, #0
 8005564:	f47f aabb 	bne.w	8004ade <_dtoa_r+0x86>
 8005568:	4b14      	ldr	r3, [pc, #80]	; (80055bc <_dtoa_r+0xb64>)
 800556a:	f7ff bada 	b.w	8004b22 <_dtoa_r+0xca>
 800556e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005570:	2b01      	cmp	r3, #1
 8005572:	f77f ae3f 	ble.w	80051f4 <_dtoa_r+0x79c>
 8005576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005578:	9308      	str	r3, [sp, #32]
 800557a:	e653      	b.n	8005224 <_dtoa_r+0x7cc>
 800557c:	9b04      	ldr	r3, [sp, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	dc03      	bgt.n	800558a <_dtoa_r+0xb32>
 8005582:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005584:	2b02      	cmp	r3, #2
 8005586:	f73f aed5 	bgt.w	8005334 <_dtoa_r+0x8dc>
 800558a:	9d06      	ldr	r5, [sp, #24]
 800558c:	4631      	mov	r1, r6
 800558e:	4658      	mov	r0, fp
 8005590:	f7ff f9d2 	bl	8004938 <quorem>
 8005594:	9b06      	ldr	r3, [sp, #24]
 8005596:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800559a:	f805 8b01 	strb.w	r8, [r5], #1
 800559e:	9a04      	ldr	r2, [sp, #16]
 80055a0:	1aeb      	subs	r3, r5, r3
 80055a2:	429a      	cmp	r2, r3
 80055a4:	ddb5      	ble.n	8005512 <_dtoa_r+0xaba>
 80055a6:	4659      	mov	r1, fp
 80055a8:	2300      	movs	r3, #0
 80055aa:	220a      	movs	r2, #10
 80055ac:	4620      	mov	r0, r4
 80055ae:	f000 f881 	bl	80056b4 <__multadd>
 80055b2:	4683      	mov	fp, r0
 80055b4:	e7ea      	b.n	800558c <_dtoa_r+0xb34>
 80055b6:	bf00      	nop
 80055b8:	0800614c 	.word	0x0800614c
 80055bc:	08006170 	.word	0x08006170

080055c0 <_localeconv_r>:
 80055c0:	4b04      	ldr	r3, [pc, #16]	; (80055d4 <_localeconv_r+0x14>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6a18      	ldr	r0, [r3, #32]
 80055c6:	4b04      	ldr	r3, [pc, #16]	; (80055d8 <_localeconv_r+0x18>)
 80055c8:	2800      	cmp	r0, #0
 80055ca:	bf08      	it	eq
 80055cc:	4618      	moveq	r0, r3
 80055ce:	30f0      	adds	r0, #240	; 0xf0
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	2000000c 	.word	0x2000000c
 80055d8:	20000070 	.word	0x20000070

080055dc <malloc>:
 80055dc:	4b02      	ldr	r3, [pc, #8]	; (80055e8 <malloc+0xc>)
 80055de:	4601      	mov	r1, r0
 80055e0:	6818      	ldr	r0, [r3, #0]
 80055e2:	f000 bb53 	b.w	8005c8c <_malloc_r>
 80055e6:	bf00      	nop
 80055e8:	2000000c 	.word	0x2000000c

080055ec <memchr>:
 80055ec:	b510      	push	{r4, lr}
 80055ee:	b2c9      	uxtb	r1, r1
 80055f0:	4402      	add	r2, r0
 80055f2:	4290      	cmp	r0, r2
 80055f4:	4603      	mov	r3, r0
 80055f6:	d101      	bne.n	80055fc <memchr+0x10>
 80055f8:	2300      	movs	r3, #0
 80055fa:	e003      	b.n	8005604 <memchr+0x18>
 80055fc:	781c      	ldrb	r4, [r3, #0]
 80055fe:	3001      	adds	r0, #1
 8005600:	428c      	cmp	r4, r1
 8005602:	d1f6      	bne.n	80055f2 <memchr+0x6>
 8005604:	4618      	mov	r0, r3
 8005606:	bd10      	pop	{r4, pc}

08005608 <memcpy>:
 8005608:	b510      	push	{r4, lr}
 800560a:	1e43      	subs	r3, r0, #1
 800560c:	440a      	add	r2, r1
 800560e:	4291      	cmp	r1, r2
 8005610:	d100      	bne.n	8005614 <memcpy+0xc>
 8005612:	bd10      	pop	{r4, pc}
 8005614:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005618:	f803 4f01 	strb.w	r4, [r3, #1]!
 800561c:	e7f7      	b.n	800560e <memcpy+0x6>

0800561e <_Balloc>:
 800561e:	b570      	push	{r4, r5, r6, lr}
 8005620:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005622:	4604      	mov	r4, r0
 8005624:	460e      	mov	r6, r1
 8005626:	b93d      	cbnz	r5, 8005638 <_Balloc+0x1a>
 8005628:	2010      	movs	r0, #16
 800562a:	f7ff ffd7 	bl	80055dc <malloc>
 800562e:	6260      	str	r0, [r4, #36]	; 0x24
 8005630:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005634:	6005      	str	r5, [r0, #0]
 8005636:	60c5      	str	r5, [r0, #12]
 8005638:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800563a:	68eb      	ldr	r3, [r5, #12]
 800563c:	b183      	cbz	r3, 8005660 <_Balloc+0x42>
 800563e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005646:	b9b8      	cbnz	r0, 8005678 <_Balloc+0x5a>
 8005648:	2101      	movs	r1, #1
 800564a:	fa01 f506 	lsl.w	r5, r1, r6
 800564e:	1d6a      	adds	r2, r5, #5
 8005650:	0092      	lsls	r2, r2, #2
 8005652:	4620      	mov	r0, r4
 8005654:	f000 fabf 	bl	8005bd6 <_calloc_r>
 8005658:	b160      	cbz	r0, 8005674 <_Balloc+0x56>
 800565a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800565e:	e00e      	b.n	800567e <_Balloc+0x60>
 8005660:	2221      	movs	r2, #33	; 0x21
 8005662:	2104      	movs	r1, #4
 8005664:	4620      	mov	r0, r4
 8005666:	f000 fab6 	bl	8005bd6 <_calloc_r>
 800566a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800566c:	60e8      	str	r0, [r5, #12]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1e4      	bne.n	800563e <_Balloc+0x20>
 8005674:	2000      	movs	r0, #0
 8005676:	bd70      	pop	{r4, r5, r6, pc}
 8005678:	6802      	ldr	r2, [r0, #0]
 800567a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800567e:	2300      	movs	r3, #0
 8005680:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005684:	e7f7      	b.n	8005676 <_Balloc+0x58>

08005686 <_Bfree>:
 8005686:	b570      	push	{r4, r5, r6, lr}
 8005688:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800568a:	4606      	mov	r6, r0
 800568c:	460d      	mov	r5, r1
 800568e:	b93c      	cbnz	r4, 80056a0 <_Bfree+0x1a>
 8005690:	2010      	movs	r0, #16
 8005692:	f7ff ffa3 	bl	80055dc <malloc>
 8005696:	6270      	str	r0, [r6, #36]	; 0x24
 8005698:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800569c:	6004      	str	r4, [r0, #0]
 800569e:	60c4      	str	r4, [r0, #12]
 80056a0:	b13d      	cbz	r5, 80056b2 <_Bfree+0x2c>
 80056a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80056a4:	686a      	ldr	r2, [r5, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056ac:	6029      	str	r1, [r5, #0]
 80056ae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80056b2:	bd70      	pop	{r4, r5, r6, pc}

080056b4 <__multadd>:
 80056b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b8:	461f      	mov	r7, r3
 80056ba:	4606      	mov	r6, r0
 80056bc:	460c      	mov	r4, r1
 80056be:	2300      	movs	r3, #0
 80056c0:	690d      	ldr	r5, [r1, #16]
 80056c2:	f101 0c14 	add.w	ip, r1, #20
 80056c6:	f8dc 0000 	ldr.w	r0, [ip]
 80056ca:	3301      	adds	r3, #1
 80056cc:	b281      	uxth	r1, r0
 80056ce:	fb02 7101 	mla	r1, r2, r1, r7
 80056d2:	0c00      	lsrs	r0, r0, #16
 80056d4:	0c0f      	lsrs	r7, r1, #16
 80056d6:	fb02 7000 	mla	r0, r2, r0, r7
 80056da:	b289      	uxth	r1, r1
 80056dc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80056e0:	429d      	cmp	r5, r3
 80056e2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80056e6:	f84c 1b04 	str.w	r1, [ip], #4
 80056ea:	dcec      	bgt.n	80056c6 <__multadd+0x12>
 80056ec:	b1d7      	cbz	r7, 8005724 <__multadd+0x70>
 80056ee:	68a3      	ldr	r3, [r4, #8]
 80056f0:	42ab      	cmp	r3, r5
 80056f2:	dc12      	bgt.n	800571a <__multadd+0x66>
 80056f4:	6861      	ldr	r1, [r4, #4]
 80056f6:	4630      	mov	r0, r6
 80056f8:	3101      	adds	r1, #1
 80056fa:	f7ff ff90 	bl	800561e <_Balloc>
 80056fe:	4680      	mov	r8, r0
 8005700:	6922      	ldr	r2, [r4, #16]
 8005702:	f104 010c 	add.w	r1, r4, #12
 8005706:	3202      	adds	r2, #2
 8005708:	0092      	lsls	r2, r2, #2
 800570a:	300c      	adds	r0, #12
 800570c:	f7ff ff7c 	bl	8005608 <memcpy>
 8005710:	4621      	mov	r1, r4
 8005712:	4630      	mov	r0, r6
 8005714:	f7ff ffb7 	bl	8005686 <_Bfree>
 8005718:	4644      	mov	r4, r8
 800571a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800571e:	3501      	adds	r5, #1
 8005720:	615f      	str	r7, [r3, #20]
 8005722:	6125      	str	r5, [r4, #16]
 8005724:	4620      	mov	r0, r4
 8005726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800572a <__hi0bits>:
 800572a:	0c02      	lsrs	r2, r0, #16
 800572c:	0412      	lsls	r2, r2, #16
 800572e:	4603      	mov	r3, r0
 8005730:	b9b2      	cbnz	r2, 8005760 <__hi0bits+0x36>
 8005732:	0403      	lsls	r3, r0, #16
 8005734:	2010      	movs	r0, #16
 8005736:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800573a:	bf04      	itt	eq
 800573c:	021b      	lsleq	r3, r3, #8
 800573e:	3008      	addeq	r0, #8
 8005740:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005744:	bf04      	itt	eq
 8005746:	011b      	lsleq	r3, r3, #4
 8005748:	3004      	addeq	r0, #4
 800574a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800574e:	bf04      	itt	eq
 8005750:	009b      	lsleq	r3, r3, #2
 8005752:	3002      	addeq	r0, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	db06      	blt.n	8005766 <__hi0bits+0x3c>
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	d503      	bpl.n	8005764 <__hi0bits+0x3a>
 800575c:	3001      	adds	r0, #1
 800575e:	4770      	bx	lr
 8005760:	2000      	movs	r0, #0
 8005762:	e7e8      	b.n	8005736 <__hi0bits+0xc>
 8005764:	2020      	movs	r0, #32
 8005766:	4770      	bx	lr

08005768 <__lo0bits>:
 8005768:	6803      	ldr	r3, [r0, #0]
 800576a:	4601      	mov	r1, r0
 800576c:	f013 0207 	ands.w	r2, r3, #7
 8005770:	d00b      	beq.n	800578a <__lo0bits+0x22>
 8005772:	07da      	lsls	r2, r3, #31
 8005774:	d423      	bmi.n	80057be <__lo0bits+0x56>
 8005776:	0798      	lsls	r0, r3, #30
 8005778:	bf49      	itett	mi
 800577a:	085b      	lsrmi	r3, r3, #1
 800577c:	089b      	lsrpl	r3, r3, #2
 800577e:	2001      	movmi	r0, #1
 8005780:	600b      	strmi	r3, [r1, #0]
 8005782:	bf5c      	itt	pl
 8005784:	600b      	strpl	r3, [r1, #0]
 8005786:	2002      	movpl	r0, #2
 8005788:	4770      	bx	lr
 800578a:	b298      	uxth	r0, r3
 800578c:	b9a8      	cbnz	r0, 80057ba <__lo0bits+0x52>
 800578e:	2010      	movs	r0, #16
 8005790:	0c1b      	lsrs	r3, r3, #16
 8005792:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005796:	bf04      	itt	eq
 8005798:	0a1b      	lsreq	r3, r3, #8
 800579a:	3008      	addeq	r0, #8
 800579c:	071a      	lsls	r2, r3, #28
 800579e:	bf04      	itt	eq
 80057a0:	091b      	lsreq	r3, r3, #4
 80057a2:	3004      	addeq	r0, #4
 80057a4:	079a      	lsls	r2, r3, #30
 80057a6:	bf04      	itt	eq
 80057a8:	089b      	lsreq	r3, r3, #2
 80057aa:	3002      	addeq	r0, #2
 80057ac:	07da      	lsls	r2, r3, #31
 80057ae:	d402      	bmi.n	80057b6 <__lo0bits+0x4e>
 80057b0:	085b      	lsrs	r3, r3, #1
 80057b2:	d006      	beq.n	80057c2 <__lo0bits+0x5a>
 80057b4:	3001      	adds	r0, #1
 80057b6:	600b      	str	r3, [r1, #0]
 80057b8:	4770      	bx	lr
 80057ba:	4610      	mov	r0, r2
 80057bc:	e7e9      	b.n	8005792 <__lo0bits+0x2a>
 80057be:	2000      	movs	r0, #0
 80057c0:	4770      	bx	lr
 80057c2:	2020      	movs	r0, #32
 80057c4:	4770      	bx	lr

080057c6 <__i2b>:
 80057c6:	b510      	push	{r4, lr}
 80057c8:	460c      	mov	r4, r1
 80057ca:	2101      	movs	r1, #1
 80057cc:	f7ff ff27 	bl	800561e <_Balloc>
 80057d0:	2201      	movs	r2, #1
 80057d2:	6144      	str	r4, [r0, #20]
 80057d4:	6102      	str	r2, [r0, #16]
 80057d6:	bd10      	pop	{r4, pc}

080057d8 <__multiply>:
 80057d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057dc:	4614      	mov	r4, r2
 80057de:	690a      	ldr	r2, [r1, #16]
 80057e0:	6923      	ldr	r3, [r4, #16]
 80057e2:	4688      	mov	r8, r1
 80057e4:	429a      	cmp	r2, r3
 80057e6:	bfbe      	ittt	lt
 80057e8:	460b      	movlt	r3, r1
 80057ea:	46a0      	movlt	r8, r4
 80057ec:	461c      	movlt	r4, r3
 80057ee:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80057f2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80057f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80057fa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80057fe:	eb07 0609 	add.w	r6, r7, r9
 8005802:	42b3      	cmp	r3, r6
 8005804:	bfb8      	it	lt
 8005806:	3101      	addlt	r1, #1
 8005808:	f7ff ff09 	bl	800561e <_Balloc>
 800580c:	f100 0514 	add.w	r5, r0, #20
 8005810:	462b      	mov	r3, r5
 8005812:	2200      	movs	r2, #0
 8005814:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005818:	4573      	cmp	r3, lr
 800581a:	d316      	bcc.n	800584a <__multiply+0x72>
 800581c:	f104 0214 	add.w	r2, r4, #20
 8005820:	f108 0114 	add.w	r1, r8, #20
 8005824:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005828:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	9b00      	ldr	r3, [sp, #0]
 8005830:	9201      	str	r2, [sp, #4]
 8005832:	4293      	cmp	r3, r2
 8005834:	d80c      	bhi.n	8005850 <__multiply+0x78>
 8005836:	2e00      	cmp	r6, #0
 8005838:	dd03      	ble.n	8005842 <__multiply+0x6a>
 800583a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800583e:	2b00      	cmp	r3, #0
 8005840:	d05d      	beq.n	80058fe <__multiply+0x126>
 8005842:	6106      	str	r6, [r0, #16]
 8005844:	b003      	add	sp, #12
 8005846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800584a:	f843 2b04 	str.w	r2, [r3], #4
 800584e:	e7e3      	b.n	8005818 <__multiply+0x40>
 8005850:	f8b2 b000 	ldrh.w	fp, [r2]
 8005854:	f1bb 0f00 	cmp.w	fp, #0
 8005858:	d023      	beq.n	80058a2 <__multiply+0xca>
 800585a:	4689      	mov	r9, r1
 800585c:	46ac      	mov	ip, r5
 800585e:	f04f 0800 	mov.w	r8, #0
 8005862:	f859 4b04 	ldr.w	r4, [r9], #4
 8005866:	f8dc a000 	ldr.w	sl, [ip]
 800586a:	b2a3      	uxth	r3, r4
 800586c:	fa1f fa8a 	uxth.w	sl, sl
 8005870:	fb0b a303 	mla	r3, fp, r3, sl
 8005874:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005878:	f8dc 4000 	ldr.w	r4, [ip]
 800587c:	4443      	add	r3, r8
 800587e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005882:	fb0b 840a 	mla	r4, fp, sl, r8
 8005886:	46e2      	mov	sl, ip
 8005888:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800588c:	b29b      	uxth	r3, r3
 800588e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005892:	454f      	cmp	r7, r9
 8005894:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005898:	f84a 3b04 	str.w	r3, [sl], #4
 800589c:	d82b      	bhi.n	80058f6 <__multiply+0x11e>
 800589e:	f8cc 8004 	str.w	r8, [ip, #4]
 80058a2:	9b01      	ldr	r3, [sp, #4]
 80058a4:	3204      	adds	r2, #4
 80058a6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80058aa:	f1ba 0f00 	cmp.w	sl, #0
 80058ae:	d020      	beq.n	80058f2 <__multiply+0x11a>
 80058b0:	4689      	mov	r9, r1
 80058b2:	46a8      	mov	r8, r5
 80058b4:	f04f 0b00 	mov.w	fp, #0
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	f8b9 c000 	ldrh.w	ip, [r9]
 80058be:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	fb0a 440c 	mla	r4, sl, ip, r4
 80058c8:	46c4      	mov	ip, r8
 80058ca:	445c      	add	r4, fp
 80058cc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80058d0:	f84c 3b04 	str.w	r3, [ip], #4
 80058d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80058d8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80058dc:	0c1b      	lsrs	r3, r3, #16
 80058de:	fb0a b303 	mla	r3, sl, r3, fp
 80058e2:	454f      	cmp	r7, r9
 80058e4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80058e8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80058ec:	d805      	bhi.n	80058fa <__multiply+0x122>
 80058ee:	f8c8 3004 	str.w	r3, [r8, #4]
 80058f2:	3504      	adds	r5, #4
 80058f4:	e79b      	b.n	800582e <__multiply+0x56>
 80058f6:	46d4      	mov	ip, sl
 80058f8:	e7b3      	b.n	8005862 <__multiply+0x8a>
 80058fa:	46e0      	mov	r8, ip
 80058fc:	e7dd      	b.n	80058ba <__multiply+0xe2>
 80058fe:	3e01      	subs	r6, #1
 8005900:	e799      	b.n	8005836 <__multiply+0x5e>
	...

08005904 <__pow5mult>:
 8005904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005908:	4615      	mov	r5, r2
 800590a:	f012 0203 	ands.w	r2, r2, #3
 800590e:	4606      	mov	r6, r0
 8005910:	460f      	mov	r7, r1
 8005912:	d007      	beq.n	8005924 <__pow5mult+0x20>
 8005914:	4c21      	ldr	r4, [pc, #132]	; (800599c <__pow5mult+0x98>)
 8005916:	3a01      	subs	r2, #1
 8005918:	2300      	movs	r3, #0
 800591a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800591e:	f7ff fec9 	bl	80056b4 <__multadd>
 8005922:	4607      	mov	r7, r0
 8005924:	10ad      	asrs	r5, r5, #2
 8005926:	d035      	beq.n	8005994 <__pow5mult+0x90>
 8005928:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800592a:	b93c      	cbnz	r4, 800593c <__pow5mult+0x38>
 800592c:	2010      	movs	r0, #16
 800592e:	f7ff fe55 	bl	80055dc <malloc>
 8005932:	6270      	str	r0, [r6, #36]	; 0x24
 8005934:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005938:	6004      	str	r4, [r0, #0]
 800593a:	60c4      	str	r4, [r0, #12]
 800593c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005940:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005944:	b94c      	cbnz	r4, 800595a <__pow5mult+0x56>
 8005946:	f240 2171 	movw	r1, #625	; 0x271
 800594a:	4630      	mov	r0, r6
 800594c:	f7ff ff3b 	bl	80057c6 <__i2b>
 8005950:	2300      	movs	r3, #0
 8005952:	4604      	mov	r4, r0
 8005954:	f8c8 0008 	str.w	r0, [r8, #8]
 8005958:	6003      	str	r3, [r0, #0]
 800595a:	f04f 0800 	mov.w	r8, #0
 800595e:	07eb      	lsls	r3, r5, #31
 8005960:	d50a      	bpl.n	8005978 <__pow5mult+0x74>
 8005962:	4639      	mov	r1, r7
 8005964:	4622      	mov	r2, r4
 8005966:	4630      	mov	r0, r6
 8005968:	f7ff ff36 	bl	80057d8 <__multiply>
 800596c:	4681      	mov	r9, r0
 800596e:	4639      	mov	r1, r7
 8005970:	4630      	mov	r0, r6
 8005972:	f7ff fe88 	bl	8005686 <_Bfree>
 8005976:	464f      	mov	r7, r9
 8005978:	106d      	asrs	r5, r5, #1
 800597a:	d00b      	beq.n	8005994 <__pow5mult+0x90>
 800597c:	6820      	ldr	r0, [r4, #0]
 800597e:	b938      	cbnz	r0, 8005990 <__pow5mult+0x8c>
 8005980:	4622      	mov	r2, r4
 8005982:	4621      	mov	r1, r4
 8005984:	4630      	mov	r0, r6
 8005986:	f7ff ff27 	bl	80057d8 <__multiply>
 800598a:	6020      	str	r0, [r4, #0]
 800598c:	f8c0 8000 	str.w	r8, [r0]
 8005990:	4604      	mov	r4, r0
 8005992:	e7e4      	b.n	800595e <__pow5mult+0x5a>
 8005994:	4638      	mov	r0, r7
 8005996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800599a:	bf00      	nop
 800599c:	08006270 	.word	0x08006270

080059a0 <__lshift>:
 80059a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059a4:	460c      	mov	r4, r1
 80059a6:	4607      	mov	r7, r0
 80059a8:	4616      	mov	r6, r2
 80059aa:	6923      	ldr	r3, [r4, #16]
 80059ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059b0:	eb0a 0903 	add.w	r9, sl, r3
 80059b4:	6849      	ldr	r1, [r1, #4]
 80059b6:	68a3      	ldr	r3, [r4, #8]
 80059b8:	f109 0501 	add.w	r5, r9, #1
 80059bc:	42ab      	cmp	r3, r5
 80059be:	db32      	blt.n	8005a26 <__lshift+0x86>
 80059c0:	4638      	mov	r0, r7
 80059c2:	f7ff fe2c 	bl	800561e <_Balloc>
 80059c6:	2300      	movs	r3, #0
 80059c8:	4680      	mov	r8, r0
 80059ca:	461a      	mov	r2, r3
 80059cc:	f100 0114 	add.w	r1, r0, #20
 80059d0:	4553      	cmp	r3, sl
 80059d2:	db2b      	blt.n	8005a2c <__lshift+0x8c>
 80059d4:	6920      	ldr	r0, [r4, #16]
 80059d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80059da:	f104 0314 	add.w	r3, r4, #20
 80059de:	f016 021f 	ands.w	r2, r6, #31
 80059e2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80059e6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80059ea:	d025      	beq.n	8005a38 <__lshift+0x98>
 80059ec:	2000      	movs	r0, #0
 80059ee:	f1c2 0e20 	rsb	lr, r2, #32
 80059f2:	468a      	mov	sl, r1
 80059f4:	681e      	ldr	r6, [r3, #0]
 80059f6:	4096      	lsls	r6, r2
 80059f8:	4330      	orrs	r0, r6
 80059fa:	f84a 0b04 	str.w	r0, [sl], #4
 80059fe:	f853 0b04 	ldr.w	r0, [r3], #4
 8005a02:	459c      	cmp	ip, r3
 8005a04:	fa20 f00e 	lsr.w	r0, r0, lr
 8005a08:	d814      	bhi.n	8005a34 <__lshift+0x94>
 8005a0a:	6048      	str	r0, [r1, #4]
 8005a0c:	b108      	cbz	r0, 8005a12 <__lshift+0x72>
 8005a0e:	f109 0502 	add.w	r5, r9, #2
 8005a12:	3d01      	subs	r5, #1
 8005a14:	4638      	mov	r0, r7
 8005a16:	f8c8 5010 	str.w	r5, [r8, #16]
 8005a1a:	4621      	mov	r1, r4
 8005a1c:	f7ff fe33 	bl	8005686 <_Bfree>
 8005a20:	4640      	mov	r0, r8
 8005a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a26:	3101      	adds	r1, #1
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	e7c7      	b.n	80059bc <__lshift+0x1c>
 8005a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005a30:	3301      	adds	r3, #1
 8005a32:	e7cd      	b.n	80059d0 <__lshift+0x30>
 8005a34:	4651      	mov	r1, sl
 8005a36:	e7dc      	b.n	80059f2 <__lshift+0x52>
 8005a38:	3904      	subs	r1, #4
 8005a3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a3e:	459c      	cmp	ip, r3
 8005a40:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a44:	d8f9      	bhi.n	8005a3a <__lshift+0x9a>
 8005a46:	e7e4      	b.n	8005a12 <__lshift+0x72>

08005a48 <__mcmp>:
 8005a48:	6903      	ldr	r3, [r0, #16]
 8005a4a:	690a      	ldr	r2, [r1, #16]
 8005a4c:	b530      	push	{r4, r5, lr}
 8005a4e:	1a9b      	subs	r3, r3, r2
 8005a50:	d10c      	bne.n	8005a6c <__mcmp+0x24>
 8005a52:	0092      	lsls	r2, r2, #2
 8005a54:	3014      	adds	r0, #20
 8005a56:	3114      	adds	r1, #20
 8005a58:	1884      	adds	r4, r0, r2
 8005a5a:	4411      	add	r1, r2
 8005a5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a64:	4295      	cmp	r5, r2
 8005a66:	d003      	beq.n	8005a70 <__mcmp+0x28>
 8005a68:	d305      	bcc.n	8005a76 <__mcmp+0x2e>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	bd30      	pop	{r4, r5, pc}
 8005a70:	42a0      	cmp	r0, r4
 8005a72:	d3f3      	bcc.n	8005a5c <__mcmp+0x14>
 8005a74:	e7fa      	b.n	8005a6c <__mcmp+0x24>
 8005a76:	f04f 33ff 	mov.w	r3, #4294967295
 8005a7a:	e7f7      	b.n	8005a6c <__mcmp+0x24>

08005a7c <__mdiff>:
 8005a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a80:	460d      	mov	r5, r1
 8005a82:	4607      	mov	r7, r0
 8005a84:	4611      	mov	r1, r2
 8005a86:	4628      	mov	r0, r5
 8005a88:	4614      	mov	r4, r2
 8005a8a:	f7ff ffdd 	bl	8005a48 <__mcmp>
 8005a8e:	1e06      	subs	r6, r0, #0
 8005a90:	d108      	bne.n	8005aa4 <__mdiff+0x28>
 8005a92:	4631      	mov	r1, r6
 8005a94:	4638      	mov	r0, r7
 8005a96:	f7ff fdc2 	bl	800561e <_Balloc>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa4:	bfa4      	itt	ge
 8005aa6:	4623      	movge	r3, r4
 8005aa8:	462c      	movge	r4, r5
 8005aaa:	4638      	mov	r0, r7
 8005aac:	6861      	ldr	r1, [r4, #4]
 8005aae:	bfa6      	itte	ge
 8005ab0:	461d      	movge	r5, r3
 8005ab2:	2600      	movge	r6, #0
 8005ab4:	2601      	movlt	r6, #1
 8005ab6:	f7ff fdb2 	bl	800561e <_Balloc>
 8005aba:	f04f 0e00 	mov.w	lr, #0
 8005abe:	60c6      	str	r6, [r0, #12]
 8005ac0:	692b      	ldr	r3, [r5, #16]
 8005ac2:	6926      	ldr	r6, [r4, #16]
 8005ac4:	f104 0214 	add.w	r2, r4, #20
 8005ac8:	f105 0914 	add.w	r9, r5, #20
 8005acc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005ad0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005ad4:	f100 0114 	add.w	r1, r0, #20
 8005ad8:	f852 ab04 	ldr.w	sl, [r2], #4
 8005adc:	f859 5b04 	ldr.w	r5, [r9], #4
 8005ae0:	fa1f f38a 	uxth.w	r3, sl
 8005ae4:	4473      	add	r3, lr
 8005ae6:	b2ac      	uxth	r4, r5
 8005ae8:	1b1b      	subs	r3, r3, r4
 8005aea:	0c2c      	lsrs	r4, r5, #16
 8005aec:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005af0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005afa:	45c8      	cmp	r8, r9
 8005afc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005b00:	4694      	mov	ip, r2
 8005b02:	f841 4b04 	str.w	r4, [r1], #4
 8005b06:	d8e7      	bhi.n	8005ad8 <__mdiff+0x5c>
 8005b08:	45bc      	cmp	ip, r7
 8005b0a:	d304      	bcc.n	8005b16 <__mdiff+0x9a>
 8005b0c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005b10:	b183      	cbz	r3, 8005b34 <__mdiff+0xb8>
 8005b12:	6106      	str	r6, [r0, #16]
 8005b14:	e7c4      	b.n	8005aa0 <__mdiff+0x24>
 8005b16:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005b1a:	b2a2      	uxth	r2, r4
 8005b1c:	4472      	add	r2, lr
 8005b1e:	1413      	asrs	r3, r2, #16
 8005b20:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005b24:	b292      	uxth	r2, r2
 8005b26:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b2a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005b2e:	f841 2b04 	str.w	r2, [r1], #4
 8005b32:	e7e9      	b.n	8005b08 <__mdiff+0x8c>
 8005b34:	3e01      	subs	r6, #1
 8005b36:	e7e9      	b.n	8005b0c <__mdiff+0x90>

08005b38 <__d2b>:
 8005b38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005b3c:	461c      	mov	r4, r3
 8005b3e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8005b42:	2101      	movs	r1, #1
 8005b44:	4690      	mov	r8, r2
 8005b46:	f7ff fd6a 	bl	800561e <_Balloc>
 8005b4a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005b4e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005b52:	4607      	mov	r7, r0
 8005b54:	bb34      	cbnz	r4, 8005ba4 <__d2b+0x6c>
 8005b56:	9201      	str	r2, [sp, #4]
 8005b58:	f1b8 0200 	subs.w	r2, r8, #0
 8005b5c:	d027      	beq.n	8005bae <__d2b+0x76>
 8005b5e:	a802      	add	r0, sp, #8
 8005b60:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005b64:	f7ff fe00 	bl	8005768 <__lo0bits>
 8005b68:	9900      	ldr	r1, [sp, #0]
 8005b6a:	b1f0      	cbz	r0, 8005baa <__d2b+0x72>
 8005b6c:	9a01      	ldr	r2, [sp, #4]
 8005b6e:	f1c0 0320 	rsb	r3, r0, #32
 8005b72:	fa02 f303 	lsl.w	r3, r2, r3
 8005b76:	430b      	orrs	r3, r1
 8005b78:	40c2      	lsrs	r2, r0
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	9201      	str	r2, [sp, #4]
 8005b7e:	9b01      	ldr	r3, [sp, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bf14      	ite	ne
 8005b84:	2102      	movne	r1, #2
 8005b86:	2101      	moveq	r1, #1
 8005b88:	61bb      	str	r3, [r7, #24]
 8005b8a:	6139      	str	r1, [r7, #16]
 8005b8c:	b1c4      	cbz	r4, 8005bc0 <__d2b+0x88>
 8005b8e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005b92:	4404      	add	r4, r0
 8005b94:	6034      	str	r4, [r6, #0]
 8005b96:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005b9a:	6028      	str	r0, [r5, #0]
 8005b9c:	4638      	mov	r0, r7
 8005b9e:	b002      	add	sp, #8
 8005ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ba4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005ba8:	e7d5      	b.n	8005b56 <__d2b+0x1e>
 8005baa:	6179      	str	r1, [r7, #20]
 8005bac:	e7e7      	b.n	8005b7e <__d2b+0x46>
 8005bae:	a801      	add	r0, sp, #4
 8005bb0:	f7ff fdda 	bl	8005768 <__lo0bits>
 8005bb4:	2101      	movs	r1, #1
 8005bb6:	9b01      	ldr	r3, [sp, #4]
 8005bb8:	6139      	str	r1, [r7, #16]
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	3020      	adds	r0, #32
 8005bbe:	e7e5      	b.n	8005b8c <__d2b+0x54>
 8005bc0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005bc4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005bc8:	6030      	str	r0, [r6, #0]
 8005bca:	6918      	ldr	r0, [r3, #16]
 8005bcc:	f7ff fdad 	bl	800572a <__hi0bits>
 8005bd0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005bd4:	e7e1      	b.n	8005b9a <__d2b+0x62>

08005bd6 <_calloc_r>:
 8005bd6:	b538      	push	{r3, r4, r5, lr}
 8005bd8:	fb02 f401 	mul.w	r4, r2, r1
 8005bdc:	4621      	mov	r1, r4
 8005bde:	f000 f855 	bl	8005c8c <_malloc_r>
 8005be2:	4605      	mov	r5, r0
 8005be4:	b118      	cbz	r0, 8005bee <_calloc_r+0x18>
 8005be6:	4622      	mov	r2, r4
 8005be8:	2100      	movs	r1, #0
 8005bea:	f7fe fa2d 	bl	8004048 <memset>
 8005bee:	4628      	mov	r0, r5
 8005bf0:	bd38      	pop	{r3, r4, r5, pc}
	...

08005bf4 <_free_r>:
 8005bf4:	b538      	push	{r3, r4, r5, lr}
 8005bf6:	4605      	mov	r5, r0
 8005bf8:	2900      	cmp	r1, #0
 8005bfa:	d043      	beq.n	8005c84 <_free_r+0x90>
 8005bfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c00:	1f0c      	subs	r4, r1, #4
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	bfb8      	it	lt
 8005c06:	18e4      	addlt	r4, r4, r3
 8005c08:	f000 fa27 	bl	800605a <__malloc_lock>
 8005c0c:	4a1e      	ldr	r2, [pc, #120]	; (8005c88 <_free_r+0x94>)
 8005c0e:	6813      	ldr	r3, [r2, #0]
 8005c10:	4610      	mov	r0, r2
 8005c12:	b933      	cbnz	r3, 8005c22 <_free_r+0x2e>
 8005c14:	6063      	str	r3, [r4, #4]
 8005c16:	6014      	str	r4, [r2, #0]
 8005c18:	4628      	mov	r0, r5
 8005c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c1e:	f000 ba1d 	b.w	800605c <__malloc_unlock>
 8005c22:	42a3      	cmp	r3, r4
 8005c24:	d90b      	bls.n	8005c3e <_free_r+0x4a>
 8005c26:	6821      	ldr	r1, [r4, #0]
 8005c28:	1862      	adds	r2, r4, r1
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	bf01      	itttt	eq
 8005c2e:	681a      	ldreq	r2, [r3, #0]
 8005c30:	685b      	ldreq	r3, [r3, #4]
 8005c32:	1852      	addeq	r2, r2, r1
 8005c34:	6022      	streq	r2, [r4, #0]
 8005c36:	6063      	str	r3, [r4, #4]
 8005c38:	6004      	str	r4, [r0, #0]
 8005c3a:	e7ed      	b.n	8005c18 <_free_r+0x24>
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	b10a      	cbz	r2, 8005c46 <_free_r+0x52>
 8005c42:	42a2      	cmp	r2, r4
 8005c44:	d9fa      	bls.n	8005c3c <_free_r+0x48>
 8005c46:	6819      	ldr	r1, [r3, #0]
 8005c48:	1858      	adds	r0, r3, r1
 8005c4a:	42a0      	cmp	r0, r4
 8005c4c:	d10b      	bne.n	8005c66 <_free_r+0x72>
 8005c4e:	6820      	ldr	r0, [r4, #0]
 8005c50:	4401      	add	r1, r0
 8005c52:	1858      	adds	r0, r3, r1
 8005c54:	4282      	cmp	r2, r0
 8005c56:	6019      	str	r1, [r3, #0]
 8005c58:	d1de      	bne.n	8005c18 <_free_r+0x24>
 8005c5a:	6810      	ldr	r0, [r2, #0]
 8005c5c:	6852      	ldr	r2, [r2, #4]
 8005c5e:	4401      	add	r1, r0
 8005c60:	6019      	str	r1, [r3, #0]
 8005c62:	605a      	str	r2, [r3, #4]
 8005c64:	e7d8      	b.n	8005c18 <_free_r+0x24>
 8005c66:	d902      	bls.n	8005c6e <_free_r+0x7a>
 8005c68:	230c      	movs	r3, #12
 8005c6a:	602b      	str	r3, [r5, #0]
 8005c6c:	e7d4      	b.n	8005c18 <_free_r+0x24>
 8005c6e:	6820      	ldr	r0, [r4, #0]
 8005c70:	1821      	adds	r1, r4, r0
 8005c72:	428a      	cmp	r2, r1
 8005c74:	bf01      	itttt	eq
 8005c76:	6811      	ldreq	r1, [r2, #0]
 8005c78:	6852      	ldreq	r2, [r2, #4]
 8005c7a:	1809      	addeq	r1, r1, r0
 8005c7c:	6021      	streq	r1, [r4, #0]
 8005c7e:	6062      	str	r2, [r4, #4]
 8005c80:	605c      	str	r4, [r3, #4]
 8005c82:	e7c9      	b.n	8005c18 <_free_r+0x24>
 8005c84:	bd38      	pop	{r3, r4, r5, pc}
 8005c86:	bf00      	nop
 8005c88:	20000200 	.word	0x20000200

08005c8c <_malloc_r>:
 8005c8c:	b570      	push	{r4, r5, r6, lr}
 8005c8e:	1ccd      	adds	r5, r1, #3
 8005c90:	f025 0503 	bic.w	r5, r5, #3
 8005c94:	3508      	adds	r5, #8
 8005c96:	2d0c      	cmp	r5, #12
 8005c98:	bf38      	it	cc
 8005c9a:	250c      	movcc	r5, #12
 8005c9c:	2d00      	cmp	r5, #0
 8005c9e:	4606      	mov	r6, r0
 8005ca0:	db01      	blt.n	8005ca6 <_malloc_r+0x1a>
 8005ca2:	42a9      	cmp	r1, r5
 8005ca4:	d903      	bls.n	8005cae <_malloc_r+0x22>
 8005ca6:	230c      	movs	r3, #12
 8005ca8:	6033      	str	r3, [r6, #0]
 8005caa:	2000      	movs	r0, #0
 8005cac:	bd70      	pop	{r4, r5, r6, pc}
 8005cae:	f000 f9d4 	bl	800605a <__malloc_lock>
 8005cb2:	4a21      	ldr	r2, [pc, #132]	; (8005d38 <_malloc_r+0xac>)
 8005cb4:	6814      	ldr	r4, [r2, #0]
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	b991      	cbnz	r1, 8005ce0 <_malloc_r+0x54>
 8005cba:	4c20      	ldr	r4, [pc, #128]	; (8005d3c <_malloc_r+0xb0>)
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	b91b      	cbnz	r3, 8005cc8 <_malloc_r+0x3c>
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	f000 f98f 	bl	8005fe4 <_sbrk_r>
 8005cc6:	6020      	str	r0, [r4, #0]
 8005cc8:	4629      	mov	r1, r5
 8005cca:	4630      	mov	r0, r6
 8005ccc:	f000 f98a 	bl	8005fe4 <_sbrk_r>
 8005cd0:	1c43      	adds	r3, r0, #1
 8005cd2:	d124      	bne.n	8005d1e <_malloc_r+0x92>
 8005cd4:	230c      	movs	r3, #12
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	6033      	str	r3, [r6, #0]
 8005cda:	f000 f9bf 	bl	800605c <__malloc_unlock>
 8005cde:	e7e4      	b.n	8005caa <_malloc_r+0x1e>
 8005ce0:	680b      	ldr	r3, [r1, #0]
 8005ce2:	1b5b      	subs	r3, r3, r5
 8005ce4:	d418      	bmi.n	8005d18 <_malloc_r+0x8c>
 8005ce6:	2b0b      	cmp	r3, #11
 8005ce8:	d90f      	bls.n	8005d0a <_malloc_r+0x7e>
 8005cea:	600b      	str	r3, [r1, #0]
 8005cec:	18cc      	adds	r4, r1, r3
 8005cee:	50cd      	str	r5, [r1, r3]
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	f000 f9b3 	bl	800605c <__malloc_unlock>
 8005cf6:	f104 000b 	add.w	r0, r4, #11
 8005cfa:	1d23      	adds	r3, r4, #4
 8005cfc:	f020 0007 	bic.w	r0, r0, #7
 8005d00:	1ac3      	subs	r3, r0, r3
 8005d02:	d0d3      	beq.n	8005cac <_malloc_r+0x20>
 8005d04:	425a      	negs	r2, r3
 8005d06:	50e2      	str	r2, [r4, r3]
 8005d08:	e7d0      	b.n	8005cac <_malloc_r+0x20>
 8005d0a:	684b      	ldr	r3, [r1, #4]
 8005d0c:	428c      	cmp	r4, r1
 8005d0e:	bf16      	itet	ne
 8005d10:	6063      	strne	r3, [r4, #4]
 8005d12:	6013      	streq	r3, [r2, #0]
 8005d14:	460c      	movne	r4, r1
 8005d16:	e7eb      	b.n	8005cf0 <_malloc_r+0x64>
 8005d18:	460c      	mov	r4, r1
 8005d1a:	6849      	ldr	r1, [r1, #4]
 8005d1c:	e7cc      	b.n	8005cb8 <_malloc_r+0x2c>
 8005d1e:	1cc4      	adds	r4, r0, #3
 8005d20:	f024 0403 	bic.w	r4, r4, #3
 8005d24:	42a0      	cmp	r0, r4
 8005d26:	d005      	beq.n	8005d34 <_malloc_r+0xa8>
 8005d28:	1a21      	subs	r1, r4, r0
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	f000 f95a 	bl	8005fe4 <_sbrk_r>
 8005d30:	3001      	adds	r0, #1
 8005d32:	d0cf      	beq.n	8005cd4 <_malloc_r+0x48>
 8005d34:	6025      	str	r5, [r4, #0]
 8005d36:	e7db      	b.n	8005cf0 <_malloc_r+0x64>
 8005d38:	20000200 	.word	0x20000200
 8005d3c:	20000204 	.word	0x20000204

08005d40 <__ssputs_r>:
 8005d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d44:	688e      	ldr	r6, [r1, #8]
 8005d46:	4682      	mov	sl, r0
 8005d48:	429e      	cmp	r6, r3
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	4690      	mov	r8, r2
 8005d4e:	4699      	mov	r9, r3
 8005d50:	d837      	bhi.n	8005dc2 <__ssputs_r+0x82>
 8005d52:	898a      	ldrh	r2, [r1, #12]
 8005d54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d58:	d031      	beq.n	8005dbe <__ssputs_r+0x7e>
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	6825      	ldr	r5, [r4, #0]
 8005d5e:	6909      	ldr	r1, [r1, #16]
 8005d60:	1a6f      	subs	r7, r5, r1
 8005d62:	6965      	ldr	r5, [r4, #20]
 8005d64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d68:	fb95 f5f3 	sdiv	r5, r5, r3
 8005d6c:	f109 0301 	add.w	r3, r9, #1
 8005d70:	443b      	add	r3, r7
 8005d72:	429d      	cmp	r5, r3
 8005d74:	bf38      	it	cc
 8005d76:	461d      	movcc	r5, r3
 8005d78:	0553      	lsls	r3, r2, #21
 8005d7a:	d530      	bpl.n	8005dde <__ssputs_r+0x9e>
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	f7ff ff85 	bl	8005c8c <_malloc_r>
 8005d82:	4606      	mov	r6, r0
 8005d84:	b950      	cbnz	r0, 8005d9c <__ssputs_r+0x5c>
 8005d86:	230c      	movs	r3, #12
 8005d88:	f04f 30ff 	mov.w	r0, #4294967295
 8005d8c:	f8ca 3000 	str.w	r3, [sl]
 8005d90:	89a3      	ldrh	r3, [r4, #12]
 8005d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d96:	81a3      	strh	r3, [r4, #12]
 8005d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d9c:	463a      	mov	r2, r7
 8005d9e:	6921      	ldr	r1, [r4, #16]
 8005da0:	f7ff fc32 	bl	8005608 <memcpy>
 8005da4:	89a3      	ldrh	r3, [r4, #12]
 8005da6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dae:	81a3      	strh	r3, [r4, #12]
 8005db0:	6126      	str	r6, [r4, #16]
 8005db2:	443e      	add	r6, r7
 8005db4:	6026      	str	r6, [r4, #0]
 8005db6:	464e      	mov	r6, r9
 8005db8:	6165      	str	r5, [r4, #20]
 8005dba:	1bed      	subs	r5, r5, r7
 8005dbc:	60a5      	str	r5, [r4, #8]
 8005dbe:	454e      	cmp	r6, r9
 8005dc0:	d900      	bls.n	8005dc4 <__ssputs_r+0x84>
 8005dc2:	464e      	mov	r6, r9
 8005dc4:	4632      	mov	r2, r6
 8005dc6:	4641      	mov	r1, r8
 8005dc8:	6820      	ldr	r0, [r4, #0]
 8005dca:	f000 f92d 	bl	8006028 <memmove>
 8005dce:	68a3      	ldr	r3, [r4, #8]
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	1b9b      	subs	r3, r3, r6
 8005dd4:	60a3      	str	r3, [r4, #8]
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	441e      	add	r6, r3
 8005dda:	6026      	str	r6, [r4, #0]
 8005ddc:	e7dc      	b.n	8005d98 <__ssputs_r+0x58>
 8005dde:	462a      	mov	r2, r5
 8005de0:	f000 f93d 	bl	800605e <_realloc_r>
 8005de4:	4606      	mov	r6, r0
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d1e2      	bne.n	8005db0 <__ssputs_r+0x70>
 8005dea:	6921      	ldr	r1, [r4, #16]
 8005dec:	4650      	mov	r0, sl
 8005dee:	f7ff ff01 	bl	8005bf4 <_free_r>
 8005df2:	e7c8      	b.n	8005d86 <__ssputs_r+0x46>

08005df4 <_svfiprintf_r>:
 8005df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df8:	461d      	mov	r5, r3
 8005dfa:	898b      	ldrh	r3, [r1, #12]
 8005dfc:	b09d      	sub	sp, #116	; 0x74
 8005dfe:	061f      	lsls	r7, r3, #24
 8005e00:	4680      	mov	r8, r0
 8005e02:	460c      	mov	r4, r1
 8005e04:	4616      	mov	r6, r2
 8005e06:	d50f      	bpl.n	8005e28 <_svfiprintf_r+0x34>
 8005e08:	690b      	ldr	r3, [r1, #16]
 8005e0a:	b96b      	cbnz	r3, 8005e28 <_svfiprintf_r+0x34>
 8005e0c:	2140      	movs	r1, #64	; 0x40
 8005e0e:	f7ff ff3d 	bl	8005c8c <_malloc_r>
 8005e12:	6020      	str	r0, [r4, #0]
 8005e14:	6120      	str	r0, [r4, #16]
 8005e16:	b928      	cbnz	r0, 8005e24 <_svfiprintf_r+0x30>
 8005e18:	230c      	movs	r3, #12
 8005e1a:	f8c8 3000 	str.w	r3, [r8]
 8005e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e22:	e0c8      	b.n	8005fb6 <_svfiprintf_r+0x1c2>
 8005e24:	2340      	movs	r3, #64	; 0x40
 8005e26:	6163      	str	r3, [r4, #20]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e2c:	2320      	movs	r3, #32
 8005e2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e32:	2330      	movs	r3, #48	; 0x30
 8005e34:	f04f 0b01 	mov.w	fp, #1
 8005e38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e3c:	9503      	str	r5, [sp, #12]
 8005e3e:	4637      	mov	r7, r6
 8005e40:	463d      	mov	r5, r7
 8005e42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005e46:	b10b      	cbz	r3, 8005e4c <_svfiprintf_r+0x58>
 8005e48:	2b25      	cmp	r3, #37	; 0x25
 8005e4a:	d13e      	bne.n	8005eca <_svfiprintf_r+0xd6>
 8005e4c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005e50:	d00b      	beq.n	8005e6a <_svfiprintf_r+0x76>
 8005e52:	4653      	mov	r3, sl
 8005e54:	4632      	mov	r2, r6
 8005e56:	4621      	mov	r1, r4
 8005e58:	4640      	mov	r0, r8
 8005e5a:	f7ff ff71 	bl	8005d40 <__ssputs_r>
 8005e5e:	3001      	adds	r0, #1
 8005e60:	f000 80a4 	beq.w	8005fac <_svfiprintf_r+0x1b8>
 8005e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e66:	4453      	add	r3, sl
 8005e68:	9309      	str	r3, [sp, #36]	; 0x24
 8005e6a:	783b      	ldrb	r3, [r7, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 809d 	beq.w	8005fac <_svfiprintf_r+0x1b8>
 8005e72:	2300      	movs	r3, #0
 8005e74:	f04f 32ff 	mov.w	r2, #4294967295
 8005e78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e7c:	9304      	str	r3, [sp, #16]
 8005e7e:	9307      	str	r3, [sp, #28]
 8005e80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e84:	931a      	str	r3, [sp, #104]	; 0x68
 8005e86:	462f      	mov	r7, r5
 8005e88:	2205      	movs	r2, #5
 8005e8a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005e8e:	4850      	ldr	r0, [pc, #320]	; (8005fd0 <_svfiprintf_r+0x1dc>)
 8005e90:	f7ff fbac 	bl	80055ec <memchr>
 8005e94:	9b04      	ldr	r3, [sp, #16]
 8005e96:	b9d0      	cbnz	r0, 8005ece <_svfiprintf_r+0xda>
 8005e98:	06d9      	lsls	r1, r3, #27
 8005e9a:	bf44      	itt	mi
 8005e9c:	2220      	movmi	r2, #32
 8005e9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ea2:	071a      	lsls	r2, r3, #28
 8005ea4:	bf44      	itt	mi
 8005ea6:	222b      	movmi	r2, #43	; 0x2b
 8005ea8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005eac:	782a      	ldrb	r2, [r5, #0]
 8005eae:	2a2a      	cmp	r2, #42	; 0x2a
 8005eb0:	d015      	beq.n	8005ede <_svfiprintf_r+0xea>
 8005eb2:	462f      	mov	r7, r5
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	250a      	movs	r5, #10
 8005eb8:	9a07      	ldr	r2, [sp, #28]
 8005eba:	4639      	mov	r1, r7
 8005ebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ec0:	3b30      	subs	r3, #48	; 0x30
 8005ec2:	2b09      	cmp	r3, #9
 8005ec4:	d94d      	bls.n	8005f62 <_svfiprintf_r+0x16e>
 8005ec6:	b1b8      	cbz	r0, 8005ef8 <_svfiprintf_r+0x104>
 8005ec8:	e00f      	b.n	8005eea <_svfiprintf_r+0xf6>
 8005eca:	462f      	mov	r7, r5
 8005ecc:	e7b8      	b.n	8005e40 <_svfiprintf_r+0x4c>
 8005ece:	4a40      	ldr	r2, [pc, #256]	; (8005fd0 <_svfiprintf_r+0x1dc>)
 8005ed0:	463d      	mov	r5, r7
 8005ed2:	1a80      	subs	r0, r0, r2
 8005ed4:	fa0b f000 	lsl.w	r0, fp, r0
 8005ed8:	4318      	orrs	r0, r3
 8005eda:	9004      	str	r0, [sp, #16]
 8005edc:	e7d3      	b.n	8005e86 <_svfiprintf_r+0x92>
 8005ede:	9a03      	ldr	r2, [sp, #12]
 8005ee0:	1d11      	adds	r1, r2, #4
 8005ee2:	6812      	ldr	r2, [r2, #0]
 8005ee4:	9103      	str	r1, [sp, #12]
 8005ee6:	2a00      	cmp	r2, #0
 8005ee8:	db01      	blt.n	8005eee <_svfiprintf_r+0xfa>
 8005eea:	9207      	str	r2, [sp, #28]
 8005eec:	e004      	b.n	8005ef8 <_svfiprintf_r+0x104>
 8005eee:	4252      	negs	r2, r2
 8005ef0:	f043 0302 	orr.w	r3, r3, #2
 8005ef4:	9207      	str	r2, [sp, #28]
 8005ef6:	9304      	str	r3, [sp, #16]
 8005ef8:	783b      	ldrb	r3, [r7, #0]
 8005efa:	2b2e      	cmp	r3, #46	; 0x2e
 8005efc:	d10c      	bne.n	8005f18 <_svfiprintf_r+0x124>
 8005efe:	787b      	ldrb	r3, [r7, #1]
 8005f00:	2b2a      	cmp	r3, #42	; 0x2a
 8005f02:	d133      	bne.n	8005f6c <_svfiprintf_r+0x178>
 8005f04:	9b03      	ldr	r3, [sp, #12]
 8005f06:	3702      	adds	r7, #2
 8005f08:	1d1a      	adds	r2, r3, #4
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	9203      	str	r2, [sp, #12]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	bfb8      	it	lt
 8005f12:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f16:	9305      	str	r3, [sp, #20]
 8005f18:	4d2e      	ldr	r5, [pc, #184]	; (8005fd4 <_svfiprintf_r+0x1e0>)
 8005f1a:	2203      	movs	r2, #3
 8005f1c:	7839      	ldrb	r1, [r7, #0]
 8005f1e:	4628      	mov	r0, r5
 8005f20:	f7ff fb64 	bl	80055ec <memchr>
 8005f24:	b138      	cbz	r0, 8005f36 <_svfiprintf_r+0x142>
 8005f26:	2340      	movs	r3, #64	; 0x40
 8005f28:	1b40      	subs	r0, r0, r5
 8005f2a:	fa03 f000 	lsl.w	r0, r3, r0
 8005f2e:	9b04      	ldr	r3, [sp, #16]
 8005f30:	3701      	adds	r7, #1
 8005f32:	4303      	orrs	r3, r0
 8005f34:	9304      	str	r3, [sp, #16]
 8005f36:	7839      	ldrb	r1, [r7, #0]
 8005f38:	2206      	movs	r2, #6
 8005f3a:	4827      	ldr	r0, [pc, #156]	; (8005fd8 <_svfiprintf_r+0x1e4>)
 8005f3c:	1c7e      	adds	r6, r7, #1
 8005f3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f42:	f7ff fb53 	bl	80055ec <memchr>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d038      	beq.n	8005fbc <_svfiprintf_r+0x1c8>
 8005f4a:	4b24      	ldr	r3, [pc, #144]	; (8005fdc <_svfiprintf_r+0x1e8>)
 8005f4c:	bb13      	cbnz	r3, 8005f94 <_svfiprintf_r+0x1a0>
 8005f4e:	9b03      	ldr	r3, [sp, #12]
 8005f50:	3307      	adds	r3, #7
 8005f52:	f023 0307 	bic.w	r3, r3, #7
 8005f56:	3308      	adds	r3, #8
 8005f58:	9303      	str	r3, [sp, #12]
 8005f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f5c:	444b      	add	r3, r9
 8005f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f60:	e76d      	b.n	8005e3e <_svfiprintf_r+0x4a>
 8005f62:	fb05 3202 	mla	r2, r5, r2, r3
 8005f66:	2001      	movs	r0, #1
 8005f68:	460f      	mov	r7, r1
 8005f6a:	e7a6      	b.n	8005eba <_svfiprintf_r+0xc6>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	250a      	movs	r5, #10
 8005f70:	4619      	mov	r1, r3
 8005f72:	3701      	adds	r7, #1
 8005f74:	9305      	str	r3, [sp, #20]
 8005f76:	4638      	mov	r0, r7
 8005f78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f7c:	3a30      	subs	r2, #48	; 0x30
 8005f7e:	2a09      	cmp	r2, #9
 8005f80:	d903      	bls.n	8005f8a <_svfiprintf_r+0x196>
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0c8      	beq.n	8005f18 <_svfiprintf_r+0x124>
 8005f86:	9105      	str	r1, [sp, #20]
 8005f88:	e7c6      	b.n	8005f18 <_svfiprintf_r+0x124>
 8005f8a:	fb05 2101 	mla	r1, r5, r1, r2
 8005f8e:	2301      	movs	r3, #1
 8005f90:	4607      	mov	r7, r0
 8005f92:	e7f0      	b.n	8005f76 <_svfiprintf_r+0x182>
 8005f94:	ab03      	add	r3, sp, #12
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	4622      	mov	r2, r4
 8005f9a:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <_svfiprintf_r+0x1ec>)
 8005f9c:	a904      	add	r1, sp, #16
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	f7fe f8ec 	bl	800417c <_printf_float>
 8005fa4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005fa8:	4681      	mov	r9, r0
 8005faa:	d1d6      	bne.n	8005f5a <_svfiprintf_r+0x166>
 8005fac:	89a3      	ldrh	r3, [r4, #12]
 8005fae:	065b      	lsls	r3, r3, #25
 8005fb0:	f53f af35 	bmi.w	8005e1e <_svfiprintf_r+0x2a>
 8005fb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fb6:	b01d      	add	sp, #116	; 0x74
 8005fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fbc:	ab03      	add	r3, sp, #12
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	4622      	mov	r2, r4
 8005fc2:	4b07      	ldr	r3, [pc, #28]	; (8005fe0 <_svfiprintf_r+0x1ec>)
 8005fc4:	a904      	add	r1, sp, #16
 8005fc6:	4640      	mov	r0, r8
 8005fc8:	f7fe fb84 	bl	80046d4 <_printf_i>
 8005fcc:	e7ea      	b.n	8005fa4 <_svfiprintf_r+0x1b0>
 8005fce:	bf00      	nop
 8005fd0:	0800627c 	.word	0x0800627c
 8005fd4:	08006282 	.word	0x08006282
 8005fd8:	08006286 	.word	0x08006286
 8005fdc:	0800417d 	.word	0x0800417d
 8005fe0:	08005d41 	.word	0x08005d41

08005fe4 <_sbrk_r>:
 8005fe4:	b538      	push	{r3, r4, r5, lr}
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	4c05      	ldr	r4, [pc, #20]	; (8006000 <_sbrk_r+0x1c>)
 8005fea:	4605      	mov	r5, r0
 8005fec:	4608      	mov	r0, r1
 8005fee:	6023      	str	r3, [r4, #0]
 8005ff0:	f7fd ff7a 	bl	8003ee8 <_sbrk>
 8005ff4:	1c43      	adds	r3, r0, #1
 8005ff6:	d102      	bne.n	8005ffe <_sbrk_r+0x1a>
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	b103      	cbz	r3, 8005ffe <_sbrk_r+0x1a>
 8005ffc:	602b      	str	r3, [r5, #0]
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
 8006000:	20000378 	.word	0x20000378

08006004 <__ascii_mbtowc>:
 8006004:	b082      	sub	sp, #8
 8006006:	b901      	cbnz	r1, 800600a <__ascii_mbtowc+0x6>
 8006008:	a901      	add	r1, sp, #4
 800600a:	b142      	cbz	r2, 800601e <__ascii_mbtowc+0x1a>
 800600c:	b14b      	cbz	r3, 8006022 <__ascii_mbtowc+0x1e>
 800600e:	7813      	ldrb	r3, [r2, #0]
 8006010:	600b      	str	r3, [r1, #0]
 8006012:	7812      	ldrb	r2, [r2, #0]
 8006014:	1c10      	adds	r0, r2, #0
 8006016:	bf18      	it	ne
 8006018:	2001      	movne	r0, #1
 800601a:	b002      	add	sp, #8
 800601c:	4770      	bx	lr
 800601e:	4610      	mov	r0, r2
 8006020:	e7fb      	b.n	800601a <__ascii_mbtowc+0x16>
 8006022:	f06f 0001 	mvn.w	r0, #1
 8006026:	e7f8      	b.n	800601a <__ascii_mbtowc+0x16>

08006028 <memmove>:
 8006028:	4288      	cmp	r0, r1
 800602a:	b510      	push	{r4, lr}
 800602c:	eb01 0302 	add.w	r3, r1, r2
 8006030:	d807      	bhi.n	8006042 <memmove+0x1a>
 8006032:	1e42      	subs	r2, r0, #1
 8006034:	4299      	cmp	r1, r3
 8006036:	d00a      	beq.n	800604e <memmove+0x26>
 8006038:	f811 4b01 	ldrb.w	r4, [r1], #1
 800603c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006040:	e7f8      	b.n	8006034 <memmove+0xc>
 8006042:	4283      	cmp	r3, r0
 8006044:	d9f5      	bls.n	8006032 <memmove+0xa>
 8006046:	1881      	adds	r1, r0, r2
 8006048:	1ad2      	subs	r2, r2, r3
 800604a:	42d3      	cmn	r3, r2
 800604c:	d100      	bne.n	8006050 <memmove+0x28>
 800604e:	bd10      	pop	{r4, pc}
 8006050:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006054:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006058:	e7f7      	b.n	800604a <memmove+0x22>

0800605a <__malloc_lock>:
 800605a:	4770      	bx	lr

0800605c <__malloc_unlock>:
 800605c:	4770      	bx	lr

0800605e <_realloc_r>:
 800605e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006060:	4607      	mov	r7, r0
 8006062:	4614      	mov	r4, r2
 8006064:	460e      	mov	r6, r1
 8006066:	b921      	cbnz	r1, 8006072 <_realloc_r+0x14>
 8006068:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800606c:	4611      	mov	r1, r2
 800606e:	f7ff be0d 	b.w	8005c8c <_malloc_r>
 8006072:	b922      	cbnz	r2, 800607e <_realloc_r+0x20>
 8006074:	f7ff fdbe 	bl	8005bf4 <_free_r>
 8006078:	4625      	mov	r5, r4
 800607a:	4628      	mov	r0, r5
 800607c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800607e:	f000 f821 	bl	80060c4 <_malloc_usable_size_r>
 8006082:	42a0      	cmp	r0, r4
 8006084:	d20f      	bcs.n	80060a6 <_realloc_r+0x48>
 8006086:	4621      	mov	r1, r4
 8006088:	4638      	mov	r0, r7
 800608a:	f7ff fdff 	bl	8005c8c <_malloc_r>
 800608e:	4605      	mov	r5, r0
 8006090:	2800      	cmp	r0, #0
 8006092:	d0f2      	beq.n	800607a <_realloc_r+0x1c>
 8006094:	4631      	mov	r1, r6
 8006096:	4622      	mov	r2, r4
 8006098:	f7ff fab6 	bl	8005608 <memcpy>
 800609c:	4631      	mov	r1, r6
 800609e:	4638      	mov	r0, r7
 80060a0:	f7ff fda8 	bl	8005bf4 <_free_r>
 80060a4:	e7e9      	b.n	800607a <_realloc_r+0x1c>
 80060a6:	4635      	mov	r5, r6
 80060a8:	e7e7      	b.n	800607a <_realloc_r+0x1c>

080060aa <__ascii_wctomb>:
 80060aa:	b149      	cbz	r1, 80060c0 <__ascii_wctomb+0x16>
 80060ac:	2aff      	cmp	r2, #255	; 0xff
 80060ae:	bf8b      	itete	hi
 80060b0:	238a      	movhi	r3, #138	; 0x8a
 80060b2:	700a      	strbls	r2, [r1, #0]
 80060b4:	6003      	strhi	r3, [r0, #0]
 80060b6:	2001      	movls	r0, #1
 80060b8:	bf88      	it	hi
 80060ba:	f04f 30ff 	movhi.w	r0, #4294967295
 80060be:	4770      	bx	lr
 80060c0:	4608      	mov	r0, r1
 80060c2:	4770      	bx	lr

080060c4 <_malloc_usable_size_r>:
 80060c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060c8:	1f18      	subs	r0, r3, #4
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	bfbc      	itt	lt
 80060ce:	580b      	ldrlt	r3, [r1, r0]
 80060d0:	18c0      	addlt	r0, r0, r3
 80060d2:	4770      	bx	lr

080060d4 <_init>:
 80060d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d6:	bf00      	nop
 80060d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060da:	bc08      	pop	{r3}
 80060dc:	469e      	mov	lr, r3
 80060de:	4770      	bx	lr

080060e0 <_fini>:
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e2:	bf00      	nop
 80060e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e6:	bc08      	pop	{r3}
 80060e8:	469e      	mov	lr, r3
 80060ea:	4770      	bx	lr

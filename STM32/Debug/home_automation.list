
home_automation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002628  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002734  08002734  00012734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027b0  080027b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080027b0  080027b0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027b0  080027b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027b4  080027b4  000127b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080027b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000070  08002828  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002828  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000062e2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014fe  00000000  00000000  0002637b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000680  00000000  00000000  00027880  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005c8  00000000  00000000  00027f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012e01  00000000  00000000  000284c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000059fc  00000000  00000000  0003b2c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006a98b  00000000  00000000  00040cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ab650  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c14  00000000  00000000  000ab6cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800271c 	.word	0x0800271c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800271c 	.word	0x0800271c

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f923 	bl	80003a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fd0c 	bl	8001b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f93b 	bl	8000412 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f903 	bl	80003be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000098 	.word	0x20000098

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000098 	.word	0x20000098

08000210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <__NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	2b00      	cmp	r3, #0
 8000284:	db0b      	blt.n	800029e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f003 021f 	and.w	r2, r3, #31
 800028c:	4906      	ldr	r1, [pc, #24]	; (80002a8 <__NVIC_EnableIRQ+0x34>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	095b      	lsrs	r3, r3, #5
 8000294:	2001      	movs	r0, #1
 8000296:	fa00 f202 	lsl.w	r2, r0, r2
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	; (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	; (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000300:	b480      	push	{r7}
 8000302:	b089      	sub	sp, #36	; 0x24
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f003 0307 	and.w	r3, r3, #7
 8000312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	f1c3 0307 	rsb	r3, r3, #7
 800031a:	2b04      	cmp	r3, #4
 800031c:	bf28      	it	cs
 800031e:	2304      	movcs	r3, #4
 8000320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3304      	adds	r3, #4
 8000326:	2b06      	cmp	r3, #6
 8000328:	d902      	bls.n	8000330 <NVIC_EncodePriority+0x30>
 800032a:	69fb      	ldr	r3, [r7, #28]
 800032c:	3b03      	subs	r3, #3
 800032e:	e000      	b.n	8000332 <NVIC_EncodePriority+0x32>
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000334:	f04f 32ff 	mov.w	r2, #4294967295
 8000338:	69bb      	ldr	r3, [r7, #24]
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	43da      	mvns	r2, r3
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	401a      	ands	r2, r3
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000348:	f04f 31ff 	mov.w	r1, #4294967295
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	43d9      	mvns	r1, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	4313      	orrs	r3, r2
         );
}
 800035a:	4618      	mov	r0, r3
 800035c:	3724      	adds	r7, #36	; 0x24
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3b01      	subs	r3, #1
 8000370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000374:	d301      	bcc.n	800037a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000376:	2301      	movs	r3, #1
 8000378:	e00f      	b.n	800039a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <SysTick_Config+0x40>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3b01      	subs	r3, #1
 8000380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000382:	210f      	movs	r1, #15
 8000384:	f04f 30ff 	mov.w	r0, #4294967295
 8000388:	f7ff ff90 	bl	80002ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <SysTick_Config+0x40>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000392:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <SysTick_Config+0x40>)
 8000394:	2207      	movs	r2, #7
 8000396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000398:	2300      	movs	r3, #0
}
 800039a:	4618      	mov	r0, r3
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	e000e010 	.word	0xe000e010

080003a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ff2d 	bl	8000210 <__NVIC_SetPriorityGrouping>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003be:	b580      	push	{r7, lr}
 80003c0:	b086      	sub	sp, #24
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	4603      	mov	r3, r0
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
 80003ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003d0:	f7ff ff42 	bl	8000258 <__NVIC_GetPriorityGrouping>
 80003d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	68b9      	ldr	r1, [r7, #8]
 80003da:	6978      	ldr	r0, [r7, #20]
 80003dc:	f7ff ff90 	bl	8000300 <NVIC_EncodePriority>
 80003e0:	4602      	mov	r2, r0
 80003e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003e6:	4611      	mov	r1, r2
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff5f 	bl	80002ac <__NVIC_SetPriority>
}
 80003ee:	bf00      	nop
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	4603      	mov	r3, r0
 80003fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff35 	bl	8000274 <__NVIC_EnableIRQ>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f7ff ffa2 	bl	8000364 <SysTick_Config>
 8000420:	4603      	mov	r3, r0
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000434:	2300      	movs	r3, #0
 8000436:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800043e:	2b02      	cmp	r3, #2
 8000440:	d005      	beq.n	800044e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	2204      	movs	r2, #4
 8000446:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000448:	2301      	movs	r3, #1
 800044a:	73fb      	strb	r3, [r7, #15]
 800044c:	e051      	b.n	80004f2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f022 020e 	bic.w	r2, r2, #14
 800045c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f022 0201 	bic.w	r2, r2, #1
 800046c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a22      	ldr	r2, [pc, #136]	; (80004fc <HAL_DMA_Abort_IT+0xd0>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d029      	beq.n	80004cc <HAL_DMA_Abort_IT+0xa0>
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a20      	ldr	r2, [pc, #128]	; (8000500 <HAL_DMA_Abort_IT+0xd4>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d022      	beq.n	80004c8 <HAL_DMA_Abort_IT+0x9c>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a1f      	ldr	r2, [pc, #124]	; (8000504 <HAL_DMA_Abort_IT+0xd8>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d01a      	beq.n	80004c2 <HAL_DMA_Abort_IT+0x96>
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a1d      	ldr	r2, [pc, #116]	; (8000508 <HAL_DMA_Abort_IT+0xdc>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d012      	beq.n	80004bc <HAL_DMA_Abort_IT+0x90>
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a1c      	ldr	r2, [pc, #112]	; (800050c <HAL_DMA_Abort_IT+0xe0>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d00a      	beq.n	80004b6 <HAL_DMA_Abort_IT+0x8a>
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a1a      	ldr	r2, [pc, #104]	; (8000510 <HAL_DMA_Abort_IT+0xe4>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d102      	bne.n	80004b0 <HAL_DMA_Abort_IT+0x84>
 80004aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004ae:	e00e      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80004b4:	e00b      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ba:	e008      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004c0:	e005      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004c6:	e002      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004c8:	2310      	movs	r3, #16
 80004ca:	e000      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004cc:	2301      	movs	r3, #1
 80004ce:	4a11      	ldr	r2, [pc, #68]	; (8000514 <HAL_DMA_Abort_IT+0xe8>)
 80004d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2201      	movs	r2, #1
 80004d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2200      	movs	r2, #0
 80004de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d003      	beq.n	80004f2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	4798      	blx	r3
    } 
  }
  return status;
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3710      	adds	r7, #16
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40020008 	.word	0x40020008
 8000500:	4002001c 	.word	0x4002001c
 8000504:	40020030 	.word	0x40020030
 8000508:	40020044 	.word	0x40020044
 800050c:	40020058 	.word	0x40020058
 8000510:	4002006c 	.word	0x4002006c
 8000514:	40020000 	.word	0x40020000

08000518 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000518:	b480      	push	{r7}
 800051a:	b08b      	sub	sp, #44	; 0x2c
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000522:	2300      	movs	r3, #0
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000526:	2300      	movs	r3, #0
 8000528:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800052a:	e127      	b.n	800077c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800052c:	2201      	movs	r2, #1
 800052e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000530:	fa02 f303 	lsl.w	r3, r2, r3
 8000534:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	69fa      	ldr	r2, [r7, #28]
 800053c:	4013      	ands	r3, r2
 800053e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000540:	69ba      	ldr	r2, [r7, #24]
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	429a      	cmp	r2, r3
 8000546:	f040 8116 	bne.w	8000776 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	2b12      	cmp	r3, #18
 8000550:	d034      	beq.n	80005bc <HAL_GPIO_Init+0xa4>
 8000552:	2b12      	cmp	r3, #18
 8000554:	d80d      	bhi.n	8000572 <HAL_GPIO_Init+0x5a>
 8000556:	2b02      	cmp	r3, #2
 8000558:	d02b      	beq.n	80005b2 <HAL_GPIO_Init+0x9a>
 800055a:	2b02      	cmp	r3, #2
 800055c:	d804      	bhi.n	8000568 <HAL_GPIO_Init+0x50>
 800055e:	2b00      	cmp	r3, #0
 8000560:	d031      	beq.n	80005c6 <HAL_GPIO_Init+0xae>
 8000562:	2b01      	cmp	r3, #1
 8000564:	d01c      	beq.n	80005a0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000566:	e048      	b.n	80005fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000568:	2b03      	cmp	r3, #3
 800056a:	d043      	beq.n	80005f4 <HAL_GPIO_Init+0xdc>
 800056c:	2b11      	cmp	r3, #17
 800056e:	d01b      	beq.n	80005a8 <HAL_GPIO_Init+0x90>
          break;
 8000570:	e043      	b.n	80005fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000572:	4a89      	ldr	r2, [pc, #548]	; (8000798 <HAL_GPIO_Init+0x280>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d026      	beq.n	80005c6 <HAL_GPIO_Init+0xae>
 8000578:	4a87      	ldr	r2, [pc, #540]	; (8000798 <HAL_GPIO_Init+0x280>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d806      	bhi.n	800058c <HAL_GPIO_Init+0x74>
 800057e:	4a87      	ldr	r2, [pc, #540]	; (800079c <HAL_GPIO_Init+0x284>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d020      	beq.n	80005c6 <HAL_GPIO_Init+0xae>
 8000584:	4a86      	ldr	r2, [pc, #536]	; (80007a0 <HAL_GPIO_Init+0x288>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d01d      	beq.n	80005c6 <HAL_GPIO_Init+0xae>
          break;
 800058a:	e036      	b.n	80005fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800058c:	4a85      	ldr	r2, [pc, #532]	; (80007a4 <HAL_GPIO_Init+0x28c>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d019      	beq.n	80005c6 <HAL_GPIO_Init+0xae>
 8000592:	4a85      	ldr	r2, [pc, #532]	; (80007a8 <HAL_GPIO_Init+0x290>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d016      	beq.n	80005c6 <HAL_GPIO_Init+0xae>
 8000598:	4a84      	ldr	r2, [pc, #528]	; (80007ac <HAL_GPIO_Init+0x294>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d013      	beq.n	80005c6 <HAL_GPIO_Init+0xae>
          break;
 800059e:	e02c      	b.n	80005fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	623b      	str	r3, [r7, #32]
          break;
 80005a6:	e028      	b.n	80005fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	3304      	adds	r3, #4
 80005ae:	623b      	str	r3, [r7, #32]
          break;
 80005b0:	e023      	b.n	80005fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	68db      	ldr	r3, [r3, #12]
 80005b6:	3308      	adds	r3, #8
 80005b8:	623b      	str	r3, [r7, #32]
          break;
 80005ba:	e01e      	b.n	80005fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	330c      	adds	r3, #12
 80005c2:	623b      	str	r3, [r7, #32]
          break;
 80005c4:	e019      	b.n	80005fa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d102      	bne.n	80005d4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80005ce:	2304      	movs	r3, #4
 80005d0:	623b      	str	r3, [r7, #32]
          break;
 80005d2:	e012      	b.n	80005fa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d105      	bne.n	80005e8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005dc:	2308      	movs	r3, #8
 80005de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	69fa      	ldr	r2, [r7, #28]
 80005e4:	611a      	str	r2, [r3, #16]
          break;
 80005e6:	e008      	b.n	80005fa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005e8:	2308      	movs	r3, #8
 80005ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	69fa      	ldr	r2, [r7, #28]
 80005f0:	615a      	str	r2, [r3, #20]
          break;
 80005f2:	e002      	b.n	80005fa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80005f4:	2300      	movs	r3, #0
 80005f6:	623b      	str	r3, [r7, #32]
          break;
 80005f8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005fa:	69bb      	ldr	r3, [r7, #24]
 80005fc:	2bff      	cmp	r3, #255	; 0xff
 80005fe:	d801      	bhi.n	8000604 <HAL_GPIO_Init+0xec>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	e001      	b.n	8000608 <HAL_GPIO_Init+0xf0>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3304      	adds	r3, #4
 8000608:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800060a:	69bb      	ldr	r3, [r7, #24]
 800060c:	2bff      	cmp	r3, #255	; 0xff
 800060e:	d802      	bhi.n	8000616 <HAL_GPIO_Init+0xfe>
 8000610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	e002      	b.n	800061c <HAL_GPIO_Init+0x104>
 8000616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000618:	3b08      	subs	r3, #8
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	210f      	movs	r1, #15
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	fa01 f303 	lsl.w	r3, r1, r3
 800062a:	43db      	mvns	r3, r3
 800062c:	401a      	ands	r2, r3
 800062e:	6a39      	ldr	r1, [r7, #32]
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	fa01 f303 	lsl.w	r3, r1, r3
 8000636:	431a      	orrs	r2, r3
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	2b00      	cmp	r3, #0
 8000646:	f000 8096 	beq.w	8000776 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800064a:	4b59      	ldr	r3, [pc, #356]	; (80007b0 <HAL_GPIO_Init+0x298>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a58      	ldr	r2, [pc, #352]	; (80007b0 <HAL_GPIO_Init+0x298>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6193      	str	r3, [r2, #24]
 8000656:	4b56      	ldr	r3, [pc, #344]	; (80007b0 <HAL_GPIO_Init+0x298>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000662:	4a54      	ldr	r2, [pc, #336]	; (80007b4 <HAL_GPIO_Init+0x29c>)
 8000664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000666:	089b      	lsrs	r3, r3, #2
 8000668:	3302      	adds	r3, #2
 800066a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800066e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000672:	f003 0303 	and.w	r3, r3, #3
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	220f      	movs	r2, #15
 800067a:	fa02 f303 	lsl.w	r3, r2, r3
 800067e:	43db      	mvns	r3, r3
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	4013      	ands	r3, r2
 8000684:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a4b      	ldr	r2, [pc, #300]	; (80007b8 <HAL_GPIO_Init+0x2a0>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d013      	beq.n	80006b6 <HAL_GPIO_Init+0x19e>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a4a      	ldr	r2, [pc, #296]	; (80007bc <HAL_GPIO_Init+0x2a4>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d00d      	beq.n	80006b2 <HAL_GPIO_Init+0x19a>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a49      	ldr	r2, [pc, #292]	; (80007c0 <HAL_GPIO_Init+0x2a8>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d007      	beq.n	80006ae <HAL_GPIO_Init+0x196>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a48      	ldr	r2, [pc, #288]	; (80007c4 <HAL_GPIO_Init+0x2ac>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d101      	bne.n	80006aa <HAL_GPIO_Init+0x192>
 80006a6:	2303      	movs	r3, #3
 80006a8:	e006      	b.n	80006b8 <HAL_GPIO_Init+0x1a0>
 80006aa:	2304      	movs	r3, #4
 80006ac:	e004      	b.n	80006b8 <HAL_GPIO_Init+0x1a0>
 80006ae:	2302      	movs	r3, #2
 80006b0:	e002      	b.n	80006b8 <HAL_GPIO_Init+0x1a0>
 80006b2:	2301      	movs	r3, #1
 80006b4:	e000      	b.n	80006b8 <HAL_GPIO_Init+0x1a0>
 80006b6:	2300      	movs	r3, #0
 80006b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006ba:	f002 0203 	and.w	r2, r2, #3
 80006be:	0092      	lsls	r2, r2, #2
 80006c0:	4093      	lsls	r3, r2
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80006c8:	493a      	ldr	r1, [pc, #232]	; (80007b4 <HAL_GPIO_Init+0x29c>)
 80006ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006cc:	089b      	lsrs	r3, r3, #2
 80006ce:	3302      	adds	r3, #2
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d006      	beq.n	80006f0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80006e2:	4b39      	ldr	r3, [pc, #228]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4938      	ldr	r1, [pc, #224]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 80006e8:	69bb      	ldr	r3, [r7, #24]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]
 80006ee:	e006      	b.n	80006fe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80006f0:	4b35      	ldr	r3, [pc, #212]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	43db      	mvns	r3, r3
 80006f8:	4933      	ldr	r1, [pc, #204]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 80006fa:	4013      	ands	r3, r2
 80006fc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000706:	2b00      	cmp	r3, #0
 8000708:	d006      	beq.n	8000718 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800070a:	4b2f      	ldr	r3, [pc, #188]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 800070c:	685a      	ldr	r2, [r3, #4]
 800070e:	492e      	ldr	r1, [pc, #184]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	4313      	orrs	r3, r2
 8000714:	604b      	str	r3, [r1, #4]
 8000716:	e006      	b.n	8000726 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000718:	4b2b      	ldr	r3, [pc, #172]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 800071a:	685a      	ldr	r2, [r3, #4]
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	43db      	mvns	r3, r3
 8000720:	4929      	ldr	r1, [pc, #164]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 8000722:	4013      	ands	r3, r2
 8000724:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800072e:	2b00      	cmp	r3, #0
 8000730:	d006      	beq.n	8000740 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000732:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 8000734:	689a      	ldr	r2, [r3, #8]
 8000736:	4924      	ldr	r1, [pc, #144]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	4313      	orrs	r3, r2
 800073c:	608b      	str	r3, [r1, #8]
 800073e:	e006      	b.n	800074e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 8000742:	689a      	ldr	r2, [r3, #8]
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	43db      	mvns	r3, r3
 8000748:	491f      	ldr	r1, [pc, #124]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 800074a:	4013      	ands	r3, r2
 800074c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000756:	2b00      	cmp	r3, #0
 8000758:	d006      	beq.n	8000768 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800075a:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 800075c:	68da      	ldr	r2, [r3, #12]
 800075e:	491a      	ldr	r1, [pc, #104]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	4313      	orrs	r3, r2
 8000764:	60cb      	str	r3, [r1, #12]
 8000766:	e006      	b.n	8000776 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 800076a:	68da      	ldr	r2, [r3, #12]
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	43db      	mvns	r3, r3
 8000770:	4915      	ldr	r1, [pc, #84]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 8000772:	4013      	ands	r3, r2
 8000774:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000778:	3301      	adds	r3, #1
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000782:	fa22 f303 	lsr.w	r3, r2, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	f47f aed0 	bne.w	800052c <HAL_GPIO_Init+0x14>
  }
}
 800078c:	bf00      	nop
 800078e:	372c      	adds	r7, #44	; 0x2c
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	10210000 	.word	0x10210000
 800079c:	10110000 	.word	0x10110000
 80007a0:	10120000 	.word	0x10120000
 80007a4:	10310000 	.word	0x10310000
 80007a8:	10320000 	.word	0x10320000
 80007ac:	10220000 	.word	0x10220000
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40010000 	.word	0x40010000
 80007b8:	40010800 	.word	0x40010800
 80007bc:	40010c00 	.word	0x40010c00
 80007c0:	40011000 	.word	0x40011000
 80007c4:	40011400 	.word	0x40011400
 80007c8:	40010400 	.word	0x40010400

080007cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	807b      	strh	r3, [r7, #2]
 80007d8:	4613      	mov	r3, r2
 80007da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007dc:	787b      	ldrb	r3, [r7, #1]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d003      	beq.n	80007ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80007e2:	887a      	ldrh	r2, [r7, #2]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80007e8:	e003      	b.n	80007f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007ea:	887b      	ldrh	r3, [r7, #2]
 80007ec:	041a      	lsls	r2, r3, #16
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	611a      	str	r2, [r3, #16]
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000808:	695a      	ldr	r2, [r3, #20]
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	4013      	ands	r3, r2
 800080e:	2b00      	cmp	r3, #0
 8000810:	d006      	beq.n	8000820 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000812:	4a05      	ldr	r2, [pc, #20]	; (8000828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000814:	88fb      	ldrh	r3, [r7, #6]
 8000816:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000818:	88fb      	ldrh	r3, [r7, #6]
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f806 	bl	800082c <HAL_GPIO_EXTI_Callback>
  }
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40010400 	.word	0x40010400

0800082c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d101      	bne.n	8000852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e26c      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	2b00      	cmp	r3, #0
 800085c:	f000 8087 	beq.w	800096e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000860:	4b92      	ldr	r3, [pc, #584]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	f003 030c 	and.w	r3, r3, #12
 8000868:	2b04      	cmp	r3, #4
 800086a:	d00c      	beq.n	8000886 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800086c:	4b8f      	ldr	r3, [pc, #572]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f003 030c 	and.w	r3, r3, #12
 8000874:	2b08      	cmp	r3, #8
 8000876:	d112      	bne.n	800089e <HAL_RCC_OscConfig+0x5e>
 8000878:	4b8c      	ldr	r3, [pc, #560]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000884:	d10b      	bne.n	800089e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000886:	4b89      	ldr	r3, [pc, #548]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800088e:	2b00      	cmp	r3, #0
 8000890:	d06c      	beq.n	800096c <HAL_RCC_OscConfig+0x12c>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d168      	bne.n	800096c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e246      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008a6:	d106      	bne.n	80008b6 <HAL_RCC_OscConfig+0x76>
 80008a8:	4b80      	ldr	r3, [pc, #512]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a7f      	ldr	r2, [pc, #508]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	e02e      	b.n	8000914 <HAL_RCC_OscConfig+0xd4>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d10c      	bne.n	80008d8 <HAL_RCC_OscConfig+0x98>
 80008be:	4b7b      	ldr	r3, [pc, #492]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a7a      	ldr	r2, [pc, #488]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008c8:	6013      	str	r3, [r2, #0]
 80008ca:	4b78      	ldr	r3, [pc, #480]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a77      	ldr	r2, [pc, #476]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008d4:	6013      	str	r3, [r2, #0]
 80008d6:	e01d      	b.n	8000914 <HAL_RCC_OscConfig+0xd4>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008e0:	d10c      	bne.n	80008fc <HAL_RCC_OscConfig+0xbc>
 80008e2:	4b72      	ldr	r3, [pc, #456]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a71      	ldr	r2, [pc, #452]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ec:	6013      	str	r3, [r2, #0]
 80008ee:	4b6f      	ldr	r3, [pc, #444]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a6e      	ldr	r2, [pc, #440]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f8:	6013      	str	r3, [r2, #0]
 80008fa:	e00b      	b.n	8000914 <HAL_RCC_OscConfig+0xd4>
 80008fc:	4b6b      	ldr	r3, [pc, #428]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a6a      	ldr	r2, [pc, #424]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4b68      	ldr	r3, [pc, #416]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a67      	ldr	r2, [pc, #412]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 800090e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000912:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d013      	beq.n	8000944 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800091c:	f7ff fc6e 	bl	80001fc <HAL_GetTick>
 8000920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000922:	e008      	b.n	8000936 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000924:	f7ff fc6a 	bl	80001fc <HAL_GetTick>
 8000928:	4602      	mov	r2, r0
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	2b64      	cmp	r3, #100	; 0x64
 8000930:	d901      	bls.n	8000936 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000932:	2303      	movs	r3, #3
 8000934:	e1fa      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000936:	4b5d      	ldr	r3, [pc, #372]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0f0      	beq.n	8000924 <HAL_RCC_OscConfig+0xe4>
 8000942:	e014      	b.n	800096e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000944:	f7ff fc5a 	bl	80001fc <HAL_GetTick>
 8000948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800094a:	e008      	b.n	800095e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800094c:	f7ff fc56 	bl	80001fc <HAL_GetTick>
 8000950:	4602      	mov	r2, r0
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	2b64      	cmp	r3, #100	; 0x64
 8000958:	d901      	bls.n	800095e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800095a:	2303      	movs	r3, #3
 800095c:	e1e6      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800095e:	4b53      	ldr	r3, [pc, #332]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000966:	2b00      	cmp	r3, #0
 8000968:	d1f0      	bne.n	800094c <HAL_RCC_OscConfig+0x10c>
 800096a:	e000      	b.n	800096e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800096c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	2b00      	cmp	r3, #0
 8000978:	d063      	beq.n	8000a42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800097a:	4b4c      	ldr	r3, [pc, #304]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f003 030c 	and.w	r3, r3, #12
 8000982:	2b00      	cmp	r3, #0
 8000984:	d00b      	beq.n	800099e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000986:	4b49      	ldr	r3, [pc, #292]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f003 030c 	and.w	r3, r3, #12
 800098e:	2b08      	cmp	r3, #8
 8000990:	d11c      	bne.n	80009cc <HAL_RCC_OscConfig+0x18c>
 8000992:	4b46      	ldr	r3, [pc, #280]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d116      	bne.n	80009cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800099e:	4b43      	ldr	r3, [pc, #268]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d005      	beq.n	80009b6 <HAL_RCC_OscConfig+0x176>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	691b      	ldr	r3, [r3, #16]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d001      	beq.n	80009b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e1ba      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009b6:	4b3d      	ldr	r3, [pc, #244]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	4939      	ldr	r1, [pc, #228]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80009c6:	4313      	orrs	r3, r2
 80009c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009ca:	e03a      	b.n	8000a42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d020      	beq.n	8000a16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009d4:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <HAL_RCC_OscConfig+0x270>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009da:	f7ff fc0f 	bl	80001fc <HAL_GetTick>
 80009de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009e0:	e008      	b.n	80009f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009e2:	f7ff fc0b 	bl	80001fc <HAL_GetTick>
 80009e6:	4602      	mov	r2, r0
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d901      	bls.n	80009f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80009f0:	2303      	movs	r3, #3
 80009f2:	e19b      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009f4:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f003 0302 	and.w	r3, r3, #2
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d0f0      	beq.n	80009e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a00:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	4927      	ldr	r1, [pc, #156]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000a10:	4313      	orrs	r3, r2
 8000a12:	600b      	str	r3, [r1, #0]
 8000a14:	e015      	b.n	8000a42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <HAL_RCC_OscConfig+0x270>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a1c:	f7ff fbee 	bl	80001fc <HAL_GetTick>
 8000a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a22:	e008      	b.n	8000a36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a24:	f7ff fbea 	bl	80001fc <HAL_GetTick>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d901      	bls.n	8000a36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000a32:	2303      	movs	r3, #3
 8000a34:	e17a      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d1f0      	bne.n	8000a24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f003 0308 	and.w	r3, r3, #8
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d03a      	beq.n	8000ac4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d019      	beq.n	8000a8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <HAL_RCC_OscConfig+0x274>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a5c:	f7ff fbce 	bl	80001fc <HAL_GetTick>
 8000a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a62:	e008      	b.n	8000a76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a64:	f7ff fbca 	bl	80001fc <HAL_GetTick>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d901      	bls.n	8000a76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000a72:	2303      	movs	r3, #3
 8000a74:	e15a      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0f0      	beq.n	8000a64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000a82:	2001      	movs	r0, #1
 8000a84:	f000 fada 	bl	800103c <RCC_Delay>
 8000a88:	e01c      	b.n	8000ac4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <HAL_RCC_OscConfig+0x274>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a90:	f7ff fbb4 	bl	80001fc <HAL_GetTick>
 8000a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a96:	e00f      	b.n	8000ab8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a98:	f7ff fbb0 	bl	80001fc <HAL_GetTick>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d908      	bls.n	8000ab8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	e140      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
 8000aaa:	bf00      	nop
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	42420000 	.word	0x42420000
 8000ab4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ab8:	4b9e      	ldr	r3, [pc, #632]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1e9      	bne.n	8000a98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	f000 80a6 	beq.w	8000c1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ad6:	4b97      	ldr	r3, [pc, #604]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d10d      	bne.n	8000afe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	4b94      	ldr	r3, [pc, #592]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	4a93      	ldr	r2, [pc, #588]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	61d3      	str	r3, [r2, #28]
 8000aee:	4b91      	ldr	r3, [pc, #580]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000afa:	2301      	movs	r3, #1
 8000afc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000afe:	4b8e      	ldr	r3, [pc, #568]	; (8000d38 <HAL_RCC_OscConfig+0x4f8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d118      	bne.n	8000b3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b0a:	4b8b      	ldr	r3, [pc, #556]	; (8000d38 <HAL_RCC_OscConfig+0x4f8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a8a      	ldr	r2, [pc, #552]	; (8000d38 <HAL_RCC_OscConfig+0x4f8>)
 8000b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b16:	f7ff fb71 	bl	80001fc <HAL_GetTick>
 8000b1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b1c:	e008      	b.n	8000b30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b1e:	f7ff fb6d 	bl	80001fc <HAL_GetTick>
 8000b22:	4602      	mov	r2, r0
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	2b64      	cmp	r3, #100	; 0x64
 8000b2a:	d901      	bls.n	8000b30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	e0fd      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b30:	4b81      	ldr	r3, [pc, #516]	; (8000d38 <HAL_RCC_OscConfig+0x4f8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0f0      	beq.n	8000b1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d106      	bne.n	8000b52 <HAL_RCC_OscConfig+0x312>
 8000b44:	4b7b      	ldr	r3, [pc, #492]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b46:	6a1b      	ldr	r3, [r3, #32]
 8000b48:	4a7a      	ldr	r2, [pc, #488]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	6213      	str	r3, [r2, #32]
 8000b50:	e02d      	b.n	8000bae <HAL_RCC_OscConfig+0x36e>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d10c      	bne.n	8000b74 <HAL_RCC_OscConfig+0x334>
 8000b5a:	4b76      	ldr	r3, [pc, #472]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b5c:	6a1b      	ldr	r3, [r3, #32]
 8000b5e:	4a75      	ldr	r2, [pc, #468]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b60:	f023 0301 	bic.w	r3, r3, #1
 8000b64:	6213      	str	r3, [r2, #32]
 8000b66:	4b73      	ldr	r3, [pc, #460]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b68:	6a1b      	ldr	r3, [r3, #32]
 8000b6a:	4a72      	ldr	r2, [pc, #456]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b6c:	f023 0304 	bic.w	r3, r3, #4
 8000b70:	6213      	str	r3, [r2, #32]
 8000b72:	e01c      	b.n	8000bae <HAL_RCC_OscConfig+0x36e>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	2b05      	cmp	r3, #5
 8000b7a:	d10c      	bne.n	8000b96 <HAL_RCC_OscConfig+0x356>
 8000b7c:	4b6d      	ldr	r3, [pc, #436]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b7e:	6a1b      	ldr	r3, [r3, #32]
 8000b80:	4a6c      	ldr	r2, [pc, #432]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b82:	f043 0304 	orr.w	r3, r3, #4
 8000b86:	6213      	str	r3, [r2, #32]
 8000b88:	4b6a      	ldr	r3, [pc, #424]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b8a:	6a1b      	ldr	r3, [r3, #32]
 8000b8c:	4a69      	ldr	r2, [pc, #420]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6213      	str	r3, [r2, #32]
 8000b94:	e00b      	b.n	8000bae <HAL_RCC_OscConfig+0x36e>
 8000b96:	4b67      	ldr	r3, [pc, #412]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b98:	6a1b      	ldr	r3, [r3, #32]
 8000b9a:	4a66      	ldr	r2, [pc, #408]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b9c:	f023 0301 	bic.w	r3, r3, #1
 8000ba0:	6213      	str	r3, [r2, #32]
 8000ba2:	4b64      	ldr	r3, [pc, #400]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000ba4:	6a1b      	ldr	r3, [r3, #32]
 8000ba6:	4a63      	ldr	r2, [pc, #396]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000ba8:	f023 0304 	bic.w	r3, r3, #4
 8000bac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d015      	beq.n	8000be2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bb6:	f7ff fb21 	bl	80001fc <HAL_GetTick>
 8000bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bbc:	e00a      	b.n	8000bd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bbe:	f7ff fb1d 	bl	80001fc <HAL_GetTick>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d901      	bls.n	8000bd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	e0ab      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bd4:	4b57      	ldr	r3, [pc, #348]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000bd6:	6a1b      	ldr	r3, [r3, #32]
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0ee      	beq.n	8000bbe <HAL_RCC_OscConfig+0x37e>
 8000be0:	e014      	b.n	8000c0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000be2:	f7ff fb0b 	bl	80001fc <HAL_GetTick>
 8000be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000be8:	e00a      	b.n	8000c00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bea:	f7ff fb07 	bl	80001fc <HAL_GetTick>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d901      	bls.n	8000c00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	e095      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c00:	4b4c      	ldr	r3, [pc, #304]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c02:	6a1b      	ldr	r3, [r3, #32]
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d1ee      	bne.n	8000bea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000c0c:	7dfb      	ldrb	r3, [r7, #23]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d105      	bne.n	8000c1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c12:	4b48      	ldr	r3, [pc, #288]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	4a47      	ldr	r2, [pc, #284]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 8081 	beq.w	8000d2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c28:	4b42      	ldr	r3, [pc, #264]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 030c 	and.w	r3, r3, #12
 8000c30:	2b08      	cmp	r3, #8
 8000c32:	d061      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69db      	ldr	r3, [r3, #28]
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d146      	bne.n	8000cca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c3c:	4b3f      	ldr	r3, [pc, #252]	; (8000d3c <HAL_RCC_OscConfig+0x4fc>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c42:	f7ff fadb 	bl	80001fc <HAL_GetTick>
 8000c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c48:	e008      	b.n	8000c5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c4a:	f7ff fad7 	bl	80001fc <HAL_GetTick>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d901      	bls.n	8000c5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	e067      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c5c:	4b35      	ldr	r3, [pc, #212]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1f0      	bne.n	8000c4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6a1b      	ldr	r3, [r3, #32]
 8000c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c70:	d108      	bne.n	8000c84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c72:	4b30      	ldr	r3, [pc, #192]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	492d      	ldr	r1, [pc, #180]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c80:	4313      	orrs	r3, r2
 8000c82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c84:	4b2b      	ldr	r3, [pc, #172]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a19      	ldr	r1, [r3, #32]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c94:	430b      	orrs	r3, r1
 8000c96:	4927      	ldr	r1, [pc, #156]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c9c:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <HAL_RCC_OscConfig+0x4fc>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca2:	f7ff faab 	bl	80001fc <HAL_GetTick>
 8000ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ca8:	e008      	b.n	8000cbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000caa:	f7ff faa7 	bl	80001fc <HAL_GetTick>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d901      	bls.n	8000cbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	e037      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d0f0      	beq.n	8000caa <HAL_RCC_OscConfig+0x46a>
 8000cc8:	e02f      	b.n	8000d2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <HAL_RCC_OscConfig+0x4fc>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd0:	f7ff fa94 	bl	80001fc <HAL_GetTick>
 8000cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cd6:	e008      	b.n	8000cea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cd8:	f7ff fa90 	bl	80001fc <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d901      	bls.n	8000cea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	e020      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d1f0      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x498>
 8000cf6:	e018      	b.n	8000d2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	69db      	ldr	r3, [r3, #28]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d101      	bne.n	8000d04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e013      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a1b      	ldr	r3, [r3, #32]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d106      	bne.n	8000d26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d001      	beq.n	8000d2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e000      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40007000 	.word	0x40007000
 8000d3c:	42420060 	.word	0x42420060

08000d40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d101      	bne.n	8000d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e0d0      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000d54:	4b6a      	ldr	r3, [pc, #424]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0307 	and.w	r3, r3, #7
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d910      	bls.n	8000d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d62:	4b67      	ldr	r3, [pc, #412]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f023 0207 	bic.w	r2, r3, #7
 8000d6a:	4965      	ldr	r1, [pc, #404]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d72:	4b63      	ldr	r3, [pc, #396]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	683a      	ldr	r2, [r7, #0]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d001      	beq.n	8000d84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e0b8      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d020      	beq.n	8000dd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d005      	beq.n	8000da8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d9c:	4b59      	ldr	r3, [pc, #356]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	4a58      	ldr	r2, [pc, #352]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000da2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000da6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0308 	and.w	r3, r3, #8
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d005      	beq.n	8000dc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000db4:	4b53      	ldr	r3, [pc, #332]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	4a52      	ldr	r2, [pc, #328]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000dba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000dbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dc0:	4b50      	ldr	r3, [pc, #320]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	494d      	ldr	r1, [pc, #308]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d040      	beq.n	8000e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d107      	bne.n	8000df6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de6:	4b47      	ldr	r3, [pc, #284]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d115      	bne.n	8000e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e07f      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d107      	bne.n	8000e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dfe:	4b41      	ldr	r3, [pc, #260]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d109      	bne.n	8000e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e073      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e0e:	4b3d      	ldr	r3, [pc, #244]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e06b      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e1e:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f023 0203 	bic.w	r2, r3, #3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	4936      	ldr	r1, [pc, #216]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e30:	f7ff f9e4 	bl	80001fc <HAL_GetTick>
 8000e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e36:	e00a      	b.n	8000e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e38:	f7ff f9e0 	bl	80001fc <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e053      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 020c 	and.w	r2, r3, #12
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d1eb      	bne.n	8000e38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000e60:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d210      	bcs.n	8000e90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e6e:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f023 0207 	bic.w	r2, r3, #7
 8000e76:	4922      	ldr	r1, [pc, #136]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e7e:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d001      	beq.n	8000e90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e032      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d008      	beq.n	8000eae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	4916      	ldr	r1, [pc, #88]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0308 	and.w	r3, r3, #8
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d009      	beq.n	8000ece <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	490e      	ldr	r1, [pc, #56]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000ece:	f000 f821 	bl	8000f14 <HAL_RCC_GetSysClockFreq>
 8000ed2:	4601      	mov	r1, r0
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	091b      	lsrs	r3, r3, #4
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_RCC_ClockConfig+0x1c8>)
 8000ee0:	5cd3      	ldrb	r3, [r2, r3]
 8000ee2:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee6:	4a09      	ldr	r2, [pc, #36]	; (8000f0c <HAL_RCC_ClockConfig+0x1cc>)
 8000ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_RCC_ClockConfig+0x1d0>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff f942 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40022000 	.word	0x40022000
 8000f04:	40021000 	.word	0x40021000
 8000f08:	08002764 	.word	0x08002764
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000000 	.word	0x20000000

08000f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f14:	b490      	push	{r4, r7}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000f1c:	1d3c      	adds	r4, r7, #4
 8000f1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f24:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000f3e:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f003 030c 	and.w	r3, r3, #12
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	d002      	beq.n	8000f54 <HAL_RCC_GetSysClockFreq+0x40>
 8000f4e:	2b08      	cmp	r3, #8
 8000f50:	d003      	beq.n	8000f5a <HAL_RCC_GetSysClockFreq+0x46>
 8000f52:	e02d      	b.n	8000fb0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f56:	623b      	str	r3, [r7, #32]
      break;
 8000f58:	e02d      	b.n	8000fb6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	0c9b      	lsrs	r3, r3, #18
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f66:	4413      	add	r3, r2
 8000f68:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000f6c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d013      	beq.n	8000fa0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	0c5b      	lsrs	r3, r3, #17
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f86:	4413      	add	r3, r2
 8000f88:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000f8c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f92:	fb02 f203 	mul.w	r2, r2, r3
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f9e:	e004      	b.n	8000faa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	4a0c      	ldr	r2, [pc, #48]	; (8000fd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	623b      	str	r3, [r7, #32]
      break;
 8000fae:	e002      	b.n	8000fb6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000fb2:	623b      	str	r3, [r7, #32]
      break;
 8000fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3728      	adds	r7, #40	; 0x28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc90      	pop	{r4, r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	08002734 	.word	0x08002734
 8000fc8:	08002744 	.word	0x08002744
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	007a1200 	.word	0x007a1200
 8000fd4:	003d0900 	.word	0x003d0900

08000fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000fdc:	4b02      	ldr	r3, [pc, #8]	; (8000fe8 <HAL_RCC_GetHCLKFreq+0x10>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	20000008 	.word	0x20000008

08000fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000ff0:	f7ff fff2 	bl	8000fd8 <HAL_RCC_GetHCLKFreq>
 8000ff4:	4601      	mov	r1, r0
 8000ff6:	4b05      	ldr	r3, [pc, #20]	; (800100c <HAL_RCC_GetPCLK1Freq+0x20>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	0a1b      	lsrs	r3, r3, #8
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	4a03      	ldr	r2, [pc, #12]	; (8001010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001002:	5cd3      	ldrb	r3, [r2, r3]
 8001004:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001008:	4618      	mov	r0, r3
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000
 8001010:	08002774 	.word	0x08002774

08001014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001018:	f7ff ffde 	bl	8000fd8 <HAL_RCC_GetHCLKFreq>
 800101c:	4601      	mov	r1, r0
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	0adb      	lsrs	r3, r3, #11
 8001024:	f003 0307 	and.w	r3, r3, #7
 8001028:	4a03      	ldr	r2, [pc, #12]	; (8001038 <HAL_RCC_GetPCLK2Freq+0x24>)
 800102a:	5cd3      	ldrb	r3, [r2, r3]
 800102c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001030:	4618      	mov	r0, r3
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40021000 	.word	0x40021000
 8001038:	08002774 	.word	0x08002774

0800103c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <RCC_Delay+0x34>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <RCC_Delay+0x38>)
 800104a:	fba2 2303 	umull	r2, r3, r2, r3
 800104e:	0a5b      	lsrs	r3, r3, #9
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	fb02 f303 	mul.w	r3, r2, r3
 8001056:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001058:	bf00      	nop
  }
  while (Delay --);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	1e5a      	subs	r2, r3, #1
 800105e:	60fa      	str	r2, [r7, #12]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1f9      	bne.n	8001058 <RCC_Delay+0x1c>
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008
 8001074:	10624dd3 	.word	0x10624dd3

08001078 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e03f      	b.n	800110a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d106      	bne.n	80010a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 fda2 	bl	8001be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2224      	movs	r2, #36	; 0x24
 80010a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80010ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f000 faef 	bl	80016a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	691a      	ldr	r2, [r3, #16]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80010d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	695a      	ldr	r2, [r3, #20]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80010e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2220      	movs	r2, #32
 80010fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2220      	movs	r2, #32
 8001104:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001112:	b480      	push	{r7}
 8001114:	b085      	sub	sp, #20
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	4613      	mov	r3, r2
 800111e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b20      	cmp	r3, #32
 800112a:	d130      	bne.n	800118e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <HAL_UART_Transmit_IT+0x26>
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e029      	b.n	8001190 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001142:	2b01      	cmp	r3, #1
 8001144:	d101      	bne.n	800114a <HAL_UART_Transmit_IT+0x38>
 8001146:	2302      	movs	r3, #2
 8001148:	e022      	b.n	8001190 <HAL_UART_Transmit_IT+0x7e>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2201      	movs	r2, #1
 800114e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	88fa      	ldrh	r2, [r7, #6]
 800115c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	88fa      	ldrh	r2, [r7, #6]
 8001162:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2200      	movs	r2, #0
 8001168:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2221      	movs	r2, #33	; 0x21
 800116e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001188:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	e000      	b.n	8001190 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800118e:	2302      	movs	r3, #2
  }
}
 8001190:	4618      	mov	r0, r3
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800119a:	b480      	push	{r7}
 800119c:	b085      	sub	sp, #20
 800119e:	af00      	add	r7, sp, #0
 80011a0:	60f8      	str	r0, [r7, #12]
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	4613      	mov	r3, r2
 80011a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b20      	cmp	r3, #32
 80011b2:	d140      	bne.n	8001236 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <HAL_UART_Receive_IT+0x26>
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d101      	bne.n	80011c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e039      	b.n	8001238 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d101      	bne.n	80011d2 <HAL_UART_Receive_IT+0x38>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e032      	b.n	8001238 <HAL_UART_Receive_IT+0x9e>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	88fa      	ldrh	r2, [r7, #6]
 80011e4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	88fa      	ldrh	r2, [r7, #6]
 80011ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2200      	movs	r2, #0
 80011f0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2222      	movs	r2, #34	; 0x22
 80011f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68da      	ldr	r2, [r3, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001210:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	695a      	ldr	r2, [r3, #20]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 0201 	orr.w	r2, r2, #1
 8001220:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f042 0220 	orr.w	r2, r2, #32
 8001230:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e000      	b.n	8001238 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001236:	2302      	movs	r3, #2
  }
}
 8001238:	4618      	mov	r0, r3
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
	...

08001244 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10d      	bne.n	8001296 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	f003 0320 	and.w	r3, r3, #32
 8001280:	2b00      	cmp	r3, #0
 8001282:	d008      	beq.n	8001296 <HAL_UART_IRQHandler+0x52>
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	f003 0320 	and.w	r3, r3, #32
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f984 	bl	800159c <UART_Receive_IT>
      return;
 8001294:	e0cc      	b.n	8001430 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80ab 	beq.w	80013f4 <HAL_UART_IRQHandler+0x1b0>
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d105      	bne.n	80012b4 <HAL_UART_IRQHandler+0x70>
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 80a0 	beq.w	80013f4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00a      	beq.n	80012d4 <HAL_UART_IRQHandler+0x90>
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012cc:	f043 0201 	orr.w	r2, r3, #1
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00a      	beq.n	80012f4 <HAL_UART_IRQHandler+0xb0>
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d005      	beq.n	80012f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ec:	f043 0202 	orr.w	r2, r3, #2
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00a      	beq.n	8001314 <HAL_UART_IRQHandler+0xd0>
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b00      	cmp	r3, #0
 8001306:	d005      	beq.n	8001314 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800130c:	f043 0204 	orr.w	r2, r3, #4
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00a      	beq.n	8001334 <HAL_UART_IRQHandler+0xf0>
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800132c:	f043 0208 	orr.w	r2, r3, #8
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001338:	2b00      	cmp	r3, #0
 800133a:	d078      	beq.n	800142e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0320 	and.w	r3, r3, #32
 8001342:	2b00      	cmp	r3, #0
 8001344:	d007      	beq.n	8001356 <HAL_UART_IRQHandler+0x112>
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	f003 0320 	and.w	r3, r3, #32
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 f923 	bl	800159c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001360:	2b00      	cmp	r3, #0
 8001362:	bf14      	ite	ne
 8001364:	2301      	movne	r3, #1
 8001366:	2300      	moveq	r3, #0
 8001368:	b2db      	uxtb	r3, r3
 800136a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d102      	bne.n	800137e <HAL_UART_IRQHandler+0x13a>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d031      	beq.n	80013e2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f86e 	bl	8001460 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800138e:	2b00      	cmp	r3, #0
 8001390:	d023      	beq.n	80013da <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	695a      	ldr	r2, [r3, #20]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013a0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d013      	beq.n	80013d2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ae:	4a22      	ldr	r2, [pc, #136]	; (8001438 <HAL_UART_IRQHandler+0x1f4>)
 80013b0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f838 	bl	800042c <HAL_DMA_Abort_IT>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d016      	beq.n	80013f0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013cc:	4610      	mov	r0, r2
 80013ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013d0:	e00e      	b.n	80013f0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 f83b 	bl	800144e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013d8:	e00a      	b.n	80013f0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f837 	bl	800144e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013e0:	e006      	b.n	80013f0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 f833 	bl	800144e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80013ee:	e01e      	b.n	800142e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013f0:	bf00      	nop
    return;
 80013f2:	e01c      	b.n	800142e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d008      	beq.n	8001410 <HAL_UART_IRQHandler+0x1cc>
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f85a 	bl	80014c2 <UART_Transmit_IT>
    return;
 800140e:	e00f      	b.n	8001430 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00a      	beq.n	8001430 <HAL_UART_IRQHandler+0x1ec>
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f8a1 	bl	800156c <UART_EndTransmit_IT>
    return;
 800142a:	bf00      	nop
 800142c:	e000      	b.n	8001430 <HAL_UART_IRQHandler+0x1ec>
    return;
 800142e:	bf00      	nop
  }
}
 8001430:	3720      	adds	r7, #32
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	0800149b 	.word	0x0800149b

0800143c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001476:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	695a      	ldr	r2, [r3, #20]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0201 	bic.w	r2, r2, #1
 8001486:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2220      	movs	r2, #32
 800148c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr

0800149a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b084      	sub	sp, #16
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2200      	movs	r2, #0
 80014ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2200      	movs	r2, #0
 80014b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f7ff ffca 	bl	800144e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b085      	sub	sp, #20
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b21      	cmp	r3, #33	; 0x21
 80014d4:	d144      	bne.n	8001560 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014de:	d11a      	bne.n	8001516 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014f4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d105      	bne.n	800150a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	1c9a      	adds	r2, r3, #2
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	621a      	str	r2, [r3, #32]
 8001508:	e00e      	b.n	8001528 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	621a      	str	r2, [r3, #32]
 8001514:	e008      	b.n	8001528 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	1c59      	adds	r1, r3, #1
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6211      	str	r1, [r2, #32]
 8001520:	781a      	ldrb	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800152c:	b29b      	uxth	r3, r3
 800152e:	3b01      	subs	r3, #1
 8001530:	b29b      	uxth	r3, r3
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	4619      	mov	r1, r3
 8001536:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10f      	bne.n	800155c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68da      	ldr	r2, [r3, #12]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800154a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800155a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	e000      	b.n	8001562 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001560:	2302      	movs	r3, #2
  }
}
 8001562:	4618      	mov	r0, r3
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001582:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2220      	movs	r2, #32
 8001588:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff55 	bl	800143c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b22      	cmp	r3, #34	; 0x22
 80015ae:	d171      	bne.n	8001694 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015b8:	d123      	bne.n	8001602 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015be:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10e      	bne.n	80015e6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	1c9a      	adds	r2, r3, #2
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	629a      	str	r2, [r3, #40]	; 0x28
 80015e4:	e029      	b.n	800163a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	629a      	str	r2, [r3, #40]	; 0x28
 8001600:	e01b      	b.n	800163a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10a      	bne.n	8001620 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6858      	ldr	r0, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001614:	1c59      	adds	r1, r3, #1
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6291      	str	r1, [r2, #40]	; 0x28
 800161a:	b2c2      	uxtb	r2, r0
 800161c:	701a      	strb	r2, [r3, #0]
 800161e:	e00c      	b.n	800163a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162c:	1c58      	adds	r0, r3, #1
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	6288      	str	r0, [r1, #40]	; 0x28
 8001632:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800163e:	b29b      	uxth	r3, r3
 8001640:	3b01      	subs	r3, #1
 8001642:	b29b      	uxth	r3, r3
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	4619      	mov	r1, r3
 8001648:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800164a:	2b00      	cmp	r3, #0
 800164c:	d120      	bne.n	8001690 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0220 	bic.w	r2, r2, #32
 800165c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800166c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	695a      	ldr	r2, [r3, #20]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0201 	bic.w	r2, r2, #1
 800167c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2220      	movs	r2, #32
 8001682:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 fa4e 	bl	8001b28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	e002      	b.n	8001696 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	e000      	b.n	8001696 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001694:	2302      	movs	r3, #2
  }
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80016da:	f023 030c 	bic.w	r3, r3, #12
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	68f9      	ldr	r1, [r7, #12]
 80016e4:	430b      	orrs	r3, r1
 80016e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	699a      	ldr	r2, [r3, #24]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a52      	ldr	r2, [pc, #328]	; (800184c <UART_SetConfig+0x1ac>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d14e      	bne.n	80017a6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001708:	f7ff fc84 	bl	8001014 <HAL_RCC_GetPCLK2Freq>
 800170c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	009a      	lsls	r2, r3, #2
 8001718:	441a      	add	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	fbb2 f3f3 	udiv	r3, r2, r3
 8001724:	4a4a      	ldr	r2, [pc, #296]	; (8001850 <UART_SetConfig+0x1b0>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	0119      	lsls	r1, r3, #4
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	009a      	lsls	r2, r3, #2
 8001738:	441a      	add	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	fbb2 f2f3 	udiv	r2, r2, r3
 8001744:	4b42      	ldr	r3, [pc, #264]	; (8001850 <UART_SetConfig+0x1b0>)
 8001746:	fba3 0302 	umull	r0, r3, r3, r2
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	2064      	movs	r0, #100	; 0x64
 800174e:	fb00 f303 	mul.w	r3, r0, r3
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	3332      	adds	r3, #50	; 0x32
 8001758:	4a3d      	ldr	r2, [pc, #244]	; (8001850 <UART_SetConfig+0x1b0>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001764:	4419      	add	r1, r3
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	009a      	lsls	r2, r3, #2
 8001770:	441a      	add	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	fbb2 f2f3 	udiv	r2, r2, r3
 800177c:	4b34      	ldr	r3, [pc, #208]	; (8001850 <UART_SetConfig+0x1b0>)
 800177e:	fba3 0302 	umull	r0, r3, r3, r2
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	2064      	movs	r0, #100	; 0x64
 8001786:	fb00 f303 	mul.w	r3, r0, r3
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	3332      	adds	r3, #50	; 0x32
 8001790:	4a2f      	ldr	r2, [pc, #188]	; (8001850 <UART_SetConfig+0x1b0>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	f003 020f 	and.w	r2, r3, #15
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	440a      	add	r2, r1
 80017a2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80017a4:	e04d      	b.n	8001842 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80017a6:	f7ff fc21 	bl	8000fec <HAL_RCC_GetPCLK1Freq>
 80017aa:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	009a      	lsls	r2, r3, #2
 80017b6:	441a      	add	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c2:	4a23      	ldr	r2, [pc, #140]	; (8001850 <UART_SetConfig+0x1b0>)
 80017c4:	fba2 2303 	umull	r2, r3, r2, r3
 80017c8:	095b      	lsrs	r3, r3, #5
 80017ca:	0119      	lsls	r1, r3, #4
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	009a      	lsls	r2, r3, #2
 80017d6:	441a      	add	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	fbb2 f2f3 	udiv	r2, r2, r3
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <UART_SetConfig+0x1b0>)
 80017e4:	fba3 0302 	umull	r0, r3, r3, r2
 80017e8:	095b      	lsrs	r3, r3, #5
 80017ea:	2064      	movs	r0, #100	; 0x64
 80017ec:	fb00 f303 	mul.w	r3, r0, r3
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	011b      	lsls	r3, r3, #4
 80017f4:	3332      	adds	r3, #50	; 0x32
 80017f6:	4a16      	ldr	r2, [pc, #88]	; (8001850 <UART_SetConfig+0x1b0>)
 80017f8:	fba2 2303 	umull	r2, r3, r2, r3
 80017fc:	095b      	lsrs	r3, r3, #5
 80017fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001802:	4419      	add	r1, r3
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	009a      	lsls	r2, r3, #2
 800180e:	441a      	add	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	fbb2 f2f3 	udiv	r2, r2, r3
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <UART_SetConfig+0x1b0>)
 800181c:	fba3 0302 	umull	r0, r3, r3, r2
 8001820:	095b      	lsrs	r3, r3, #5
 8001822:	2064      	movs	r0, #100	; 0x64
 8001824:	fb00 f303 	mul.w	r3, r0, r3
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	3332      	adds	r3, #50	; 0x32
 800182e:	4a08      	ldr	r2, [pc, #32]	; (8001850 <UART_SetConfig+0x1b0>)
 8001830:	fba2 2303 	umull	r2, r3, r2, r3
 8001834:	095b      	lsrs	r3, r3, #5
 8001836:	f003 020f 	and.w	r2, r3, #15
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	440a      	add	r2, r1
 8001840:	609a      	str	r2, [r3, #8]
}
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40013800 	.word	0x40013800
 8001850:	51eb851f 	.word	0x51eb851f

08001854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001858:	f7fe fc78 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800185c:	f000 f848 	bl	80018f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001860:	f000 f8dc 	bl	8001a1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001864:	f000 f886 	bl	8001974 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001868:	f000 f8ae 	bl	80019c8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &Received, 1);
 800186c:	2201      	movs	r2, #1
 800186e:	491d      	ldr	r1, [pc, #116]	; (80018e4 <main+0x90>)
 8001870:	481d      	ldr	r0, [pc, #116]	; (80018e8 <main+0x94>)
 8001872:	f7ff fc92 	bl	800119a <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if ('a' == Received)
 8001876:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <main+0x90>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b61      	cmp	r3, #97	; 0x61
 800187e:	d10c      	bne.n	800189a <main+0x46>
	  {
		  HAL_GPIO_WritePin(MOTOR_A_GPIO_Port, MOTOR_A_Pin, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001886:	4819      	ldr	r0, [pc, #100]	; (80018ec <main+0x98>)
 8001888:	f7fe ffa0 	bl	80007cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MOTOR_B_GPIO_Port, MOTOR_B_Pin, GPIO_PIN_SET);
 800188c:	2201      	movs	r2, #1
 800188e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001892:	4816      	ldr	r0, [pc, #88]	; (80018ec <main+0x98>)
 8001894:	f7fe ff9a 	bl	80007cc <HAL_GPIO_WritePin>
 8001898:	e7ed      	b.n	8001876 <main+0x22>
	  }
	  else if ('b' == Received)
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <main+0x90>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b62      	cmp	r3, #98	; 0x62
 80018a2:	d10c      	bne.n	80018be <main+0x6a>
	  {
		  HAL_GPIO_WritePin(MOTOR_A_GPIO_Port, MOTOR_A_Pin, GPIO_PIN_SET);
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018aa:	4810      	ldr	r0, [pc, #64]	; (80018ec <main+0x98>)
 80018ac:	f7fe ff8e 	bl	80007cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MOTOR_B_GPIO_Port, MOTOR_B_Pin, GPIO_PIN_RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018b6:	480d      	ldr	r0, [pc, #52]	; (80018ec <main+0x98>)
 80018b8:	f7fe ff88 	bl	80007cc <HAL_GPIO_WritePin>
 80018bc:	e7db      	b.n	8001876 <main+0x22>
	  }
	  else if ('c' == Received)
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <main+0x90>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b63      	cmp	r3, #99	; 0x63
 80018c6:	d1d6      	bne.n	8001876 <main+0x22>
	  {
		  HAL_GPIO_WritePin(MOTOR_A_GPIO_Port, MOTOR_A_Pin, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ce:	4807      	ldr	r0, [pc, #28]	; (80018ec <main+0x98>)
 80018d0:	f7fe ff7c 	bl	80007cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MOTOR_B_GPIO_Port, MOTOR_B_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018da:	4804      	ldr	r0, [pc, #16]	; (80018ec <main+0x98>)
 80018dc:	f7fe ff76 	bl	80007cc <HAL_GPIO_WritePin>
	  if ('a' == Received)
 80018e0:	e7c9      	b.n	8001876 <main+0x22>
 80018e2:	bf00      	nop
 80018e4:	2000009c 	.word	0x2000009c
 80018e8:	200000a0 	.word	0x200000a0
 80018ec:	40010c00 	.word	0x40010c00

080018f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b090      	sub	sp, #64	; 0x40
 80018f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f6:	f107 0318 	add.w	r3, r7, #24
 80018fa:	2228      	movs	r2, #40	; 0x28
 80018fc:	2100      	movs	r1, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 faf2 	bl	8001ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001912:	2302      	movs	r3, #2
 8001914:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001916:	2301      	movs	r3, #1
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800191a:	2310      	movs	r3, #16
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800191e:	2302      	movs	r3, #2
 8001920:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001922:	2300      	movs	r3, #0
 8001924:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001926:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800192a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800192c:	f107 0318 	add.w	r3, r7, #24
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe ff85 	bl	8000840 <HAL_RCC_OscConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800193c:	f000 f91c 	bl	8001b78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001940:	230f      	movs	r3, #15
 8001942:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001944:	2302      	movs	r3, #2
 8001946:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800194c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001950:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	2102      	movs	r1, #2
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff f9f0 	bl	8000d40 <HAL_RCC_ClockConfig>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001966:	f000 f907 	bl	8001b78 <Error_Handler>
  }
}
 800196a:	bf00      	nop
 800196c:	3740      	adds	r7, #64	; 0x40
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_USART2_UART_Init+0x4c>)
 800197a:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <MX_USART2_UART_Init+0x50>)
 800197c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <MX_USART2_UART_Init+0x4c>)
 8001980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <MX_USART2_UART_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <MX_USART2_UART_Init+0x4c>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <MX_USART2_UART_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <MX_USART2_UART_Init+0x4c>)
 800199a:	220c      	movs	r2, #12
 800199c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <MX_USART2_UART_Init+0x4c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <MX_USART2_UART_Init+0x4c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019aa:	4805      	ldr	r0, [pc, #20]	; (80019c0 <MX_USART2_UART_Init+0x4c>)
 80019ac:	f7ff fb64 	bl	8001078 <HAL_UART_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019b6:	f000 f8df 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200000e0 	.word	0x200000e0
 80019c4:	40004400 	.word	0x40004400

080019c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <MX_USART3_UART_Init+0x50>)
 80019d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019ee:	220c      	movs	r2, #12
 80019f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 8001a00:	f7ff fb3a 	bl	8001078 <HAL_UART_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a0a:	f000 f8b5 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200000a0 	.word	0x200000a0
 8001a18:	40004800 	.word	0x40004800

08001a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a22:	f107 0310 	add.w	r3, r7, #16
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a30:	4b38      	ldr	r3, [pc, #224]	; (8001b14 <MX_GPIO_Init+0xf8>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	4a37      	ldr	r2, [pc, #220]	; (8001b14 <MX_GPIO_Init+0xf8>)
 8001a36:	f043 0310 	orr.w	r3, r3, #16
 8001a3a:	6193      	str	r3, [r2, #24]
 8001a3c:	4b35      	ldr	r3, [pc, #212]	; (8001b14 <MX_GPIO_Init+0xf8>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f003 0310 	and.w	r3, r3, #16
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a48:	4b32      	ldr	r3, [pc, #200]	; (8001b14 <MX_GPIO_Init+0xf8>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	4a31      	ldr	r2, [pc, #196]	; (8001b14 <MX_GPIO_Init+0xf8>)
 8001a4e:	f043 0320 	orr.w	r3, r3, #32
 8001a52:	6193      	str	r3, [r2, #24]
 8001a54:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <MX_GPIO_Init+0xf8>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f003 0320 	and.w	r3, r3, #32
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a60:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <MX_GPIO_Init+0xf8>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a2b      	ldr	r2, [pc, #172]	; (8001b14 <MX_GPIO_Init+0xf8>)
 8001a66:	f043 0304 	orr.w	r3, r3, #4
 8001a6a:	6193      	str	r3, [r2, #24]
 8001a6c:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <MX_GPIO_Init+0xf8>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a78:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <MX_GPIO_Init+0xf8>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4a25      	ldr	r2, [pc, #148]	; (8001b14 <MX_GPIO_Init+0xf8>)
 8001a7e:	f043 0308 	orr.w	r3, r3, #8
 8001a82:	6193      	str	r3, [r2, #24]
 8001a84:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <MX_GPIO_Init+0xf8>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	603b      	str	r3, [r7, #0]
 8001a8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2120      	movs	r1, #32
 8001a94:	4820      	ldr	r0, [pc, #128]	; (8001b18 <MX_GPIO_Init+0xfc>)
 8001a96:	f7fe fe99 	bl	80007cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_A_Pin|MOTOR_B_Pin, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001aa0:	481e      	ldr	r0, [pc, #120]	; (8001b1c <MX_GPIO_Init+0x100>)
 8001aa2:	f7fe fe93 	bl	80007cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aac:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <MX_GPIO_Init+0x104>)
 8001aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ab4:	f107 0310 	add.w	r3, r7, #16
 8001ab8:	4619      	mov	r1, r3
 8001aba:	481a      	ldr	r0, [pc, #104]	; (8001b24 <MX_GPIO_Init+0x108>)
 8001abc:	f7fe fd2c 	bl	8000518 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ac0:	2320      	movs	r3, #32
 8001ac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2302      	movs	r3, #2
 8001ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4810      	ldr	r0, [pc, #64]	; (8001b18 <MX_GPIO_Init+0xfc>)
 8001ad8:	f7fe fd1e 	bl	8000518 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_A_Pin MOTOR_B_Pin */
  GPIO_InitStruct.Pin = MOTOR_A_Pin|MOTOR_B_Pin;
 8001adc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aee:	f107 0310 	add.w	r3, r7, #16
 8001af2:	4619      	mov	r1, r3
 8001af4:	4809      	ldr	r0, [pc, #36]	; (8001b1c <MX_GPIO_Init+0x100>)
 8001af6:	f7fe fd0f 	bl	8000518 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2100      	movs	r1, #0
 8001afe:	2028      	movs	r0, #40	; 0x28
 8001b00:	f7fe fc5d 	bl	80003be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b04:	2028      	movs	r0, #40	; 0x28
 8001b06:	f7fe fc76 	bl	80003f6 <HAL_NVIC_EnableIRQ>

}
 8001b0a:	bf00      	nop
 8001b0c:	3720      	adds	r7, #32
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40010800 	.word	0x40010800
 8001b1c:	40010c00 	.word	0x40010c00
 8001b20:	10110000 	.word	0x10110000
 8001b24:	40011000 	.word	0x40011000

08001b28 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b090      	sub	sp, #64	; 0x40
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

 uint8_t Data[50]; // Tablica przechowujaca wysylana wiadomosc.
 uint16_t size = 0; // Rozmiar wysylanej wiadomosci
 8001b30:	2300      	movs	r3, #0
 8001b32:	87fb      	strh	r3, [r7, #62]	; 0x3e

 size = sprintf(Data, "Odebrana wiadomosc: %c\n\r",Received);
 8001b34:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <HAL_UART_RxCpltCallback+0x44>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	490b      	ldr	r1, [pc, #44]	; (8001b70 <HAL_UART_RxCpltCallback+0x48>)
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f9d8 	bl	8001ef8 <siprintf>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	87fb      	strh	r3, [r7, #62]	; 0x3e

 HAL_UART_Transmit_IT(&huart3, Data, size); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
 8001b4c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	4619      	mov	r1, r3
 8001b54:	4807      	ldr	r0, [pc, #28]	; (8001b74 <HAL_UART_RxCpltCallback+0x4c>)
 8001b56:	f7ff fadc 	bl	8001112 <HAL_UART_Transmit_IT>
 HAL_UART_Receive_IT(&huart3, &Received, 1); // Ponowne włączenie nasłuchiwania
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4903      	ldr	r1, [pc, #12]	; (8001b6c <HAL_UART_RxCpltCallback+0x44>)
 8001b5e:	4805      	ldr	r0, [pc, #20]	; (8001b74 <HAL_UART_RxCpltCallback+0x4c>)
 8001b60:	f7ff fb1b 	bl	800119a <HAL_UART_Receive_IT>
}
 8001b64:	bf00      	nop
 8001b66:	3740      	adds	r7, #64	; 0x40
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	2000009c 	.word	0x2000009c
 8001b70:	08002748 	.word	0x08002748
 8001b74:	200000a0 	.word	0x200000a0

08001b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <HAL_MspInit+0x5c>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <HAL_MspInit+0x5c>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6193      	str	r3, [r2, #24]
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_MspInit+0x5c>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_MspInit+0x5c>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	4a0e      	ldr	r2, [pc, #56]	; (8001be0 <HAL_MspInit+0x5c>)
 8001ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bac:	61d3      	str	r3, [r2, #28]
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <HAL_MspInit+0x5c>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_MspInit+0x60>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_MspInit+0x60>)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40010000 	.word	0x40010000

08001be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0318 	add.w	r3, r7, #24
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a39      	ldr	r2, [pc, #228]	; (8001ce8 <HAL_UART_MspInit+0x100>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d12c      	bne.n	8001c62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c08:	4b38      	ldr	r3, [pc, #224]	; (8001cec <HAL_UART_MspInit+0x104>)
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	4a37      	ldr	r2, [pc, #220]	; (8001cec <HAL_UART_MspInit+0x104>)
 8001c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c12:	61d3      	str	r3, [r2, #28]
 8001c14:	4b35      	ldr	r3, [pc, #212]	; (8001cec <HAL_UART_MspInit+0x104>)
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c20:	4b32      	ldr	r3, [pc, #200]	; (8001cec <HAL_UART_MspInit+0x104>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	4a31      	ldr	r2, [pc, #196]	; (8001cec <HAL_UART_MspInit+0x104>)
 8001c26:	f043 0304 	orr.w	r3, r3, #4
 8001c2a:	6193      	str	r3, [r2, #24]
 8001c2c:	4b2f      	ldr	r3, [pc, #188]	; (8001cec <HAL_UART_MspInit+0x104>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c38:	230c      	movs	r3, #12
 8001c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2302      	movs	r3, #2
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	f107 0318 	add.w	r3, r7, #24
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4829      	ldr	r0, [pc, #164]	; (8001cf0 <HAL_UART_MspInit+0x108>)
 8001c4c:	f7fe fc64 	bl	8000518 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c50:	2200      	movs	r2, #0
 8001c52:	2100      	movs	r1, #0
 8001c54:	2026      	movs	r0, #38	; 0x26
 8001c56:	f7fe fbb2 	bl	80003be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c5a:	2026      	movs	r0, #38	; 0x26
 8001c5c:	f7fe fbcb 	bl	80003f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c60:	e03e      	b.n	8001ce0 <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART3)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a23      	ldr	r2, [pc, #140]	; (8001cf4 <HAL_UART_MspInit+0x10c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d139      	bne.n	8001ce0 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <HAL_UART_MspInit+0x104>)
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	4a1e      	ldr	r2, [pc, #120]	; (8001cec <HAL_UART_MspInit+0x104>)
 8001c72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c76:	61d3      	str	r3, [r2, #28]
 8001c78:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <HAL_UART_MspInit+0x104>)
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <HAL_UART_MspInit+0x104>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	4a18      	ldr	r2, [pc, #96]	; (8001cec <HAL_UART_MspInit+0x104>)
 8001c8a:	f043 0308 	orr.w	r3, r3, #8
 8001c8e:	6193      	str	r3, [r2, #24]
 8001c90:	4b16      	ldr	r3, [pc, #88]	; (8001cec <HAL_UART_MspInit+0x104>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001caa:	f107 0318 	add.w	r3, r7, #24
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4811      	ldr	r0, [pc, #68]	; (8001cf8 <HAL_UART_MspInit+0x110>)
 8001cb2:	f7fe fc31 	bl	8000518 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001cb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc4:	f107 0318 	add.w	r3, r7, #24
 8001cc8:	4619      	mov	r1, r3
 8001cca:	480b      	ldr	r0, [pc, #44]	; (8001cf8 <HAL_UART_MspInit+0x110>)
 8001ccc:	f7fe fc24 	bl	8000518 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	2027      	movs	r0, #39	; 0x27
 8001cd6:	f7fe fb72 	bl	80003be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cda:	2027      	movs	r0, #39	; 0x27
 8001cdc:	f7fe fb8b 	bl	80003f6 <HAL_NVIC_EnableIRQ>
}
 8001ce0:	bf00      	nop
 8001ce2:	3728      	adds	r7, #40	; 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40004400 	.word	0x40004400
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40010800 	.word	0x40010800
 8001cf4:	40004800 	.word	0x40004800
 8001cf8:	40010c00 	.word	0x40010c00

08001cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <HardFault_Handler+0x4>

08001d0e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d12:	e7fe      	b.n	8001d12 <MemManage_Handler+0x4>

08001d14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <BusFault_Handler+0x4>

08001d1a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d1e:	e7fe      	b.n	8001d1e <UsageFault_Handler+0x4>

08001d20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d48:	f7fe fa46 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <USART2_IRQHandler+0x10>)
 8001d56:	f7ff fa75 	bl	8001244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200000e0 	.word	0x200000e0

08001d64 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <USART3_IRQHandler+0x10>)
 8001d6a:	f7ff fa6b 	bl	8001244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200000a0 	.word	0x200000a0

08001d78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d80:	f7fe fd3c 	bl	80007fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <_sbrk+0x50>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d102      	bne.n	8001d9e <_sbrk+0x16>
		heap_end = &end;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <_sbrk+0x50>)
 8001d9a:	4a10      	ldr	r2, [pc, #64]	; (8001ddc <_sbrk+0x54>)
 8001d9c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <_sbrk+0x50>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <_sbrk+0x50>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4413      	add	r3, r2
 8001dac:	466a      	mov	r2, sp
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d907      	bls.n	8001dc2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001db2:	f000 f86f 	bl	8001e94 <__errno>
 8001db6:	4602      	mov	r2, r0
 8001db8:	230c      	movs	r3, #12
 8001dba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc0:	e006      	b.n	8001dd0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001dc2:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <_sbrk+0x50>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	4a03      	ldr	r2, [pc, #12]	; (8001dd8 <_sbrk+0x50>)
 8001dcc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001dce:	68fb      	ldr	r3, [r7, #12]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	2000008c 	.word	0x2000008c
 8001ddc:	20000128 	.word	0x20000128

08001de0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001de4:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <SystemInit+0x5c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a14      	ldr	r2, [pc, #80]	; (8001e3c <SystemInit+0x5c>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <SystemInit+0x5c>)
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	4911      	ldr	r1, [pc, #68]	; (8001e3c <SystemInit+0x5c>)
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <SystemInit+0x60>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <SystemInit+0x5c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <SystemInit+0x5c>)
 8001e02:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e0a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <SystemInit+0x5c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <SystemInit+0x5c>)
 8001e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e16:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <SystemInit+0x5c>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <SystemInit+0x5c>)
 8001e1e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001e22:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <SystemInit+0x5c>)
 8001e26:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001e2a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <SystemInit+0x64>)
 8001e2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e32:	609a      	str	r2, [r3, #8]
#endif 
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	f8ff0000 	.word	0xf8ff0000
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001e48:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001e4a:	e003      	b.n	8001e54 <LoopCopyDataInit>

08001e4c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001e4e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001e50:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001e52:	3104      	adds	r1, #4

08001e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e54:	480a      	ldr	r0, [pc, #40]	; (8001e80 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001e58:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e5a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e5c:	d3f6      	bcc.n	8001e4c <CopyDataInit>
  ldr r2, =_sbss
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001e60:	e002      	b.n	8001e68 <LoopFillZerobss>

08001e62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e62:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001e64:	f842 3b04 	str.w	r3, [r2], #4

08001e68 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001e6a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e6c:	d3f9      	bcc.n	8001e62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e6e:	f7ff ffb7 	bl	8001de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e72:	f000 f815 	bl	8001ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e76:	f7ff fced 	bl	8001854 <main>
  bx lr
 8001e7a:	4770      	bx	lr
  ldr r3, =_sidata
 8001e7c:	080027b8 	.word	0x080027b8
  ldr r0, =_sdata
 8001e80:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e84:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001e88:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001e8c:	20000124 	.word	0x20000124

08001e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e90:	e7fe      	b.n	8001e90 <ADC1_2_IRQHandler>
	...

08001e94 <__errno>:
 8001e94:	4b01      	ldr	r3, [pc, #4]	; (8001e9c <__errno+0x8>)
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	2000000c 	.word	0x2000000c

08001ea0 <__libc_init_array>:
 8001ea0:	b570      	push	{r4, r5, r6, lr}
 8001ea2:	2500      	movs	r5, #0
 8001ea4:	4e0c      	ldr	r6, [pc, #48]	; (8001ed8 <__libc_init_array+0x38>)
 8001ea6:	4c0d      	ldr	r4, [pc, #52]	; (8001edc <__libc_init_array+0x3c>)
 8001ea8:	1ba4      	subs	r4, r4, r6
 8001eaa:	10a4      	asrs	r4, r4, #2
 8001eac:	42a5      	cmp	r5, r4
 8001eae:	d109      	bne.n	8001ec4 <__libc_init_array+0x24>
 8001eb0:	f000 fc34 	bl	800271c <_init>
 8001eb4:	2500      	movs	r5, #0
 8001eb6:	4e0a      	ldr	r6, [pc, #40]	; (8001ee0 <__libc_init_array+0x40>)
 8001eb8:	4c0a      	ldr	r4, [pc, #40]	; (8001ee4 <__libc_init_array+0x44>)
 8001eba:	1ba4      	subs	r4, r4, r6
 8001ebc:	10a4      	asrs	r4, r4, #2
 8001ebe:	42a5      	cmp	r5, r4
 8001ec0:	d105      	bne.n	8001ece <__libc_init_array+0x2e>
 8001ec2:	bd70      	pop	{r4, r5, r6, pc}
 8001ec4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ec8:	4798      	blx	r3
 8001eca:	3501      	adds	r5, #1
 8001ecc:	e7ee      	b.n	8001eac <__libc_init_array+0xc>
 8001ece:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ed2:	4798      	blx	r3
 8001ed4:	3501      	adds	r5, #1
 8001ed6:	e7f2      	b.n	8001ebe <__libc_init_array+0x1e>
 8001ed8:	080027b0 	.word	0x080027b0
 8001edc:	080027b0 	.word	0x080027b0
 8001ee0:	080027b0 	.word	0x080027b0
 8001ee4:	080027b4 	.word	0x080027b4

08001ee8 <memset>:
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4402      	add	r2, r0
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d100      	bne.n	8001ef2 <memset+0xa>
 8001ef0:	4770      	bx	lr
 8001ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ef6:	e7f9      	b.n	8001eec <memset+0x4>

08001ef8 <siprintf>:
 8001ef8:	b40e      	push	{r1, r2, r3}
 8001efa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001efe:	b500      	push	{lr}
 8001f00:	b09c      	sub	sp, #112	; 0x70
 8001f02:	ab1d      	add	r3, sp, #116	; 0x74
 8001f04:	9002      	str	r0, [sp, #8]
 8001f06:	9006      	str	r0, [sp, #24]
 8001f08:	9107      	str	r1, [sp, #28]
 8001f0a:	9104      	str	r1, [sp, #16]
 8001f0c:	4808      	ldr	r0, [pc, #32]	; (8001f30 <siprintf+0x38>)
 8001f0e:	4909      	ldr	r1, [pc, #36]	; (8001f34 <siprintf+0x3c>)
 8001f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f14:	9105      	str	r1, [sp, #20]
 8001f16:	6800      	ldr	r0, [r0, #0]
 8001f18:	a902      	add	r1, sp, #8
 8001f1a:	9301      	str	r3, [sp, #4]
 8001f1c:	f000 f866 	bl	8001fec <_svfiprintf_r>
 8001f20:	2200      	movs	r2, #0
 8001f22:	9b02      	ldr	r3, [sp, #8]
 8001f24:	701a      	strb	r2, [r3, #0]
 8001f26:	b01c      	add	sp, #112	; 0x70
 8001f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f2c:	b003      	add	sp, #12
 8001f2e:	4770      	bx	lr
 8001f30:	2000000c 	.word	0x2000000c
 8001f34:	ffff0208 	.word	0xffff0208

08001f38 <__ssputs_r>:
 8001f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f3c:	688e      	ldr	r6, [r1, #8]
 8001f3e:	4682      	mov	sl, r0
 8001f40:	429e      	cmp	r6, r3
 8001f42:	460c      	mov	r4, r1
 8001f44:	4690      	mov	r8, r2
 8001f46:	4699      	mov	r9, r3
 8001f48:	d837      	bhi.n	8001fba <__ssputs_r+0x82>
 8001f4a:	898a      	ldrh	r2, [r1, #12]
 8001f4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001f50:	d031      	beq.n	8001fb6 <__ssputs_r+0x7e>
 8001f52:	2302      	movs	r3, #2
 8001f54:	6825      	ldr	r5, [r4, #0]
 8001f56:	6909      	ldr	r1, [r1, #16]
 8001f58:	1a6f      	subs	r7, r5, r1
 8001f5a:	6965      	ldr	r5, [r4, #20]
 8001f5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f60:	fb95 f5f3 	sdiv	r5, r5, r3
 8001f64:	f109 0301 	add.w	r3, r9, #1
 8001f68:	443b      	add	r3, r7
 8001f6a:	429d      	cmp	r5, r3
 8001f6c:	bf38      	it	cc
 8001f6e:	461d      	movcc	r5, r3
 8001f70:	0553      	lsls	r3, r2, #21
 8001f72:	d530      	bpl.n	8001fd6 <__ssputs_r+0x9e>
 8001f74:	4629      	mov	r1, r5
 8001f76:	f000 fb37 	bl	80025e8 <_malloc_r>
 8001f7a:	4606      	mov	r6, r0
 8001f7c:	b950      	cbnz	r0, 8001f94 <__ssputs_r+0x5c>
 8001f7e:	230c      	movs	r3, #12
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	f8ca 3000 	str.w	r3, [sl]
 8001f88:	89a3      	ldrh	r3, [r4, #12]
 8001f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f8e:	81a3      	strh	r3, [r4, #12]
 8001f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f94:	463a      	mov	r2, r7
 8001f96:	6921      	ldr	r1, [r4, #16]
 8001f98:	f000 fab6 	bl	8002508 <memcpy>
 8001f9c:	89a3      	ldrh	r3, [r4, #12]
 8001f9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa6:	81a3      	strh	r3, [r4, #12]
 8001fa8:	6126      	str	r6, [r4, #16]
 8001faa:	443e      	add	r6, r7
 8001fac:	6026      	str	r6, [r4, #0]
 8001fae:	464e      	mov	r6, r9
 8001fb0:	6165      	str	r5, [r4, #20]
 8001fb2:	1bed      	subs	r5, r5, r7
 8001fb4:	60a5      	str	r5, [r4, #8]
 8001fb6:	454e      	cmp	r6, r9
 8001fb8:	d900      	bls.n	8001fbc <__ssputs_r+0x84>
 8001fba:	464e      	mov	r6, r9
 8001fbc:	4632      	mov	r2, r6
 8001fbe:	4641      	mov	r1, r8
 8001fc0:	6820      	ldr	r0, [r4, #0]
 8001fc2:	f000 faac 	bl	800251e <memmove>
 8001fc6:	68a3      	ldr	r3, [r4, #8]
 8001fc8:	2000      	movs	r0, #0
 8001fca:	1b9b      	subs	r3, r3, r6
 8001fcc:	60a3      	str	r3, [r4, #8]
 8001fce:	6823      	ldr	r3, [r4, #0]
 8001fd0:	441e      	add	r6, r3
 8001fd2:	6026      	str	r6, [r4, #0]
 8001fd4:	e7dc      	b.n	8001f90 <__ssputs_r+0x58>
 8001fd6:	462a      	mov	r2, r5
 8001fd8:	f000 fb60 	bl	800269c <_realloc_r>
 8001fdc:	4606      	mov	r6, r0
 8001fde:	2800      	cmp	r0, #0
 8001fe0:	d1e2      	bne.n	8001fa8 <__ssputs_r+0x70>
 8001fe2:	6921      	ldr	r1, [r4, #16]
 8001fe4:	4650      	mov	r0, sl
 8001fe6:	f000 fab3 	bl	8002550 <_free_r>
 8001fea:	e7c8      	b.n	8001f7e <__ssputs_r+0x46>

08001fec <_svfiprintf_r>:
 8001fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ff0:	461d      	mov	r5, r3
 8001ff2:	898b      	ldrh	r3, [r1, #12]
 8001ff4:	b09d      	sub	sp, #116	; 0x74
 8001ff6:	061f      	lsls	r7, r3, #24
 8001ff8:	4680      	mov	r8, r0
 8001ffa:	460c      	mov	r4, r1
 8001ffc:	4616      	mov	r6, r2
 8001ffe:	d50f      	bpl.n	8002020 <_svfiprintf_r+0x34>
 8002000:	690b      	ldr	r3, [r1, #16]
 8002002:	b96b      	cbnz	r3, 8002020 <_svfiprintf_r+0x34>
 8002004:	2140      	movs	r1, #64	; 0x40
 8002006:	f000 faef 	bl	80025e8 <_malloc_r>
 800200a:	6020      	str	r0, [r4, #0]
 800200c:	6120      	str	r0, [r4, #16]
 800200e:	b928      	cbnz	r0, 800201c <_svfiprintf_r+0x30>
 8002010:	230c      	movs	r3, #12
 8002012:	f8c8 3000 	str.w	r3, [r8]
 8002016:	f04f 30ff 	mov.w	r0, #4294967295
 800201a:	e0c8      	b.n	80021ae <_svfiprintf_r+0x1c2>
 800201c:	2340      	movs	r3, #64	; 0x40
 800201e:	6163      	str	r3, [r4, #20]
 8002020:	2300      	movs	r3, #0
 8002022:	9309      	str	r3, [sp, #36]	; 0x24
 8002024:	2320      	movs	r3, #32
 8002026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800202a:	2330      	movs	r3, #48	; 0x30
 800202c:	f04f 0b01 	mov.w	fp, #1
 8002030:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002034:	9503      	str	r5, [sp, #12]
 8002036:	4637      	mov	r7, r6
 8002038:	463d      	mov	r5, r7
 800203a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800203e:	b10b      	cbz	r3, 8002044 <_svfiprintf_r+0x58>
 8002040:	2b25      	cmp	r3, #37	; 0x25
 8002042:	d13e      	bne.n	80020c2 <_svfiprintf_r+0xd6>
 8002044:	ebb7 0a06 	subs.w	sl, r7, r6
 8002048:	d00b      	beq.n	8002062 <_svfiprintf_r+0x76>
 800204a:	4653      	mov	r3, sl
 800204c:	4632      	mov	r2, r6
 800204e:	4621      	mov	r1, r4
 8002050:	4640      	mov	r0, r8
 8002052:	f7ff ff71 	bl	8001f38 <__ssputs_r>
 8002056:	3001      	adds	r0, #1
 8002058:	f000 80a4 	beq.w	80021a4 <_svfiprintf_r+0x1b8>
 800205c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800205e:	4453      	add	r3, sl
 8002060:	9309      	str	r3, [sp, #36]	; 0x24
 8002062:	783b      	ldrb	r3, [r7, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 809d 	beq.w	80021a4 <_svfiprintf_r+0x1b8>
 800206a:	2300      	movs	r3, #0
 800206c:	f04f 32ff 	mov.w	r2, #4294967295
 8002070:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002074:	9304      	str	r3, [sp, #16]
 8002076:	9307      	str	r3, [sp, #28]
 8002078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800207c:	931a      	str	r3, [sp, #104]	; 0x68
 800207e:	462f      	mov	r7, r5
 8002080:	2205      	movs	r2, #5
 8002082:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002086:	4850      	ldr	r0, [pc, #320]	; (80021c8 <_svfiprintf_r+0x1dc>)
 8002088:	f000 fa30 	bl	80024ec <memchr>
 800208c:	9b04      	ldr	r3, [sp, #16]
 800208e:	b9d0      	cbnz	r0, 80020c6 <_svfiprintf_r+0xda>
 8002090:	06d9      	lsls	r1, r3, #27
 8002092:	bf44      	itt	mi
 8002094:	2220      	movmi	r2, #32
 8002096:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800209a:	071a      	lsls	r2, r3, #28
 800209c:	bf44      	itt	mi
 800209e:	222b      	movmi	r2, #43	; 0x2b
 80020a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80020a4:	782a      	ldrb	r2, [r5, #0]
 80020a6:	2a2a      	cmp	r2, #42	; 0x2a
 80020a8:	d015      	beq.n	80020d6 <_svfiprintf_r+0xea>
 80020aa:	462f      	mov	r7, r5
 80020ac:	2000      	movs	r0, #0
 80020ae:	250a      	movs	r5, #10
 80020b0:	9a07      	ldr	r2, [sp, #28]
 80020b2:	4639      	mov	r1, r7
 80020b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80020b8:	3b30      	subs	r3, #48	; 0x30
 80020ba:	2b09      	cmp	r3, #9
 80020bc:	d94d      	bls.n	800215a <_svfiprintf_r+0x16e>
 80020be:	b1b8      	cbz	r0, 80020f0 <_svfiprintf_r+0x104>
 80020c0:	e00f      	b.n	80020e2 <_svfiprintf_r+0xf6>
 80020c2:	462f      	mov	r7, r5
 80020c4:	e7b8      	b.n	8002038 <_svfiprintf_r+0x4c>
 80020c6:	4a40      	ldr	r2, [pc, #256]	; (80021c8 <_svfiprintf_r+0x1dc>)
 80020c8:	463d      	mov	r5, r7
 80020ca:	1a80      	subs	r0, r0, r2
 80020cc:	fa0b f000 	lsl.w	r0, fp, r0
 80020d0:	4318      	orrs	r0, r3
 80020d2:	9004      	str	r0, [sp, #16]
 80020d4:	e7d3      	b.n	800207e <_svfiprintf_r+0x92>
 80020d6:	9a03      	ldr	r2, [sp, #12]
 80020d8:	1d11      	adds	r1, r2, #4
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	9103      	str	r1, [sp, #12]
 80020de:	2a00      	cmp	r2, #0
 80020e0:	db01      	blt.n	80020e6 <_svfiprintf_r+0xfa>
 80020e2:	9207      	str	r2, [sp, #28]
 80020e4:	e004      	b.n	80020f0 <_svfiprintf_r+0x104>
 80020e6:	4252      	negs	r2, r2
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	9207      	str	r2, [sp, #28]
 80020ee:	9304      	str	r3, [sp, #16]
 80020f0:	783b      	ldrb	r3, [r7, #0]
 80020f2:	2b2e      	cmp	r3, #46	; 0x2e
 80020f4:	d10c      	bne.n	8002110 <_svfiprintf_r+0x124>
 80020f6:	787b      	ldrb	r3, [r7, #1]
 80020f8:	2b2a      	cmp	r3, #42	; 0x2a
 80020fa:	d133      	bne.n	8002164 <_svfiprintf_r+0x178>
 80020fc:	9b03      	ldr	r3, [sp, #12]
 80020fe:	3702      	adds	r7, #2
 8002100:	1d1a      	adds	r2, r3, #4
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	9203      	str	r2, [sp, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	bfb8      	it	lt
 800210a:	f04f 33ff 	movlt.w	r3, #4294967295
 800210e:	9305      	str	r3, [sp, #20]
 8002110:	4d2e      	ldr	r5, [pc, #184]	; (80021cc <_svfiprintf_r+0x1e0>)
 8002112:	2203      	movs	r2, #3
 8002114:	7839      	ldrb	r1, [r7, #0]
 8002116:	4628      	mov	r0, r5
 8002118:	f000 f9e8 	bl	80024ec <memchr>
 800211c:	b138      	cbz	r0, 800212e <_svfiprintf_r+0x142>
 800211e:	2340      	movs	r3, #64	; 0x40
 8002120:	1b40      	subs	r0, r0, r5
 8002122:	fa03 f000 	lsl.w	r0, r3, r0
 8002126:	9b04      	ldr	r3, [sp, #16]
 8002128:	3701      	adds	r7, #1
 800212a:	4303      	orrs	r3, r0
 800212c:	9304      	str	r3, [sp, #16]
 800212e:	7839      	ldrb	r1, [r7, #0]
 8002130:	2206      	movs	r2, #6
 8002132:	4827      	ldr	r0, [pc, #156]	; (80021d0 <_svfiprintf_r+0x1e4>)
 8002134:	1c7e      	adds	r6, r7, #1
 8002136:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800213a:	f000 f9d7 	bl	80024ec <memchr>
 800213e:	2800      	cmp	r0, #0
 8002140:	d038      	beq.n	80021b4 <_svfiprintf_r+0x1c8>
 8002142:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <_svfiprintf_r+0x1e8>)
 8002144:	bb13      	cbnz	r3, 800218c <_svfiprintf_r+0x1a0>
 8002146:	9b03      	ldr	r3, [sp, #12]
 8002148:	3307      	adds	r3, #7
 800214a:	f023 0307 	bic.w	r3, r3, #7
 800214e:	3308      	adds	r3, #8
 8002150:	9303      	str	r3, [sp, #12]
 8002152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002154:	444b      	add	r3, r9
 8002156:	9309      	str	r3, [sp, #36]	; 0x24
 8002158:	e76d      	b.n	8002036 <_svfiprintf_r+0x4a>
 800215a:	fb05 3202 	mla	r2, r5, r2, r3
 800215e:	2001      	movs	r0, #1
 8002160:	460f      	mov	r7, r1
 8002162:	e7a6      	b.n	80020b2 <_svfiprintf_r+0xc6>
 8002164:	2300      	movs	r3, #0
 8002166:	250a      	movs	r5, #10
 8002168:	4619      	mov	r1, r3
 800216a:	3701      	adds	r7, #1
 800216c:	9305      	str	r3, [sp, #20]
 800216e:	4638      	mov	r0, r7
 8002170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002174:	3a30      	subs	r2, #48	; 0x30
 8002176:	2a09      	cmp	r2, #9
 8002178:	d903      	bls.n	8002182 <_svfiprintf_r+0x196>
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0c8      	beq.n	8002110 <_svfiprintf_r+0x124>
 800217e:	9105      	str	r1, [sp, #20]
 8002180:	e7c6      	b.n	8002110 <_svfiprintf_r+0x124>
 8002182:	fb05 2101 	mla	r1, r5, r1, r2
 8002186:	2301      	movs	r3, #1
 8002188:	4607      	mov	r7, r0
 800218a:	e7f0      	b.n	800216e <_svfiprintf_r+0x182>
 800218c:	ab03      	add	r3, sp, #12
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	4622      	mov	r2, r4
 8002192:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <_svfiprintf_r+0x1ec>)
 8002194:	a904      	add	r1, sp, #16
 8002196:	4640      	mov	r0, r8
 8002198:	f3af 8000 	nop.w
 800219c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80021a0:	4681      	mov	r9, r0
 80021a2:	d1d6      	bne.n	8002152 <_svfiprintf_r+0x166>
 80021a4:	89a3      	ldrh	r3, [r4, #12]
 80021a6:	065b      	lsls	r3, r3, #25
 80021a8:	f53f af35 	bmi.w	8002016 <_svfiprintf_r+0x2a>
 80021ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80021ae:	b01d      	add	sp, #116	; 0x74
 80021b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021b4:	ab03      	add	r3, sp, #12
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	4622      	mov	r2, r4
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <_svfiprintf_r+0x1ec>)
 80021bc:	a904      	add	r1, sp, #16
 80021be:	4640      	mov	r0, r8
 80021c0:	f000 f882 	bl	80022c8 <_printf_i>
 80021c4:	e7ea      	b.n	800219c <_svfiprintf_r+0x1b0>
 80021c6:	bf00      	nop
 80021c8:	0800277c 	.word	0x0800277c
 80021cc:	08002782 	.word	0x08002782
 80021d0:	08002786 	.word	0x08002786
 80021d4:	00000000 	.word	0x00000000
 80021d8:	08001f39 	.word	0x08001f39

080021dc <_printf_common>:
 80021dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021e0:	4691      	mov	r9, r2
 80021e2:	461f      	mov	r7, r3
 80021e4:	688a      	ldr	r2, [r1, #8]
 80021e6:	690b      	ldr	r3, [r1, #16]
 80021e8:	4606      	mov	r6, r0
 80021ea:	4293      	cmp	r3, r2
 80021ec:	bfb8      	it	lt
 80021ee:	4613      	movlt	r3, r2
 80021f0:	f8c9 3000 	str.w	r3, [r9]
 80021f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80021f8:	460c      	mov	r4, r1
 80021fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80021fe:	b112      	cbz	r2, 8002206 <_printf_common+0x2a>
 8002200:	3301      	adds	r3, #1
 8002202:	f8c9 3000 	str.w	r3, [r9]
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	0699      	lsls	r1, r3, #26
 800220a:	bf42      	ittt	mi
 800220c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002210:	3302      	addmi	r3, #2
 8002212:	f8c9 3000 	strmi.w	r3, [r9]
 8002216:	6825      	ldr	r5, [r4, #0]
 8002218:	f015 0506 	ands.w	r5, r5, #6
 800221c:	d107      	bne.n	800222e <_printf_common+0x52>
 800221e:	f104 0a19 	add.w	sl, r4, #25
 8002222:	68e3      	ldr	r3, [r4, #12]
 8002224:	f8d9 2000 	ldr.w	r2, [r9]
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	42ab      	cmp	r3, r5
 800222c:	dc29      	bgt.n	8002282 <_printf_common+0xa6>
 800222e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002232:	6822      	ldr	r2, [r4, #0]
 8002234:	3300      	adds	r3, #0
 8002236:	bf18      	it	ne
 8002238:	2301      	movne	r3, #1
 800223a:	0692      	lsls	r2, r2, #26
 800223c:	d42e      	bmi.n	800229c <_printf_common+0xc0>
 800223e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002242:	4639      	mov	r1, r7
 8002244:	4630      	mov	r0, r6
 8002246:	47c0      	blx	r8
 8002248:	3001      	adds	r0, #1
 800224a:	d021      	beq.n	8002290 <_printf_common+0xb4>
 800224c:	6823      	ldr	r3, [r4, #0]
 800224e:	68e5      	ldr	r5, [r4, #12]
 8002250:	f003 0306 	and.w	r3, r3, #6
 8002254:	2b04      	cmp	r3, #4
 8002256:	bf18      	it	ne
 8002258:	2500      	movne	r5, #0
 800225a:	f8d9 2000 	ldr.w	r2, [r9]
 800225e:	f04f 0900 	mov.w	r9, #0
 8002262:	bf08      	it	eq
 8002264:	1aad      	subeq	r5, r5, r2
 8002266:	68a3      	ldr	r3, [r4, #8]
 8002268:	6922      	ldr	r2, [r4, #16]
 800226a:	bf08      	it	eq
 800226c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002270:	4293      	cmp	r3, r2
 8002272:	bfc4      	itt	gt
 8002274:	1a9b      	subgt	r3, r3, r2
 8002276:	18ed      	addgt	r5, r5, r3
 8002278:	341a      	adds	r4, #26
 800227a:	454d      	cmp	r5, r9
 800227c:	d11a      	bne.n	80022b4 <_printf_common+0xd8>
 800227e:	2000      	movs	r0, #0
 8002280:	e008      	b.n	8002294 <_printf_common+0xb8>
 8002282:	2301      	movs	r3, #1
 8002284:	4652      	mov	r2, sl
 8002286:	4639      	mov	r1, r7
 8002288:	4630      	mov	r0, r6
 800228a:	47c0      	blx	r8
 800228c:	3001      	adds	r0, #1
 800228e:	d103      	bne.n	8002298 <_printf_common+0xbc>
 8002290:	f04f 30ff 	mov.w	r0, #4294967295
 8002294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002298:	3501      	adds	r5, #1
 800229a:	e7c2      	b.n	8002222 <_printf_common+0x46>
 800229c:	2030      	movs	r0, #48	; 0x30
 800229e:	18e1      	adds	r1, r4, r3
 80022a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80022aa:	4422      	add	r2, r4
 80022ac:	3302      	adds	r3, #2
 80022ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80022b2:	e7c4      	b.n	800223e <_printf_common+0x62>
 80022b4:	2301      	movs	r3, #1
 80022b6:	4622      	mov	r2, r4
 80022b8:	4639      	mov	r1, r7
 80022ba:	4630      	mov	r0, r6
 80022bc:	47c0      	blx	r8
 80022be:	3001      	adds	r0, #1
 80022c0:	d0e6      	beq.n	8002290 <_printf_common+0xb4>
 80022c2:	f109 0901 	add.w	r9, r9, #1
 80022c6:	e7d8      	b.n	800227a <_printf_common+0x9e>

080022c8 <_printf_i>:
 80022c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80022d0:	460c      	mov	r4, r1
 80022d2:	7e09      	ldrb	r1, [r1, #24]
 80022d4:	b085      	sub	sp, #20
 80022d6:	296e      	cmp	r1, #110	; 0x6e
 80022d8:	4617      	mov	r7, r2
 80022da:	4606      	mov	r6, r0
 80022dc:	4698      	mov	r8, r3
 80022de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80022e0:	f000 80b3 	beq.w	800244a <_printf_i+0x182>
 80022e4:	d822      	bhi.n	800232c <_printf_i+0x64>
 80022e6:	2963      	cmp	r1, #99	; 0x63
 80022e8:	d036      	beq.n	8002358 <_printf_i+0x90>
 80022ea:	d80a      	bhi.n	8002302 <_printf_i+0x3a>
 80022ec:	2900      	cmp	r1, #0
 80022ee:	f000 80b9 	beq.w	8002464 <_printf_i+0x19c>
 80022f2:	2958      	cmp	r1, #88	; 0x58
 80022f4:	f000 8083 	beq.w	80023fe <_printf_i+0x136>
 80022f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002300:	e032      	b.n	8002368 <_printf_i+0xa0>
 8002302:	2964      	cmp	r1, #100	; 0x64
 8002304:	d001      	beq.n	800230a <_printf_i+0x42>
 8002306:	2969      	cmp	r1, #105	; 0x69
 8002308:	d1f6      	bne.n	80022f8 <_printf_i+0x30>
 800230a:	6820      	ldr	r0, [r4, #0]
 800230c:	6813      	ldr	r3, [r2, #0]
 800230e:	0605      	lsls	r5, r0, #24
 8002310:	f103 0104 	add.w	r1, r3, #4
 8002314:	d52a      	bpl.n	800236c <_printf_i+0xa4>
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6011      	str	r1, [r2, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	da03      	bge.n	8002326 <_printf_i+0x5e>
 800231e:	222d      	movs	r2, #45	; 0x2d
 8002320:	425b      	negs	r3, r3
 8002322:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002326:	486f      	ldr	r0, [pc, #444]	; (80024e4 <_printf_i+0x21c>)
 8002328:	220a      	movs	r2, #10
 800232a:	e039      	b.n	80023a0 <_printf_i+0xd8>
 800232c:	2973      	cmp	r1, #115	; 0x73
 800232e:	f000 809d 	beq.w	800246c <_printf_i+0x1a4>
 8002332:	d808      	bhi.n	8002346 <_printf_i+0x7e>
 8002334:	296f      	cmp	r1, #111	; 0x6f
 8002336:	d020      	beq.n	800237a <_printf_i+0xb2>
 8002338:	2970      	cmp	r1, #112	; 0x70
 800233a:	d1dd      	bne.n	80022f8 <_printf_i+0x30>
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	f043 0320 	orr.w	r3, r3, #32
 8002342:	6023      	str	r3, [r4, #0]
 8002344:	e003      	b.n	800234e <_printf_i+0x86>
 8002346:	2975      	cmp	r1, #117	; 0x75
 8002348:	d017      	beq.n	800237a <_printf_i+0xb2>
 800234a:	2978      	cmp	r1, #120	; 0x78
 800234c:	d1d4      	bne.n	80022f8 <_printf_i+0x30>
 800234e:	2378      	movs	r3, #120	; 0x78
 8002350:	4865      	ldr	r0, [pc, #404]	; (80024e8 <_printf_i+0x220>)
 8002352:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002356:	e055      	b.n	8002404 <_printf_i+0x13c>
 8002358:	6813      	ldr	r3, [r2, #0]
 800235a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800235e:	1d19      	adds	r1, r3, #4
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6011      	str	r1, [r2, #0]
 8002364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002368:	2301      	movs	r3, #1
 800236a:	e08c      	b.n	8002486 <_printf_i+0x1be>
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002372:	6011      	str	r1, [r2, #0]
 8002374:	bf18      	it	ne
 8002376:	b21b      	sxthne	r3, r3
 8002378:	e7cf      	b.n	800231a <_printf_i+0x52>
 800237a:	6813      	ldr	r3, [r2, #0]
 800237c:	6825      	ldr	r5, [r4, #0]
 800237e:	1d18      	adds	r0, r3, #4
 8002380:	6010      	str	r0, [r2, #0]
 8002382:	0628      	lsls	r0, r5, #24
 8002384:	d501      	bpl.n	800238a <_printf_i+0xc2>
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	e002      	b.n	8002390 <_printf_i+0xc8>
 800238a:	0668      	lsls	r0, r5, #25
 800238c:	d5fb      	bpl.n	8002386 <_printf_i+0xbe>
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	296f      	cmp	r1, #111	; 0x6f
 8002392:	bf14      	ite	ne
 8002394:	220a      	movne	r2, #10
 8002396:	2208      	moveq	r2, #8
 8002398:	4852      	ldr	r0, [pc, #328]	; (80024e4 <_printf_i+0x21c>)
 800239a:	2100      	movs	r1, #0
 800239c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80023a0:	6865      	ldr	r5, [r4, #4]
 80023a2:	2d00      	cmp	r5, #0
 80023a4:	60a5      	str	r5, [r4, #8]
 80023a6:	f2c0 8095 	blt.w	80024d4 <_printf_i+0x20c>
 80023aa:	6821      	ldr	r1, [r4, #0]
 80023ac:	f021 0104 	bic.w	r1, r1, #4
 80023b0:	6021      	str	r1, [r4, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d13d      	bne.n	8002432 <_printf_i+0x16a>
 80023b6:	2d00      	cmp	r5, #0
 80023b8:	f040 808e 	bne.w	80024d8 <_printf_i+0x210>
 80023bc:	4665      	mov	r5, ip
 80023be:	2a08      	cmp	r2, #8
 80023c0:	d10b      	bne.n	80023da <_printf_i+0x112>
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	07db      	lsls	r3, r3, #31
 80023c6:	d508      	bpl.n	80023da <_printf_i+0x112>
 80023c8:	6923      	ldr	r3, [r4, #16]
 80023ca:	6862      	ldr	r2, [r4, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	bfde      	ittt	le
 80023d0:	2330      	movle	r3, #48	; 0x30
 80023d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80023d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80023da:	ebac 0305 	sub.w	r3, ip, r5
 80023de:	6123      	str	r3, [r4, #16]
 80023e0:	f8cd 8000 	str.w	r8, [sp]
 80023e4:	463b      	mov	r3, r7
 80023e6:	aa03      	add	r2, sp, #12
 80023e8:	4621      	mov	r1, r4
 80023ea:	4630      	mov	r0, r6
 80023ec:	f7ff fef6 	bl	80021dc <_printf_common>
 80023f0:	3001      	adds	r0, #1
 80023f2:	d14d      	bne.n	8002490 <_printf_i+0x1c8>
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	b005      	add	sp, #20
 80023fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023fe:	4839      	ldr	r0, [pc, #228]	; (80024e4 <_printf_i+0x21c>)
 8002400:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002404:	6813      	ldr	r3, [r2, #0]
 8002406:	6821      	ldr	r1, [r4, #0]
 8002408:	1d1d      	adds	r5, r3, #4
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6015      	str	r5, [r2, #0]
 800240e:	060a      	lsls	r2, r1, #24
 8002410:	d50b      	bpl.n	800242a <_printf_i+0x162>
 8002412:	07ca      	lsls	r2, r1, #31
 8002414:	bf44      	itt	mi
 8002416:	f041 0120 	orrmi.w	r1, r1, #32
 800241a:	6021      	strmi	r1, [r4, #0]
 800241c:	b91b      	cbnz	r3, 8002426 <_printf_i+0x15e>
 800241e:	6822      	ldr	r2, [r4, #0]
 8002420:	f022 0220 	bic.w	r2, r2, #32
 8002424:	6022      	str	r2, [r4, #0]
 8002426:	2210      	movs	r2, #16
 8002428:	e7b7      	b.n	800239a <_printf_i+0xd2>
 800242a:	064d      	lsls	r5, r1, #25
 800242c:	bf48      	it	mi
 800242e:	b29b      	uxthmi	r3, r3
 8002430:	e7ef      	b.n	8002412 <_printf_i+0x14a>
 8002432:	4665      	mov	r5, ip
 8002434:	fbb3 f1f2 	udiv	r1, r3, r2
 8002438:	fb02 3311 	mls	r3, r2, r1, r3
 800243c:	5cc3      	ldrb	r3, [r0, r3]
 800243e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002442:	460b      	mov	r3, r1
 8002444:	2900      	cmp	r1, #0
 8002446:	d1f5      	bne.n	8002434 <_printf_i+0x16c>
 8002448:	e7b9      	b.n	80023be <_printf_i+0xf6>
 800244a:	6813      	ldr	r3, [r2, #0]
 800244c:	6825      	ldr	r5, [r4, #0]
 800244e:	1d18      	adds	r0, r3, #4
 8002450:	6961      	ldr	r1, [r4, #20]
 8002452:	6010      	str	r0, [r2, #0]
 8002454:	0628      	lsls	r0, r5, #24
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	d501      	bpl.n	800245e <_printf_i+0x196>
 800245a:	6019      	str	r1, [r3, #0]
 800245c:	e002      	b.n	8002464 <_printf_i+0x19c>
 800245e:	066a      	lsls	r2, r5, #25
 8002460:	d5fb      	bpl.n	800245a <_printf_i+0x192>
 8002462:	8019      	strh	r1, [r3, #0]
 8002464:	2300      	movs	r3, #0
 8002466:	4665      	mov	r5, ip
 8002468:	6123      	str	r3, [r4, #16]
 800246a:	e7b9      	b.n	80023e0 <_printf_i+0x118>
 800246c:	6813      	ldr	r3, [r2, #0]
 800246e:	1d19      	adds	r1, r3, #4
 8002470:	6011      	str	r1, [r2, #0]
 8002472:	681d      	ldr	r5, [r3, #0]
 8002474:	6862      	ldr	r2, [r4, #4]
 8002476:	2100      	movs	r1, #0
 8002478:	4628      	mov	r0, r5
 800247a:	f000 f837 	bl	80024ec <memchr>
 800247e:	b108      	cbz	r0, 8002484 <_printf_i+0x1bc>
 8002480:	1b40      	subs	r0, r0, r5
 8002482:	6060      	str	r0, [r4, #4]
 8002484:	6863      	ldr	r3, [r4, #4]
 8002486:	6123      	str	r3, [r4, #16]
 8002488:	2300      	movs	r3, #0
 800248a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800248e:	e7a7      	b.n	80023e0 <_printf_i+0x118>
 8002490:	6923      	ldr	r3, [r4, #16]
 8002492:	462a      	mov	r2, r5
 8002494:	4639      	mov	r1, r7
 8002496:	4630      	mov	r0, r6
 8002498:	47c0      	blx	r8
 800249a:	3001      	adds	r0, #1
 800249c:	d0aa      	beq.n	80023f4 <_printf_i+0x12c>
 800249e:	6823      	ldr	r3, [r4, #0]
 80024a0:	079b      	lsls	r3, r3, #30
 80024a2:	d413      	bmi.n	80024cc <_printf_i+0x204>
 80024a4:	68e0      	ldr	r0, [r4, #12]
 80024a6:	9b03      	ldr	r3, [sp, #12]
 80024a8:	4298      	cmp	r0, r3
 80024aa:	bfb8      	it	lt
 80024ac:	4618      	movlt	r0, r3
 80024ae:	e7a3      	b.n	80023f8 <_printf_i+0x130>
 80024b0:	2301      	movs	r3, #1
 80024b2:	464a      	mov	r2, r9
 80024b4:	4639      	mov	r1, r7
 80024b6:	4630      	mov	r0, r6
 80024b8:	47c0      	blx	r8
 80024ba:	3001      	adds	r0, #1
 80024bc:	d09a      	beq.n	80023f4 <_printf_i+0x12c>
 80024be:	3501      	adds	r5, #1
 80024c0:	68e3      	ldr	r3, [r4, #12]
 80024c2:	9a03      	ldr	r2, [sp, #12]
 80024c4:	1a9b      	subs	r3, r3, r2
 80024c6:	42ab      	cmp	r3, r5
 80024c8:	dcf2      	bgt.n	80024b0 <_printf_i+0x1e8>
 80024ca:	e7eb      	b.n	80024a4 <_printf_i+0x1dc>
 80024cc:	2500      	movs	r5, #0
 80024ce:	f104 0919 	add.w	r9, r4, #25
 80024d2:	e7f5      	b.n	80024c0 <_printf_i+0x1f8>
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1ac      	bne.n	8002432 <_printf_i+0x16a>
 80024d8:	7803      	ldrb	r3, [r0, #0]
 80024da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024e2:	e76c      	b.n	80023be <_printf_i+0xf6>
 80024e4:	0800278d 	.word	0x0800278d
 80024e8:	0800279e 	.word	0x0800279e

080024ec <memchr>:
 80024ec:	b510      	push	{r4, lr}
 80024ee:	b2c9      	uxtb	r1, r1
 80024f0:	4402      	add	r2, r0
 80024f2:	4290      	cmp	r0, r2
 80024f4:	4603      	mov	r3, r0
 80024f6:	d101      	bne.n	80024fc <memchr+0x10>
 80024f8:	2300      	movs	r3, #0
 80024fa:	e003      	b.n	8002504 <memchr+0x18>
 80024fc:	781c      	ldrb	r4, [r3, #0]
 80024fe:	3001      	adds	r0, #1
 8002500:	428c      	cmp	r4, r1
 8002502:	d1f6      	bne.n	80024f2 <memchr+0x6>
 8002504:	4618      	mov	r0, r3
 8002506:	bd10      	pop	{r4, pc}

08002508 <memcpy>:
 8002508:	b510      	push	{r4, lr}
 800250a:	1e43      	subs	r3, r0, #1
 800250c:	440a      	add	r2, r1
 800250e:	4291      	cmp	r1, r2
 8002510:	d100      	bne.n	8002514 <memcpy+0xc>
 8002512:	bd10      	pop	{r4, pc}
 8002514:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002518:	f803 4f01 	strb.w	r4, [r3, #1]!
 800251c:	e7f7      	b.n	800250e <memcpy+0x6>

0800251e <memmove>:
 800251e:	4288      	cmp	r0, r1
 8002520:	b510      	push	{r4, lr}
 8002522:	eb01 0302 	add.w	r3, r1, r2
 8002526:	d807      	bhi.n	8002538 <memmove+0x1a>
 8002528:	1e42      	subs	r2, r0, #1
 800252a:	4299      	cmp	r1, r3
 800252c:	d00a      	beq.n	8002544 <memmove+0x26>
 800252e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002532:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002536:	e7f8      	b.n	800252a <memmove+0xc>
 8002538:	4283      	cmp	r3, r0
 800253a:	d9f5      	bls.n	8002528 <memmove+0xa>
 800253c:	1881      	adds	r1, r0, r2
 800253e:	1ad2      	subs	r2, r2, r3
 8002540:	42d3      	cmn	r3, r2
 8002542:	d100      	bne.n	8002546 <memmove+0x28>
 8002544:	bd10      	pop	{r4, pc}
 8002546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800254a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800254e:	e7f7      	b.n	8002540 <memmove+0x22>

08002550 <_free_r>:
 8002550:	b538      	push	{r3, r4, r5, lr}
 8002552:	4605      	mov	r5, r0
 8002554:	2900      	cmp	r1, #0
 8002556:	d043      	beq.n	80025e0 <_free_r+0x90>
 8002558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800255c:	1f0c      	subs	r4, r1, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	bfb8      	it	lt
 8002562:	18e4      	addlt	r4, r4, r3
 8002564:	f000 f8d0 	bl	8002708 <__malloc_lock>
 8002568:	4a1e      	ldr	r2, [pc, #120]	; (80025e4 <_free_r+0x94>)
 800256a:	6813      	ldr	r3, [r2, #0]
 800256c:	4610      	mov	r0, r2
 800256e:	b933      	cbnz	r3, 800257e <_free_r+0x2e>
 8002570:	6063      	str	r3, [r4, #4]
 8002572:	6014      	str	r4, [r2, #0]
 8002574:	4628      	mov	r0, r5
 8002576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800257a:	f000 b8c6 	b.w	800270a <__malloc_unlock>
 800257e:	42a3      	cmp	r3, r4
 8002580:	d90b      	bls.n	800259a <_free_r+0x4a>
 8002582:	6821      	ldr	r1, [r4, #0]
 8002584:	1862      	adds	r2, r4, r1
 8002586:	4293      	cmp	r3, r2
 8002588:	bf01      	itttt	eq
 800258a:	681a      	ldreq	r2, [r3, #0]
 800258c:	685b      	ldreq	r3, [r3, #4]
 800258e:	1852      	addeq	r2, r2, r1
 8002590:	6022      	streq	r2, [r4, #0]
 8002592:	6063      	str	r3, [r4, #4]
 8002594:	6004      	str	r4, [r0, #0]
 8002596:	e7ed      	b.n	8002574 <_free_r+0x24>
 8002598:	4613      	mov	r3, r2
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	b10a      	cbz	r2, 80025a2 <_free_r+0x52>
 800259e:	42a2      	cmp	r2, r4
 80025a0:	d9fa      	bls.n	8002598 <_free_r+0x48>
 80025a2:	6819      	ldr	r1, [r3, #0]
 80025a4:	1858      	adds	r0, r3, r1
 80025a6:	42a0      	cmp	r0, r4
 80025a8:	d10b      	bne.n	80025c2 <_free_r+0x72>
 80025aa:	6820      	ldr	r0, [r4, #0]
 80025ac:	4401      	add	r1, r0
 80025ae:	1858      	adds	r0, r3, r1
 80025b0:	4282      	cmp	r2, r0
 80025b2:	6019      	str	r1, [r3, #0]
 80025b4:	d1de      	bne.n	8002574 <_free_r+0x24>
 80025b6:	6810      	ldr	r0, [r2, #0]
 80025b8:	6852      	ldr	r2, [r2, #4]
 80025ba:	4401      	add	r1, r0
 80025bc:	6019      	str	r1, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	e7d8      	b.n	8002574 <_free_r+0x24>
 80025c2:	d902      	bls.n	80025ca <_free_r+0x7a>
 80025c4:	230c      	movs	r3, #12
 80025c6:	602b      	str	r3, [r5, #0]
 80025c8:	e7d4      	b.n	8002574 <_free_r+0x24>
 80025ca:	6820      	ldr	r0, [r4, #0]
 80025cc:	1821      	adds	r1, r4, r0
 80025ce:	428a      	cmp	r2, r1
 80025d0:	bf01      	itttt	eq
 80025d2:	6811      	ldreq	r1, [r2, #0]
 80025d4:	6852      	ldreq	r2, [r2, #4]
 80025d6:	1809      	addeq	r1, r1, r0
 80025d8:	6021      	streq	r1, [r4, #0]
 80025da:	6062      	str	r2, [r4, #4]
 80025dc:	605c      	str	r4, [r3, #4]
 80025de:	e7c9      	b.n	8002574 <_free_r+0x24>
 80025e0:	bd38      	pop	{r3, r4, r5, pc}
 80025e2:	bf00      	nop
 80025e4:	20000090 	.word	0x20000090

080025e8 <_malloc_r>:
 80025e8:	b570      	push	{r4, r5, r6, lr}
 80025ea:	1ccd      	adds	r5, r1, #3
 80025ec:	f025 0503 	bic.w	r5, r5, #3
 80025f0:	3508      	adds	r5, #8
 80025f2:	2d0c      	cmp	r5, #12
 80025f4:	bf38      	it	cc
 80025f6:	250c      	movcc	r5, #12
 80025f8:	2d00      	cmp	r5, #0
 80025fa:	4606      	mov	r6, r0
 80025fc:	db01      	blt.n	8002602 <_malloc_r+0x1a>
 80025fe:	42a9      	cmp	r1, r5
 8002600:	d903      	bls.n	800260a <_malloc_r+0x22>
 8002602:	230c      	movs	r3, #12
 8002604:	6033      	str	r3, [r6, #0]
 8002606:	2000      	movs	r0, #0
 8002608:	bd70      	pop	{r4, r5, r6, pc}
 800260a:	f000 f87d 	bl	8002708 <__malloc_lock>
 800260e:	4a21      	ldr	r2, [pc, #132]	; (8002694 <_malloc_r+0xac>)
 8002610:	6814      	ldr	r4, [r2, #0]
 8002612:	4621      	mov	r1, r4
 8002614:	b991      	cbnz	r1, 800263c <_malloc_r+0x54>
 8002616:	4c20      	ldr	r4, [pc, #128]	; (8002698 <_malloc_r+0xb0>)
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	b91b      	cbnz	r3, 8002624 <_malloc_r+0x3c>
 800261c:	4630      	mov	r0, r6
 800261e:	f000 f863 	bl	80026e8 <_sbrk_r>
 8002622:	6020      	str	r0, [r4, #0]
 8002624:	4629      	mov	r1, r5
 8002626:	4630      	mov	r0, r6
 8002628:	f000 f85e 	bl	80026e8 <_sbrk_r>
 800262c:	1c43      	adds	r3, r0, #1
 800262e:	d124      	bne.n	800267a <_malloc_r+0x92>
 8002630:	230c      	movs	r3, #12
 8002632:	4630      	mov	r0, r6
 8002634:	6033      	str	r3, [r6, #0]
 8002636:	f000 f868 	bl	800270a <__malloc_unlock>
 800263a:	e7e4      	b.n	8002606 <_malloc_r+0x1e>
 800263c:	680b      	ldr	r3, [r1, #0]
 800263e:	1b5b      	subs	r3, r3, r5
 8002640:	d418      	bmi.n	8002674 <_malloc_r+0x8c>
 8002642:	2b0b      	cmp	r3, #11
 8002644:	d90f      	bls.n	8002666 <_malloc_r+0x7e>
 8002646:	600b      	str	r3, [r1, #0]
 8002648:	18cc      	adds	r4, r1, r3
 800264a:	50cd      	str	r5, [r1, r3]
 800264c:	4630      	mov	r0, r6
 800264e:	f000 f85c 	bl	800270a <__malloc_unlock>
 8002652:	f104 000b 	add.w	r0, r4, #11
 8002656:	1d23      	adds	r3, r4, #4
 8002658:	f020 0007 	bic.w	r0, r0, #7
 800265c:	1ac3      	subs	r3, r0, r3
 800265e:	d0d3      	beq.n	8002608 <_malloc_r+0x20>
 8002660:	425a      	negs	r2, r3
 8002662:	50e2      	str	r2, [r4, r3]
 8002664:	e7d0      	b.n	8002608 <_malloc_r+0x20>
 8002666:	684b      	ldr	r3, [r1, #4]
 8002668:	428c      	cmp	r4, r1
 800266a:	bf16      	itet	ne
 800266c:	6063      	strne	r3, [r4, #4]
 800266e:	6013      	streq	r3, [r2, #0]
 8002670:	460c      	movne	r4, r1
 8002672:	e7eb      	b.n	800264c <_malloc_r+0x64>
 8002674:	460c      	mov	r4, r1
 8002676:	6849      	ldr	r1, [r1, #4]
 8002678:	e7cc      	b.n	8002614 <_malloc_r+0x2c>
 800267a:	1cc4      	adds	r4, r0, #3
 800267c:	f024 0403 	bic.w	r4, r4, #3
 8002680:	42a0      	cmp	r0, r4
 8002682:	d005      	beq.n	8002690 <_malloc_r+0xa8>
 8002684:	1a21      	subs	r1, r4, r0
 8002686:	4630      	mov	r0, r6
 8002688:	f000 f82e 	bl	80026e8 <_sbrk_r>
 800268c:	3001      	adds	r0, #1
 800268e:	d0cf      	beq.n	8002630 <_malloc_r+0x48>
 8002690:	6025      	str	r5, [r4, #0]
 8002692:	e7db      	b.n	800264c <_malloc_r+0x64>
 8002694:	20000090 	.word	0x20000090
 8002698:	20000094 	.word	0x20000094

0800269c <_realloc_r>:
 800269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269e:	4607      	mov	r7, r0
 80026a0:	4614      	mov	r4, r2
 80026a2:	460e      	mov	r6, r1
 80026a4:	b921      	cbnz	r1, 80026b0 <_realloc_r+0x14>
 80026a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80026aa:	4611      	mov	r1, r2
 80026ac:	f7ff bf9c 	b.w	80025e8 <_malloc_r>
 80026b0:	b922      	cbnz	r2, 80026bc <_realloc_r+0x20>
 80026b2:	f7ff ff4d 	bl	8002550 <_free_r>
 80026b6:	4625      	mov	r5, r4
 80026b8:	4628      	mov	r0, r5
 80026ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026bc:	f000 f826 	bl	800270c <_malloc_usable_size_r>
 80026c0:	42a0      	cmp	r0, r4
 80026c2:	d20f      	bcs.n	80026e4 <_realloc_r+0x48>
 80026c4:	4621      	mov	r1, r4
 80026c6:	4638      	mov	r0, r7
 80026c8:	f7ff ff8e 	bl	80025e8 <_malloc_r>
 80026cc:	4605      	mov	r5, r0
 80026ce:	2800      	cmp	r0, #0
 80026d0:	d0f2      	beq.n	80026b8 <_realloc_r+0x1c>
 80026d2:	4631      	mov	r1, r6
 80026d4:	4622      	mov	r2, r4
 80026d6:	f7ff ff17 	bl	8002508 <memcpy>
 80026da:	4631      	mov	r1, r6
 80026dc:	4638      	mov	r0, r7
 80026de:	f7ff ff37 	bl	8002550 <_free_r>
 80026e2:	e7e9      	b.n	80026b8 <_realloc_r+0x1c>
 80026e4:	4635      	mov	r5, r6
 80026e6:	e7e7      	b.n	80026b8 <_realloc_r+0x1c>

080026e8 <_sbrk_r>:
 80026e8:	b538      	push	{r3, r4, r5, lr}
 80026ea:	2300      	movs	r3, #0
 80026ec:	4c05      	ldr	r4, [pc, #20]	; (8002704 <_sbrk_r+0x1c>)
 80026ee:	4605      	mov	r5, r0
 80026f0:	4608      	mov	r0, r1
 80026f2:	6023      	str	r3, [r4, #0]
 80026f4:	f7ff fb48 	bl	8001d88 <_sbrk>
 80026f8:	1c43      	adds	r3, r0, #1
 80026fa:	d102      	bne.n	8002702 <_sbrk_r+0x1a>
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	b103      	cbz	r3, 8002702 <_sbrk_r+0x1a>
 8002700:	602b      	str	r3, [r5, #0]
 8002702:	bd38      	pop	{r3, r4, r5, pc}
 8002704:	20000120 	.word	0x20000120

08002708 <__malloc_lock>:
 8002708:	4770      	bx	lr

0800270a <__malloc_unlock>:
 800270a:	4770      	bx	lr

0800270c <_malloc_usable_size_r>:
 800270c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002710:	1f18      	subs	r0, r3, #4
 8002712:	2b00      	cmp	r3, #0
 8002714:	bfbc      	itt	lt
 8002716:	580b      	ldrlt	r3, [r1, r0]
 8002718:	18c0      	addlt	r0, r0, r3
 800271a:	4770      	bx	lr

0800271c <_init>:
 800271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271e:	bf00      	nop
 8002720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002722:	bc08      	pop	{r3}
 8002724:	469e      	mov	lr, r3
 8002726:	4770      	bx	lr

08002728 <_fini>:
 8002728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272a:	bf00      	nop
 800272c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800272e:	bc08      	pop	{r3}
 8002730:	469e      	mov	lr, r3
 8002732:	4770      	bx	lr
